/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../../../../common";
import type {
  Lockable,
  LockableInterface,
} from "../../../../../../../../lib/protocol/packages/core/contracts/common/implementation/Lockable";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b506000805460ff19166001179055603f80602a6000396000f3fe6080604052600080fdfea2646970667358221220dcdb83a9c05f6e7d6910284748c24d516c91fd3aa040ee16731ce33bc632de8f64736f6c63430008110033";

type LockableConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LockableConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Lockable__factory extends ContractFactory {
  constructor(...args: LockableConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Lockable> {
    return super.deploy(overrides || {}) as Promise<Lockable>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Lockable {
    return super.attach(address) as Lockable;
  }
  override connect(signer: Signer): Lockable__factory {
    return super.connect(signer) as Lockable__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LockableInterface {
    return new utils.Interface(_abi) as LockableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Lockable {
    return new Contract(address, _abi, signerOrProvider) as Lockable;
  }
}
