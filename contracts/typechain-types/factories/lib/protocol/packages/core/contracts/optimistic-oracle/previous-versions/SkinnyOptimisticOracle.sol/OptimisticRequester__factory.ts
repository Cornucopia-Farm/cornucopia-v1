/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  OptimisticRequester,
  OptimisticRequesterInterface,
} from "../../../../../../../../../lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol/OptimisticRequester";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "identifier",
        type: "bytes32",
      },
      {
        internalType: "uint32",
        name: "timestamp",
        type: "uint32",
      },
      {
        internalType: "bytes",
        name: "ancillaryData",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "address",
            name: "proposer",
            type: "address",
          },
          {
            internalType: "address",
            name: "disputer",
            type: "address",
          },
          {
            internalType: "contract IERC20",
            name: "currency",
            type: "address",
          },
          {
            internalType: "bool",
            name: "settled",
            type: "bool",
          },
          {
            internalType: "int256",
            name: "proposedPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "resolvedPrice",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "expirationTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "reward",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "finalFee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "bond",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "customLiveness",
            type: "uint256",
          },
        ],
        internalType: "struct SkinnyOptimisticOracleInterface.Request",
        name: "request",
        type: "tuple",
      },
    ],
    name: "priceDisputed",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "identifier",
        type: "bytes32",
      },
      {
        internalType: "uint32",
        name: "timestamp",
        type: "uint32",
      },
      {
        internalType: "bytes",
        name: "ancillaryData",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "address",
            name: "proposer",
            type: "address",
          },
          {
            internalType: "address",
            name: "disputer",
            type: "address",
          },
          {
            internalType: "contract IERC20",
            name: "currency",
            type: "address",
          },
          {
            internalType: "bool",
            name: "settled",
            type: "bool",
          },
          {
            internalType: "int256",
            name: "proposedPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "resolvedPrice",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "expirationTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "reward",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "finalFee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "bond",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "customLiveness",
            type: "uint256",
          },
        ],
        internalType: "struct SkinnyOptimisticOracleInterface.Request",
        name: "request",
        type: "tuple",
      },
    ],
    name: "priceProposed",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "identifier",
        type: "bytes32",
      },
      {
        internalType: "uint32",
        name: "timestamp",
        type: "uint32",
      },
      {
        internalType: "bytes",
        name: "ancillaryData",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "address",
            name: "proposer",
            type: "address",
          },
          {
            internalType: "address",
            name: "disputer",
            type: "address",
          },
          {
            internalType: "contract IERC20",
            name: "currency",
            type: "address",
          },
          {
            internalType: "bool",
            name: "settled",
            type: "bool",
          },
          {
            internalType: "int256",
            name: "proposedPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "resolvedPrice",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "expirationTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "reward",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "finalFee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "bond",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "customLiveness",
            type: "uint256",
          },
        ],
        internalType: "struct SkinnyOptimisticOracleInterface.Request",
        name: "request",
        type: "tuple",
      },
    ],
    name: "priceSettled",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class OptimisticRequester__factory {
  static readonly abi = _abi;
  static createInterface(): OptimisticRequesterInterface {
    return new utils.Interface(_abi) as OptimisticRequesterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OptimisticRequester {
    return new Contract(address, _abi, signerOrProvider) as OptimisticRequester;
  }
}
