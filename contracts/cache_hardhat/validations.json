{
  "version": "3.4",
  "log": [
    {
      "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:80"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "728a5b65183210eea52c91116bfefa7473daef7d12cfe51b5bd330ea21a1c204",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "5f9037d4f9f6821f708e856724062c3fe7ae2e99fcf78298c02401a913b2a10a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable": {
        "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "1f119568d59108ff330d7c72794491b1e3f3292774c6d36b7ea0c0970e0cf9cd",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "be01c6fe5be0ed1cf918ad111ffc76714bc14b6d484a94f6d622ad14134041f8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "3e4580d3738c14b9e55f11b8ba444fabe2ae6f49b53f93b0445b16cfebb7de13",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:12",
        "version": {
          "withMetadata": "9b0452e6b89aaf162f82f70ad7b950bad202923e81aaf94aef5c32868ad1e199",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:AddressWhitelist": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:11",
        "version": {
          "withMetadata": "3dda9de7ac245ce7e7902f44c3d59a29a194ba7f39725f26f507a543e430f2a1",
          "withoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a",
          "linkedWithoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface"
        ],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_enum(Status)2536)",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:13"
            },
            {
              "label": "whitelistIndices",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(Status)2536": {
              "label": "enum AddressWhitelist.Status",
              "members": [
                "None",
                "In",
                "Out"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_enum(Status)2536)": {
              "label": "mapping(address => enum AddressWhitelist.Status)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:12",
        "version": {
          "withMetadata": "cac9d930373f7a7af59665fb609a30425f2ec3c0af07693426500a10ab4fce2e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:10",
        "version": {
          "withMetadata": "22557767ed86df94320fcb54ee966d3c182339da2f206139dbe10685fa5dcec0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:9",
        "version": {
          "withMetadata": "1faf88546be8729236ae27e6b5af9dd3071dbac162617f78eb5e4891d8b8a866",
          "withoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e",
          "linkedWithoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lockable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_notEntered",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Testable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:Timer": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:7",
        "version": {
          "withMetadata": "3739f46416c3b437d488c797a89abfa3b8339546baf702f67a5d088cda6a8395",
          "withoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311",
          "linkedWithoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Timer",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTime",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Timer",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OptimisticOracleConstraints": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:27",
        "version": {
          "withMetadata": "088545c730b6a329ac60dcf86fb8d8908d82fef76e1660b3dc49b1a2b1957197",
          "withoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8",
          "linkedWithoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:7",
        "version": {
          "withMetadata": "370bad39c1b81b97df834319d3e92b0cd7e2a41854405db2eb68bf2027af3e47",
          "withoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a",
          "linkedWithoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:FinderInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "changeImplementationAddress(bytes32,address)",
          "getImplementationAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:IdentifierWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSupportedIdentifier(bytes32)",
          "removeSupportedIdentifier(bytes32)",
          "isIdentifierSupported(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:OracleAncillaryInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint256,bytes)",
          "hasPrice(bytes32,uint256,bytes)",
          "getPrice(bytes32,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:StoreInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "payOracleFees()",
          "payOracleFeesErc20(address,(uint256))",
          "computeRegularFee(uint256,uint256,(uint256))",
          "computeFinalFee(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:OptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "defaultLiveness()",
          "finder()",
          "getCurrentTime()",
          "requestPrice(bytes32,uint256,bytes,address,uint256)",
          "setBond(bytes32,uint256,bytes,uint256)",
          "setRefundOnDispute(bytes32,uint256,bytes)",
          "setCustomLiveness(bytes32,uint256,bytes,uint256)",
          "proposePriceFor(address,address,bytes32,uint256,bytes,int256)",
          "proposePrice(address,bytes32,uint256,bytes,int256)",
          "disputePriceFor(address,address,bytes32,uint256,bytes)",
          "disputePrice(address,bytes32,uint256,bytes)",
          "settleAndGetPrice(bytes32,uint256,bytes)",
          "settle(address,bytes32,uint256,bytes)",
          "getRequest(address,bytes32,uint256,bytes)",
          "getState(address,bytes32,uint256,bytes)",
          "hasPrice(address,bytes32,uint256,bytes)",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "requests",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(Request)5275_storage)",
              "contract": "OptimisticOracleInterface",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:90"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)1475": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Request)5275_storage)": {
              "label": "mapping(bytes32 => struct OptimisticOracleInterface.Request)",
              "numberOfBytes": "32"
            },
            "t_struct(Request)5275_storage": {
              "label": "struct OptimisticOracleInterface.Request",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "disputer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "currency",
                  "type": "t_contract(IERC20)1475",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "settled",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "refundOnDispute",
                  "type": "t_bool",
                  "offset": 21,
                  "slot": "2"
                },
                {
                  "label": "proposedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "resolvedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "expirationTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "reward",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "finalFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "bond",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "customLiveness",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                }
              ],
              "numberOfBytes": "320"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:OptimisticRequester": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:31",
        "inherit": [],
        "libraries": [],
        "methods": [
          "priceProposed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceDisputed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceSettled(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:79",
        "version": {
          "withMetadata": "368c7542c78263f01d5e3d75c87a9ebbdf37375c2f0c19bd25d951edd0aab148",
          "withoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41",
          "linkedWithoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address",
          "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint",
          "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces",
          "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData"
        ],
        "methods": [
          "(uint256,address,address)",
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracle",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:129"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)5061",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)5061": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracleProd": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:694",
        "version": {
          "withMetadata": "69b669cace41656e166fffc8b87480ef0086ca97f1bb96199a5a0295ac90f38d",
          "withoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7",
          "linkedWithoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle",
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address,address)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracleProd",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:695"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)5061",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)5061": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "src/Escrow.sol:Escrow": {
        "src": "src/Escrow.sol:18",
        "version": {
          "withMetadata": "99ec1f7c1359f172e8676d9cdc7e9f2b738d53f58161fcdb9f53670259cb68f3",
          "withoutMetadata": "03b64e3cf40d4a6872ade82eb17a80f22e1528368bba7ad5e754833d26c40dca",
          "linkedWithoutMetadata": "03b64e3cf40d4a6872ade82eb17a80f22e1528368bba7ad5e754833d26c40dca"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize()",
          "escrow(string,address,uint256,address,uint256)",
          "submit(string,address)",
          "initiateDispute(string,address,uint256,string,address)",
          "hunterDisputeResponse(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "forceHunterPayout(string,address)",
          "payoutIfDispute(string,address,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "payout(string,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "201",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:80"
            },
            {
              "label": "bountyAmounts",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:22"
            },
            {
              "label": "progress",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_bytes32,t_enum(Status)7494)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:23"
            },
            {
              "label": "expiration",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:24"
            },
            {
              "label": "payoutExpiration",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:25"
            },
            {
              "label": "bountyToken",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:26"
            },
            {
              "label": "oracleInterface",
              "offset": 0,
              "slot": "256",
              "type": "t_contract(SkinnyOptimisticOracleInterface)5715",
              "contract": "Escrow",
              "src": "src/Escrow.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(SkinnyOptimisticOracleInterface)5715": {
              "label": "contract SkinnyOptimisticOracleInterface",
              "numberOfBytes": "20"
            },
            "t_enum(Status)7494": {
              "label": "enum Escrow.Status",
              "members": [
                "NoBounty",
                "Submitted",
                "DisputeInitiated",
                "DisputeRespondedTo",
                "Resolved"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_enum(Status)7494)": {
              "label": "mapping(bytes32 => enum Escrow.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:80"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "2a9309ab37c88cd10d683994e4d6cb86fbcae633c4f1e5207223079ac97c2e42",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "61bb5c71f7f0fe5865371e760fe002a0ea6fb4718a5712a2990f8cf6a84df5bf",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable": {
        "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "627e82f4e729820cb7c2972a183aa5d01871df13b984fbbd22e73eac87e3e6f5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b3bad08c4ddb01436ba687cfa23866c824072cf12f912b09b44345febc8a9e47",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "d3a572ed429ff8cbc912567f5be9bf7e3e7fca14f58719033fb6972217321624",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:12",
        "version": {
          "withMetadata": "3cbd5d7e2294ae1795648a45cdeed1c2bdf2de527d731a45eed4fcdc31e91519",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:AddressWhitelist": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:11",
        "version": {
          "withMetadata": "ff877256c9b2711f1840d8b961e85d5b6092deda23bb8d5af28b6792360fb682",
          "withoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a",
          "linkedWithoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface"
        ],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_enum(Status)2536)",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:13"
            },
            {
              "label": "whitelistIndices",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(Status)2536": {
              "label": "enum AddressWhitelist.Status",
              "members": [
                "None",
                "In",
                "Out"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_enum(Status)2536)": {
              "label": "mapping(address => enum AddressWhitelist.Status)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:12",
        "version": {
          "withMetadata": "858c7a0513281c261bff9c5723a63f3fd072bcaa61addeb3e046a0fd65e699df",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:10",
        "version": {
          "withMetadata": "d7b14d8262c2a177fe4a743ef890e9c41823974407e7f089e7c6fb41662acc79",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:9",
        "version": {
          "withMetadata": "9a54f774c9124a66a3b73f1b9f0fe49a9d1b7a7e3c0f443c21129f981f19ee86",
          "withoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e",
          "linkedWithoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lockable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_notEntered",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Testable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:Timer": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:7",
        "version": {
          "withMetadata": "9ed424360c0f3542dba8738ff4f71752eb5b43265caea1e5705d028cdd7f8364",
          "withoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311",
          "linkedWithoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Timer",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTime",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Timer",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OptimisticOracleConstraints": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:27",
        "version": {
          "withMetadata": "a290a5fed29693ed0ac3f745217a1d130bc48e788a765b58e0c790a1490ecf91",
          "withoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8",
          "linkedWithoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:7",
        "version": {
          "withMetadata": "8b8ccc510918b074225b0408710232abd80aa614a333460604234ce2d2657c6a",
          "withoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a",
          "linkedWithoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:FinderInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "changeImplementationAddress(bytes32,address)",
          "getImplementationAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:IdentifierWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSupportedIdentifier(bytes32)",
          "removeSupportedIdentifier(bytes32)",
          "isIdentifierSupported(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:OracleAncillaryInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint256,bytes)",
          "hasPrice(bytes32,uint256,bytes)",
          "getPrice(bytes32,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:StoreInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "payOracleFees()",
          "payOracleFeesErc20(address,(uint256))",
          "computeRegularFee(uint256,uint256,(uint256))",
          "computeFinalFee(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:OptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "defaultLiveness()",
          "finder()",
          "getCurrentTime()",
          "requestPrice(bytes32,uint256,bytes,address,uint256)",
          "setBond(bytes32,uint256,bytes,uint256)",
          "setRefundOnDispute(bytes32,uint256,bytes)",
          "setCustomLiveness(bytes32,uint256,bytes,uint256)",
          "proposePriceFor(address,address,bytes32,uint256,bytes,int256)",
          "proposePrice(address,bytes32,uint256,bytes,int256)",
          "disputePriceFor(address,address,bytes32,uint256,bytes)",
          "disputePrice(address,bytes32,uint256,bytes)",
          "settleAndGetPrice(bytes32,uint256,bytes)",
          "settle(address,bytes32,uint256,bytes)",
          "getRequest(address,bytes32,uint256,bytes)",
          "getState(address,bytes32,uint256,bytes)",
          "hasPrice(address,bytes32,uint256,bytes)",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "requests",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(Request)5275_storage)",
              "contract": "OptimisticOracleInterface",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:90"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)1475": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Request)5275_storage)": {
              "label": "mapping(bytes32 => struct OptimisticOracleInterface.Request)",
              "numberOfBytes": "32"
            },
            "t_struct(Request)5275_storage": {
              "label": "struct OptimisticOracleInterface.Request",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "disputer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "currency",
                  "type": "t_contract(IERC20)1475",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "settled",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "refundOnDispute",
                  "type": "t_bool",
                  "offset": 21,
                  "slot": "2"
                },
                {
                  "label": "proposedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "resolvedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "expirationTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "reward",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "finalFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "bond",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "customLiveness",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                }
              ],
              "numberOfBytes": "320"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:OptimisticRequester": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:31",
        "inherit": [],
        "libraries": [],
        "methods": [
          "priceProposed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceDisputed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceSettled(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:79",
        "version": {
          "withMetadata": "03ee450ddb673b46df0d39e83c5c96f53395d42ad978f257655a489fd1e053e5",
          "withoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41",
          "linkedWithoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address",
          "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint",
          "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces",
          "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData"
        ],
        "methods": [
          "(uint256,address,address)",
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracle",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:129"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)5061",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)5061": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracleProd": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:694",
        "version": {
          "withMetadata": "c72d7684a3106e3c6209f123f1d548ddd8c8da8245628a7c8596055c7c087a4c",
          "withoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7",
          "linkedWithoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle",
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address,address)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracleProd",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:695"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)5061",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)5061": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "src/Escrow.sol:Escrow": {
        "src": "src/Escrow.sol:18",
        "version": {
          "withMetadata": "c5c940507d8b6a47e3481a8dcb8d4ae5d4feece6a87114e46ac5538b48305664",
          "withoutMetadata": "03b64e3cf40d4a6872ade82eb17a80f22e1528368bba7ad5e754833d26c40dca",
          "linkedWithoutMetadata": "03b64e3cf40d4a6872ade82eb17a80f22e1528368bba7ad5e754833d26c40dca"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize()",
          "escrow(string,address,uint256,address,uint256)",
          "submit(string,address)",
          "initiateDispute(string,address,uint256,string,address)",
          "hunterDisputeResponse(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "forceHunterPayout(string,address)",
          "payoutIfDispute(string,address,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "payout(string,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "201",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:80"
            },
            {
              "label": "bountyAmounts",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:22"
            },
            {
              "label": "progress",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_bytes32,t_enum(Status)7494)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:23"
            },
            {
              "label": "expiration",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:24"
            },
            {
              "label": "payoutExpiration",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:25"
            },
            {
              "label": "bountyToken",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:26"
            },
            {
              "label": "oracleInterface",
              "offset": 0,
              "slot": "256",
              "type": "t_contract(SkinnyOptimisticOracleInterface)5715",
              "contract": "Escrow",
              "src": "src/Escrow.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(SkinnyOptimisticOracleInterface)5715": {
              "label": "contract SkinnyOptimisticOracleInterface",
              "numberOfBytes": "20"
            },
            "t_enum(Status)7494": {
              "label": "enum Escrow.Status",
              "members": [
                "NoBounty",
                "Submitted",
                "DisputeInitiated",
                "DisputeRespondedTo",
                "Resolved"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_enum(Status)7494)": {
              "label": "mapping(bytes32 => enum Escrow.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:80"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "83aa6f6456a69c4e8783f7eb8dc467b209f9fe7c45a497d1596fde014d16e56a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "ff9257477eaa56bac666f23bc4e0dd59abbe5273162085d779a5cfa02452a769",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable": {
        "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "6b7407080c42e2451183ad715173fd37e88da997a0e4925cfb5797f107de1023",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "824a347420f33d0ab74e0fc7a5b98bcb81aebb31682c7d034578001b0b5ed041",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "1fbab51bb3cf444758be9948ab79aa3a2184f7deddbf96f96a55e79a3c0372c7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:12",
        "version": {
          "withMetadata": "85d150ebc7607c9b7184db54614a576d789820b792b8d5abeba3f47cca695706",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:AddressWhitelist": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:11",
        "version": {
          "withMetadata": "bbfd104df387413aef273eef2cc9a0c9f8290852142049d9df00fbc8f6c553ee",
          "withoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a",
          "linkedWithoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface"
        ],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_enum(Status)2536)",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:13"
            },
            {
              "label": "whitelistIndices",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(Status)2536": {
              "label": "enum AddressWhitelist.Status",
              "members": [
                "None",
                "In",
                "Out"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_enum(Status)2536)": {
              "label": "mapping(address => enum AddressWhitelist.Status)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:12",
        "version": {
          "withMetadata": "b3fe72114db629e1f456f75e3fca9eb9bc69363dac85476daddaddf6537b40b4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:10",
        "version": {
          "withMetadata": "cd12b5f3e009668797120d22a0085740994fe412101ee7033a48c0995b026f13",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:9",
        "version": {
          "withMetadata": "8e02fa6559b3ab9bd4859a968e6d5b3ffdd6d0ee4d6b7c782474a9ea279f945b",
          "withoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e",
          "linkedWithoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lockable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_notEntered",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Testable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:Timer": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:7",
        "version": {
          "withMetadata": "334bd94c8ca8416ceb2823a607460de5001cab0ce58091f35ddb973767735767",
          "withoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311",
          "linkedWithoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Timer",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTime",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Timer",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OptimisticOracleConstraints": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:27",
        "version": {
          "withMetadata": "9b2653d66d00ec152529a590d8f1eb5b95e74124e1547f00502c7242e0f08599",
          "withoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8",
          "linkedWithoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:7",
        "version": {
          "withMetadata": "f891469862ba5d74e5f48ebf03affa0399115b4f366884272f428c4ccb9befca",
          "withoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a",
          "linkedWithoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:FinderInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "changeImplementationAddress(bytes32,address)",
          "getImplementationAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:IdentifierWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSupportedIdentifier(bytes32)",
          "removeSupportedIdentifier(bytes32)",
          "isIdentifierSupported(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:OracleAncillaryInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint256,bytes)",
          "hasPrice(bytes32,uint256,bytes)",
          "getPrice(bytes32,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:StoreInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "payOracleFees()",
          "payOracleFeesErc20(address,(uint256))",
          "computeRegularFee(uint256,uint256,(uint256))",
          "computeFinalFee(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:OptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "defaultLiveness()",
          "finder()",
          "getCurrentTime()",
          "requestPrice(bytes32,uint256,bytes,address,uint256)",
          "setBond(bytes32,uint256,bytes,uint256)",
          "setRefundOnDispute(bytes32,uint256,bytes)",
          "setCustomLiveness(bytes32,uint256,bytes,uint256)",
          "proposePriceFor(address,address,bytes32,uint256,bytes,int256)",
          "proposePrice(address,bytes32,uint256,bytes,int256)",
          "disputePriceFor(address,address,bytes32,uint256,bytes)",
          "disputePrice(address,bytes32,uint256,bytes)",
          "settleAndGetPrice(bytes32,uint256,bytes)",
          "settle(address,bytes32,uint256,bytes)",
          "getRequest(address,bytes32,uint256,bytes)",
          "getState(address,bytes32,uint256,bytes)",
          "hasPrice(address,bytes32,uint256,bytes)",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "requests",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(Request)5275_storage)",
              "contract": "OptimisticOracleInterface",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:90"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)1475": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Request)5275_storage)": {
              "label": "mapping(bytes32 => struct OptimisticOracleInterface.Request)",
              "numberOfBytes": "32"
            },
            "t_struct(Request)5275_storage": {
              "label": "struct OptimisticOracleInterface.Request",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "disputer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "currency",
                  "type": "t_contract(IERC20)1475",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "settled",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "refundOnDispute",
                  "type": "t_bool",
                  "offset": 21,
                  "slot": "2"
                },
                {
                  "label": "proposedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "resolvedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "expirationTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "reward",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "finalFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "bond",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "customLiveness",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                }
              ],
              "numberOfBytes": "320"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:OptimisticRequester": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:31",
        "inherit": [],
        "libraries": [],
        "methods": [
          "priceProposed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceDisputed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceSettled(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:79",
        "version": {
          "withMetadata": "5e3c88c4e37c02dccec5dc4b0a9f18c44aef11ac68ada055147193fd538e73d3",
          "withoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41",
          "linkedWithoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address",
          "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint",
          "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces",
          "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData"
        ],
        "methods": [
          "(uint256,address,address)",
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracle",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:129"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)5061",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)5061": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracleProd": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:694",
        "version": {
          "withMetadata": "2d2d3903255c2a00348cebdb3a000df4016c1f9dd5838073b5b24dbcc433eab5",
          "withoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7",
          "linkedWithoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle",
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address,address)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracleProd",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:695"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)5061",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)5061": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "src/Escrow.sol:Escrow": {
        "src": "src/Escrow.sol:18",
        "version": {
          "withMetadata": "e8b722455929b71f151a112cbfff50336fd29034f93a9a267993a57466847e19",
          "withoutMetadata": "03b64e3cf40d4a6872ade82eb17a80f22e1528368bba7ad5e754833d26c40dca",
          "linkedWithoutMetadata": "03b64e3cf40d4a6872ade82eb17a80f22e1528368bba7ad5e754833d26c40dca"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize()",
          "escrow(string,address,uint256,address,uint256)",
          "submit(string,address)",
          "initiateDispute(string,address,uint256,string,address)",
          "hunterDisputeResponse(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "forceHunterPayout(string,address)",
          "payoutIfDispute(string,address,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "payout(string,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "201",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:80"
            },
            {
              "label": "bountyAmounts",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:22"
            },
            {
              "label": "progress",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_bytes32,t_enum(Status)7494)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:23"
            },
            {
              "label": "expiration",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:24"
            },
            {
              "label": "payoutExpiration",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:25"
            },
            {
              "label": "bountyToken",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:26"
            },
            {
              "label": "oracleInterface",
              "offset": 0,
              "slot": "256",
              "type": "t_contract(SkinnyOptimisticOracleInterface)5715",
              "contract": "Escrow",
              "src": "src/Escrow.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(SkinnyOptimisticOracleInterface)5715": {
              "label": "contract SkinnyOptimisticOracleInterface",
              "numberOfBytes": "20"
            },
            "t_enum(Status)7494": {
              "label": "enum Escrow.Status",
              "members": [
                "NoBounty",
                "Submitted",
                "DisputeInitiated",
                "DisputeRespondedTo",
                "Resolved"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_enum(Status)7494)": {
              "label": "mapping(bytes32 => enum Escrow.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:80"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "84a5abb249e19774b7dfa13498619da516d029f6145c338e36a4bb3cd5b1e162",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "f2194903a50da0f069ad934f7e4315774200710fd450a26734d517d3601d0604",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable": {
        "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "38470483e54718217e7216cdb8e60450776d8be9fd3107806cf0fd8421305869",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "504871c6b397a7bd4200c72f40353d9e7c1737428506091d009f7ba25637c982",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "8d70c94293a23010ff11c0f94c1e9565f528c26ea200fc1b5d83d8b2672c7eac",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:12",
        "version": {
          "withMetadata": "4b09f4db3575093ff4f36d5c79e1ae84373095fd993b35c9fee9773205b0f8cf",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:AddressWhitelist": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:11",
        "version": {
          "withMetadata": "eab8f41c174f75cf33ad6380c9f491c51e46bd32cccbab1cc623fd5df8ae998b",
          "withoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a",
          "linkedWithoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface"
        ],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_enum(Status)2536)",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:13"
            },
            {
              "label": "whitelistIndices",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(Status)2536": {
              "label": "enum AddressWhitelist.Status",
              "members": [
                "None",
                "In",
                "Out"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_enum(Status)2536)": {
              "label": "mapping(address => enum AddressWhitelist.Status)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:12",
        "version": {
          "withMetadata": "750f6a7c699997c195b55a8a8de91a482712a0f18c1dbdf2cf41c7e8ff3b3f2a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:10",
        "version": {
          "withMetadata": "5a4e7bd8e23fafa1849cbd1873e7c5ac0865eeb78cfa8f23ab619ad5f2b7a8c5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:9",
        "version": {
          "withMetadata": "3af7cc41a64daab985232625b3fade608b63b59771afa486ca351726227ab95c",
          "withoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e",
          "linkedWithoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lockable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_notEntered",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Testable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:Timer": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:7",
        "version": {
          "withMetadata": "5abbb7e589db902108eebdc06b29f53a228bace1fd05c8959bd3854f6d784257",
          "withoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311",
          "linkedWithoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Timer",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTime",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Timer",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OptimisticOracleConstraints": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:27",
        "version": {
          "withMetadata": "2ce664c9b00e5c3b93a5e91caa7eb6970cfa2b5ccc2d0926c90f419806341b59",
          "withoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8",
          "linkedWithoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:7",
        "version": {
          "withMetadata": "37084bf24eb0b3a88a7ff13428d34e866b958f044e14d121cc1868b03aeb8b2d",
          "withoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a",
          "linkedWithoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:FinderInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "changeImplementationAddress(bytes32,address)",
          "getImplementationAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:IdentifierWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSupportedIdentifier(bytes32)",
          "removeSupportedIdentifier(bytes32)",
          "isIdentifierSupported(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:OracleAncillaryInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint256,bytes)",
          "hasPrice(bytes32,uint256,bytes)",
          "getPrice(bytes32,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:StoreInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "payOracleFees()",
          "payOracleFeesErc20(address,(uint256))",
          "computeRegularFee(uint256,uint256,(uint256))",
          "computeFinalFee(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:OptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "defaultLiveness()",
          "finder()",
          "getCurrentTime()",
          "requestPrice(bytes32,uint256,bytes,address,uint256)",
          "setBond(bytes32,uint256,bytes,uint256)",
          "setRefundOnDispute(bytes32,uint256,bytes)",
          "setCustomLiveness(bytes32,uint256,bytes,uint256)",
          "proposePriceFor(address,address,bytes32,uint256,bytes,int256)",
          "proposePrice(address,bytes32,uint256,bytes,int256)",
          "disputePriceFor(address,address,bytes32,uint256,bytes)",
          "disputePrice(address,bytes32,uint256,bytes)",
          "settleAndGetPrice(bytes32,uint256,bytes)",
          "settle(address,bytes32,uint256,bytes)",
          "getRequest(address,bytes32,uint256,bytes)",
          "getState(address,bytes32,uint256,bytes)",
          "hasPrice(address,bytes32,uint256,bytes)",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "requests",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(Request)5275_storage)",
              "contract": "OptimisticOracleInterface",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:90"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)1475": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Request)5275_storage)": {
              "label": "mapping(bytes32 => struct OptimisticOracleInterface.Request)",
              "numberOfBytes": "32"
            },
            "t_struct(Request)5275_storage": {
              "label": "struct OptimisticOracleInterface.Request",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "disputer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "currency",
                  "type": "t_contract(IERC20)1475",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "settled",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "refundOnDispute",
                  "type": "t_bool",
                  "offset": 21,
                  "slot": "2"
                },
                {
                  "label": "proposedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "resolvedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "expirationTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "reward",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "finalFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "bond",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "customLiveness",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                }
              ],
              "numberOfBytes": "320"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:OptimisticRequester": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:31",
        "inherit": [],
        "libraries": [],
        "methods": [
          "priceProposed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceDisputed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceSettled(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:79",
        "version": {
          "withMetadata": "bbac18ce11d9753e040907abdd71bb09f637c6e4da09635996cdd574e9160547",
          "withoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41",
          "linkedWithoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address",
          "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint",
          "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces",
          "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData"
        ],
        "methods": [
          "(uint256,address,address)",
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracle",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:129"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)5061",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)5061": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracleProd": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:694",
        "version": {
          "withMetadata": "e761a7fd559f2dd706769110e54bd5bad1964598cb92e5b67ccfc7c3aadb02a9",
          "withoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7",
          "linkedWithoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle",
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address,address)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracleProd",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:695"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)5061",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)5061": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "src/Escrow.sol:Escrow": {
        "src": "src/Escrow.sol:18",
        "version": {
          "withMetadata": "00c7f9c250c19c108e02943a5950a761e7709944d820582667dfa8a24b74df0d",
          "withoutMetadata": "03b64e3cf40d4a6872ade82eb17a80f22e1528368bba7ad5e754833d26c40dca",
          "linkedWithoutMetadata": "03b64e3cf40d4a6872ade82eb17a80f22e1528368bba7ad5e754833d26c40dca"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize()",
          "escrow(string,address,uint256,address,uint256)",
          "submit(string,address)",
          "initiateDispute(string,address,uint256,string,address)",
          "hunterDisputeResponse(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "forceHunterPayout(string,address)",
          "payoutIfDispute(string,address,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "payout(string,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "201",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:80"
            },
            {
              "label": "bountyAmounts",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:22"
            },
            {
              "label": "progress",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_bytes32,t_enum(Status)7494)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:23"
            },
            {
              "label": "expiration",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:24"
            },
            {
              "label": "payoutExpiration",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:25"
            },
            {
              "label": "bountyToken",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:26"
            },
            {
              "label": "oracleInterface",
              "offset": 0,
              "slot": "256",
              "type": "t_contract(SkinnyOptimisticOracleInterface)5715",
              "contract": "Escrow",
              "src": "src/Escrow.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(SkinnyOptimisticOracleInterface)5715": {
              "label": "contract SkinnyOptimisticOracleInterface",
              "numberOfBytes": "20"
            },
            "t_enum(Status)7494": {
              "label": "enum Escrow.Status",
              "members": [
                "NoBounty",
                "Submitted",
                "DisputeInitiated",
                "DisputeRespondedTo",
                "Resolved"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_enum(Status)7494)": {
              "label": "mapping(bytes32 => enum Escrow.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:80"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "3e79fff4a5891cfe390e430fc0924d479982b94032df37c52b8fa4f68cae53cc",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "a68255716d2f2cfb55dd041a12218ab756eafa42be826c2daf2c37259f41993f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable": {
        "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "3292ab227db97392fc42fccee507a09bb8c941f6faa953455f0d5f2521fab105",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b592a250293f695ab8a32ce65c0659e75f561b02db801e861c3b8542d28b45cf",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "400ad4e03f2f3b9ef67192a3b8c355c3a620ec194f0e9b11b8a482b75e340348",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:12",
        "version": {
          "withMetadata": "05c8a54cc9462cc0f23d846526d00a0fa51a3be8c0e66fc242ed7f9f1a0d8df1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:AddressWhitelist": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:11",
        "version": {
          "withMetadata": "a38feae8bf8db9c4665f1d11f40d251d43e997a147dfeb4a401136ab22047f12",
          "withoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a",
          "linkedWithoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface"
        ],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_enum(Status)2536)",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:13"
            },
            {
              "label": "whitelistIndices",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(Status)2536": {
              "label": "enum AddressWhitelist.Status",
              "members": [
                "None",
                "In",
                "Out"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_enum(Status)2536)": {
              "label": "mapping(address => enum AddressWhitelist.Status)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:12",
        "version": {
          "withMetadata": "7e8e9e924fbfc45aa3e9c2238941896491f4a7b735c86d354aca3f80831a852e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:10",
        "version": {
          "withMetadata": "406d5afbeb412cdecd5067c83d9d002dbbc1f23448f5d3500a347eaf0e8aebde",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:9",
        "version": {
          "withMetadata": "735de303d2d36575ff2ac0fe7c4850670866d365c53d07407fea68fb3b931342",
          "withoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e",
          "linkedWithoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lockable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_notEntered",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Testable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:Timer": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:7",
        "version": {
          "withMetadata": "ea41793af5bc83de612e6238fd0c46bea64b817557020dca149f753b79636da8",
          "withoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311",
          "linkedWithoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Timer",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTime",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Timer",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OptimisticOracleConstraints": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:27",
        "version": {
          "withMetadata": "64d8e362ae528c24794ba9142dc50f2e5d8c0d0fd56480f6077b851e56efd856",
          "withoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8",
          "linkedWithoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:7",
        "version": {
          "withMetadata": "40db7438bb1c29953e275f842e0f0c413a8831ab4aa546d9fb1370998f9f2b72",
          "withoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a",
          "linkedWithoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:FinderInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "changeImplementationAddress(bytes32,address)",
          "getImplementationAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:IdentifierWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSupportedIdentifier(bytes32)",
          "removeSupportedIdentifier(bytes32)",
          "isIdentifierSupported(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:OracleAncillaryInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint256,bytes)",
          "hasPrice(bytes32,uint256,bytes)",
          "getPrice(bytes32,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:StoreInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "payOracleFees()",
          "payOracleFeesErc20(address,(uint256))",
          "computeRegularFee(uint256,uint256,(uint256))",
          "computeFinalFee(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:OptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "defaultLiveness()",
          "finder()",
          "getCurrentTime()",
          "requestPrice(bytes32,uint256,bytes,address,uint256)",
          "setBond(bytes32,uint256,bytes,uint256)",
          "setRefundOnDispute(bytes32,uint256,bytes)",
          "setCustomLiveness(bytes32,uint256,bytes,uint256)",
          "proposePriceFor(address,address,bytes32,uint256,bytes,int256)",
          "proposePrice(address,bytes32,uint256,bytes,int256)",
          "disputePriceFor(address,address,bytes32,uint256,bytes)",
          "disputePrice(address,bytes32,uint256,bytes)",
          "settleAndGetPrice(bytes32,uint256,bytes)",
          "settle(address,bytes32,uint256,bytes)",
          "getRequest(address,bytes32,uint256,bytes)",
          "getState(address,bytes32,uint256,bytes)",
          "hasPrice(address,bytes32,uint256,bytes)",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "requests",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(Request)5275_storage)",
              "contract": "OptimisticOracleInterface",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:90"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)1475": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Request)5275_storage)": {
              "label": "mapping(bytes32 => struct OptimisticOracleInterface.Request)",
              "numberOfBytes": "32"
            },
            "t_struct(Request)5275_storage": {
              "label": "struct OptimisticOracleInterface.Request",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "disputer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "currency",
                  "type": "t_contract(IERC20)1475",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "settled",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "refundOnDispute",
                  "type": "t_bool",
                  "offset": 21,
                  "slot": "2"
                },
                {
                  "label": "proposedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "resolvedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "expirationTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "reward",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "finalFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "bond",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "customLiveness",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                }
              ],
              "numberOfBytes": "320"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:OptimisticRequester": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:31",
        "inherit": [],
        "libraries": [],
        "methods": [
          "priceProposed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceDisputed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceSettled(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:79",
        "version": {
          "withMetadata": "4b9c630798f470ee9dd00df1e2c06836b202058998227db6f42f2b5848fc38eb",
          "withoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41",
          "linkedWithoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address",
          "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint",
          "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces",
          "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData"
        ],
        "methods": [
          "(uint256,address,address)",
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracle",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:129"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)5061",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)5061": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracleProd": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:694",
        "version": {
          "withMetadata": "cb1f5799402976c31c0e19e4c9c783b77ab065eb9fd44487fd29491243366314",
          "withoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7",
          "linkedWithoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle",
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address,address)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracleProd",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:695"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)5061",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)5061": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "src/Escrow.sol:Escrow": {
        "src": "src/Escrow.sol:18",
        "version": {
          "withMetadata": "f3bdfb4916615626bfefe27d7b1269fb1d64085b8f488b918ce87cbeb4212d55",
          "withoutMetadata": "03b64e3cf40d4a6872ade82eb17a80f22e1528368bba7ad5e754833d26c40dca",
          "linkedWithoutMetadata": "03b64e3cf40d4a6872ade82eb17a80f22e1528368bba7ad5e754833d26c40dca"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize()",
          "escrow(string,address,uint256,address,uint256)",
          "submit(string,address)",
          "initiateDispute(string,address,uint256,string,address)",
          "hunterDisputeResponse(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "forceHunterPayout(string,address)",
          "payoutIfDispute(string,address,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "payout(string,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "201",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:80"
            },
            {
              "label": "bountyAmounts",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:22"
            },
            {
              "label": "progress",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_bytes32,t_enum(Status)7494)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:23"
            },
            {
              "label": "expiration",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:24"
            },
            {
              "label": "payoutExpiration",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:25"
            },
            {
              "label": "bountyToken",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:26"
            },
            {
              "label": "oracleInterface",
              "offset": 0,
              "slot": "256",
              "type": "t_contract(SkinnyOptimisticOracleInterface)5715",
              "contract": "Escrow",
              "src": "src/Escrow.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(SkinnyOptimisticOracleInterface)5715": {
              "label": "contract SkinnyOptimisticOracleInterface",
              "numberOfBytes": "20"
            },
            "t_enum(Status)7494": {
              "label": "enum Escrow.Status",
              "members": [
                "NoBounty",
                "Submitted",
                "DisputeInitiated",
                "DisputeRespondedTo",
                "Resolved"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_enum(Status)7494)": {
              "label": "mapping(bytes32 => enum Escrow.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "c41f979dba0fd2ea02fed24d737eab1ddb8756b20f8815596d56e63c5c1f20bd",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "6463d18e2e311755afa31cf76fcc106acaef04fd8040b22187837ab1d579104e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable": {
        "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "5307114c60b8660ad287ab794025745b92e2a0c1a97386619d16cdc9bebf2307",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "c0f9bb36fd4ccd26dbbfea14dd449c4578f0eac8fd80e45cf637f2111e397b2c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "a19042c0cab4d52713d859e994198491b7a1b1cbc001b9b188385cf47ced7098",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:12",
        "version": {
          "withMetadata": "c2454086b08a1ebabe829cf4ccf5d213d21e086d24dabd3051f6ec00126ddd53",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:AddressWhitelist": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:11",
        "version": {
          "withMetadata": "4a91d0d053193e4397e116ad582d5872ba188fa11d6befcaabcddeee84d632e4",
          "withoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a",
          "linkedWithoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface"
        ],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_enum(Status)2463)",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:13"
            },
            {
              "label": "whitelistIndices",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(Status)2463": {
              "label": "enum AddressWhitelist.Status",
              "members": [
                "None",
                "In",
                "Out"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_enum(Status)2463)": {
              "label": "mapping(address => enum AddressWhitelist.Status)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:12",
        "version": {
          "withMetadata": "87a3d9cbeea1e28a80ab561c6880a364c68d461e12ee646d1ed9d23bb2e091b8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:10",
        "version": {
          "withMetadata": "0d81462c816326410a3d36e6a32083b00ed54143f5411223d4a66941cb474097",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:9",
        "version": {
          "withMetadata": "5bbe40eefb6356f28f8a833fb7bdcdce519fa07fc9db4106fd1a21dd423e2855",
          "withoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e",
          "linkedWithoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lockable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_notEntered",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Testable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:Timer": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:7",
        "version": {
          "withMetadata": "83ea84f12f5cfb7c6efbac6892a2378b13c0ec43045d56dda2c0746b8ea52120",
          "withoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311",
          "linkedWithoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Timer",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTime",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Timer",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OptimisticOracleConstraints": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:27",
        "version": {
          "withMetadata": "c7b5f224f317013fb96952f26fd939d9ee47096013b1e9ac555b3945dfa40d5e",
          "withoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8",
          "linkedWithoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:7",
        "version": {
          "withMetadata": "01d0a1fee5c22ad6324f341c23281d910eef7566b11d4e14f0b4ed052146f730",
          "withoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a",
          "linkedWithoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:FinderInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "changeImplementationAddress(bytes32,address)",
          "getImplementationAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:IdentifierWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSupportedIdentifier(bytes32)",
          "removeSupportedIdentifier(bytes32)",
          "isIdentifierSupported(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:OracleAncillaryInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint256,bytes)",
          "hasPrice(bytes32,uint256,bytes)",
          "getPrice(bytes32,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:StoreInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "payOracleFees()",
          "payOracleFeesErc20(address,(uint256))",
          "computeRegularFee(uint256,uint256,(uint256))",
          "computeFinalFee(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:OptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "defaultLiveness()",
          "finder()",
          "getCurrentTime()",
          "requestPrice(bytes32,uint256,bytes,address,uint256)",
          "setBond(bytes32,uint256,bytes,uint256)",
          "setRefundOnDispute(bytes32,uint256,bytes)",
          "setCustomLiveness(bytes32,uint256,bytes,uint256)",
          "proposePriceFor(address,address,bytes32,uint256,bytes,int256)",
          "proposePrice(address,bytes32,uint256,bytes,int256)",
          "disputePriceFor(address,address,bytes32,uint256,bytes)",
          "disputePrice(address,bytes32,uint256,bytes)",
          "settleAndGetPrice(bytes32,uint256,bytes)",
          "settle(address,bytes32,uint256,bytes)",
          "getRequest(address,bytes32,uint256,bytes)",
          "getState(address,bytes32,uint256,bytes)",
          "hasPrice(address,bytes32,uint256,bytes)",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "requests",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(Request)5202_storage)",
              "contract": "OptimisticOracleInterface",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:90"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)1402": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Request)5202_storage)": {
              "label": "mapping(bytes32 => struct OptimisticOracleInterface.Request)",
              "numberOfBytes": "32"
            },
            "t_struct(Request)5202_storage": {
              "label": "struct OptimisticOracleInterface.Request",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "disputer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "currency",
                  "type": "t_contract(IERC20)1402",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "settled",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "refundOnDispute",
                  "type": "t_bool",
                  "offset": 21,
                  "slot": "2"
                },
                {
                  "label": "proposedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "resolvedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "expirationTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "reward",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "finalFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "bond",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "customLiveness",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                }
              ],
              "numberOfBytes": "320"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:OptimisticRequester": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:31",
        "inherit": [],
        "libraries": [],
        "methods": [
          "priceProposed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceDisputed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceSettled(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:79",
        "version": {
          "withMetadata": "5bd3d10ebf64f4ecbbbdab28756d595733e381e5fe077efaa3b4e9061adac606",
          "withoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41",
          "linkedWithoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address",
          "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint",
          "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces",
          "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData"
        ],
        "methods": [
          "(uint256,address,address)",
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracle",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:129"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)4988",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)4988": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracleProd": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:694",
        "version": {
          "withMetadata": "f4c44c971b07efbb880078b0ed9e4fc9ccf9d4bd173694cdde916f1ad3924a16",
          "withoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7",
          "linkedWithoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle",
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address,address)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracleProd",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:695"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)4988",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)4988": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "src/Escrow.sol:Escrow": {
        "src": "src/Escrow.sol:17",
        "version": {
          "withMetadata": "135dd1f7bfe14c7ce958ba021e9b42d6bae3bb311b60026c91f3ed669809ed45",
          "withoutMetadata": "d46388d5f349ec8a8ce2142f7d82808476f96f382a612ea61d08ab15aa42ad45",
          "linkedWithoutMetadata": "d46388d5f349ec8a8ce2142f7d82808476f96f382a612ea61d08ab15aa42ad45"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize()",
          "escrow(string,address,uint256,address,uint256)",
          "submit(string,address)",
          "initiateDispute(string,address,address,uint256,string,address)",
          "hunterDisputeResponse(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "forceHunterPayout(string,address,address)",
          "payoutIfDispute(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address)",
          "payout(string,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "bountyAmounts",
              "offset": 0,
              "slot": "201",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:21"
            },
            {
              "label": "progress",
              "offset": 0,
              "slot": "202",
              "type": "t_mapping(t_bytes32,t_enum(Status)7411)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:22"
            },
            {
              "label": "expiration",
              "offset": 0,
              "slot": "203",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:23"
            },
            {
              "label": "payoutExpiration",
              "offset": 0,
              "slot": "204",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:24"
            },
            {
              "label": "oracleInterface",
              "offset": 0,
              "slot": "205",
              "type": "t_contract(SkinnyOptimisticOracleInterface)5642",
              "contract": "Escrow",
              "src": "src/Escrow.sol:26"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(SkinnyOptimisticOracleInterface)5642": {
              "label": "contract SkinnyOptimisticOracleInterface",
              "numberOfBytes": "20"
            },
            "t_enum(Status)7411": {
              "label": "enum Escrow.Status",
              "members": [
                "NoBounty",
                "Submitted",
                "DisputeInitiated",
                "DisputeRespondedTo",
                "Resolved"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_bytes32,t_enum(Status)7411)": {
              "label": "mapping(bytes32 => enum Escrow.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "bb6a640a20ac1c019d9644ed01458a77efc2d18e9ebf839793b987e079eb8a12",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "0b7f25cd4ea7d8fe8263d3788ea324c69d56a9b18a3c3426c69a244f58cc74bd",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable": {
        "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "8a5bc3b4de9fa28b28d1b516469a5d4319f8deab1028acd3306d905611d480b0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "987e1c1f3fec38ac6bfa6a945f5a6a2c2ad43b360350ca2cd268cb88131557b9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "5aa2ddd7644dd0ad5e3ebcdd9c45ccd546e2dd58c7599b78d9b9e10c7d934b0f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:12",
        "version": {
          "withMetadata": "f4c45b776115b9328673381c8d71142f37bb571d26bd983754c9b1d54e8bfbdf",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:AddressWhitelist": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:11",
        "version": {
          "withMetadata": "824065adc1049a6156eb0c4b7779a75f2483574701d5540b448d88878e266b8b",
          "withoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a",
          "linkedWithoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface"
        ],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_enum(Status)2463)",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:13"
            },
            {
              "label": "whitelistIndices",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(Status)2463": {
              "label": "enum AddressWhitelist.Status",
              "members": [
                "None",
                "In",
                "Out"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_enum(Status)2463)": {
              "label": "mapping(address => enum AddressWhitelist.Status)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:12",
        "version": {
          "withMetadata": "d0a3d95171297093e64ce1ac283ded74c2e567c69b049ec07f7c4d5217468924",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:10",
        "version": {
          "withMetadata": "ea6d89e9379f43073690034db54fb8a2365f06e647651836ca3328049b6a622f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:9",
        "version": {
          "withMetadata": "22646744dddaedcf5824e4872a4fc3cac67f9a94b2e4dc5cda194aa5c17e7a2b",
          "withoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e",
          "linkedWithoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lockable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_notEntered",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Testable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:Timer": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:7",
        "version": {
          "withMetadata": "35fb9cefaeaf9ae62256edc37b1a304026c575e0951498687da53c1ca0c41b9a",
          "withoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311",
          "linkedWithoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Timer",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTime",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Timer",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OptimisticOracleConstraints": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:27",
        "version": {
          "withMetadata": "c2806683569a69374620cf6c4d00713e3cd2c94c1c0b326129fae5967a81363a",
          "withoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8",
          "linkedWithoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:7",
        "version": {
          "withMetadata": "1f04fd778dba0c038be853be9a7d485b2d7616083ab44992ae931b5921cb9310",
          "withoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a",
          "linkedWithoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:FinderInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "changeImplementationAddress(bytes32,address)",
          "getImplementationAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:IdentifierWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSupportedIdentifier(bytes32)",
          "removeSupportedIdentifier(bytes32)",
          "isIdentifierSupported(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:OracleAncillaryInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint256,bytes)",
          "hasPrice(bytes32,uint256,bytes)",
          "getPrice(bytes32,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:StoreInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "payOracleFees()",
          "payOracleFeesErc20(address,(uint256))",
          "computeRegularFee(uint256,uint256,(uint256))",
          "computeFinalFee(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:OptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "defaultLiveness()",
          "finder()",
          "getCurrentTime()",
          "requestPrice(bytes32,uint256,bytes,address,uint256)",
          "setBond(bytes32,uint256,bytes,uint256)",
          "setRefundOnDispute(bytes32,uint256,bytes)",
          "setCustomLiveness(bytes32,uint256,bytes,uint256)",
          "proposePriceFor(address,address,bytes32,uint256,bytes,int256)",
          "proposePrice(address,bytes32,uint256,bytes,int256)",
          "disputePriceFor(address,address,bytes32,uint256,bytes)",
          "disputePrice(address,bytes32,uint256,bytes)",
          "settleAndGetPrice(bytes32,uint256,bytes)",
          "settle(address,bytes32,uint256,bytes)",
          "getRequest(address,bytes32,uint256,bytes)",
          "getState(address,bytes32,uint256,bytes)",
          "hasPrice(address,bytes32,uint256,bytes)",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "requests",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(Request)5202_storage)",
              "contract": "OptimisticOracleInterface",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:90"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)1402": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Request)5202_storage)": {
              "label": "mapping(bytes32 => struct OptimisticOracleInterface.Request)",
              "numberOfBytes": "32"
            },
            "t_struct(Request)5202_storage": {
              "label": "struct OptimisticOracleInterface.Request",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "disputer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "currency",
                  "type": "t_contract(IERC20)1402",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "settled",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "refundOnDispute",
                  "type": "t_bool",
                  "offset": 21,
                  "slot": "2"
                },
                {
                  "label": "proposedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "resolvedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "expirationTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "reward",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "finalFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "bond",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "customLiveness",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                }
              ],
              "numberOfBytes": "320"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:OptimisticRequester": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:31",
        "inherit": [],
        "libraries": [],
        "methods": [
          "priceProposed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceDisputed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceSettled(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:79",
        "version": {
          "withMetadata": "e5593a95b8c40fce2be19f5780ac34155be5b29ccb5812ee6bece54f36aff343",
          "withoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41",
          "linkedWithoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address",
          "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint",
          "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces",
          "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData"
        ],
        "methods": [
          "(uint256,address,address)",
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracle",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:129"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)4988",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)4988": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracleProd": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:694",
        "version": {
          "withMetadata": "0f679eba71e5b9380ec6d6ee59be9d524905f0c37fa22aabb739cc6c5a7ac1df",
          "withoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7",
          "linkedWithoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle",
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address,address)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracleProd",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:695"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)4988",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)4988": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "src/Escrow.sol:Escrow": {
        "src": "src/Escrow.sol:17",
        "version": {
          "withMetadata": "7b224616b91b9d29dca03c87437d05af11010343f5f006558c71dcb71bcd740d",
          "withoutMetadata": "d46388d5f349ec8a8ce2142f7d82808476f96f382a612ea61d08ab15aa42ad45",
          "linkedWithoutMetadata": "d46388d5f349ec8a8ce2142f7d82808476f96f382a612ea61d08ab15aa42ad45"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize()",
          "escrow(string,address,uint256,address,uint256)",
          "submit(string,address)",
          "initiateDispute(string,address,address,uint256,string,address)",
          "hunterDisputeResponse(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "forceHunterPayout(string,address,address)",
          "payoutIfDispute(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address)",
          "payout(string,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "bountyAmounts",
              "offset": 0,
              "slot": "201",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:21"
            },
            {
              "label": "progress",
              "offset": 0,
              "slot": "202",
              "type": "t_mapping(t_bytes32,t_enum(Status)7411)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:22"
            },
            {
              "label": "expiration",
              "offset": 0,
              "slot": "203",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:23"
            },
            {
              "label": "payoutExpiration",
              "offset": 0,
              "slot": "204",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:24"
            },
            {
              "label": "oracleInterface",
              "offset": 0,
              "slot": "205",
              "type": "t_contract(SkinnyOptimisticOracleInterface)5642",
              "contract": "Escrow",
              "src": "src/Escrow.sol:26"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(SkinnyOptimisticOracleInterface)5642": {
              "label": "contract SkinnyOptimisticOracleInterface",
              "numberOfBytes": "20"
            },
            "t_enum(Status)7411": {
              "label": "enum Escrow.Status",
              "members": [
                "NoBounty",
                "Submitted",
                "DisputeInitiated",
                "DisputeRespondedTo",
                "Resolved"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_bytes32,t_enum(Status)7411)": {
              "label": "mapping(bytes32 => enum Escrow.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "0b7a13230a69093c8c13cd5602e3727b6e179726f1810e108a9a1daed326d0cd",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "9fd974b368090ad1e7d86d6b4d6d0564429136173bcb437ceec0b095c34ec87c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable": {
        "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "04ddb0445ba46a1df84aca47407e546fa82570b5952cca26f83fdf6d4d8884a5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "912039b3f561009100efb3822c0144e0ffba01ffd22a5e26ad95dab9f68c537b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "31fffde293984562bd9a5f2bec0894cc591d77889e87885afe871decaf5c10a7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:12",
        "version": {
          "withMetadata": "fe30e5ada61af258102e9ea5df8df7375912b70a0b031b679304e281236eeefa",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:AddressWhitelist": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:11",
        "version": {
          "withMetadata": "4ec989b1684158162251a296aac11068a8814818adf9c764d16883953de24020",
          "withoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a",
          "linkedWithoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface"
        ],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_enum(Status)2463)",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:13"
            },
            {
              "label": "whitelistIndices",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(Status)2463": {
              "label": "enum AddressWhitelist.Status",
              "members": [
                "None",
                "In",
                "Out"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_enum(Status)2463)": {
              "label": "mapping(address => enum AddressWhitelist.Status)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:12",
        "version": {
          "withMetadata": "6be20c2ad91175f5e7a937c53b628eca951f575d292cb6c2149ea087fee47f10",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:10",
        "version": {
          "withMetadata": "485ebaef9b653107b112b89c56939b34c92591fa4e576042f079ca348c3282d7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:9",
        "version": {
          "withMetadata": "8c05276e74d76021388dc2e1d2485a96d34cd10e816da33323e667b64adeb0d0",
          "withoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e",
          "linkedWithoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lockable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_notEntered",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Testable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:Timer": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:7",
        "version": {
          "withMetadata": "1e96dd4fa904bb983994ac1e2f707143c9f1514c7e0c954586265580c0faa8b6",
          "withoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311",
          "linkedWithoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Timer",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTime",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Timer",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OptimisticOracleConstraints": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:27",
        "version": {
          "withMetadata": "04c44da4c7f06c4353d98673b5fde4325875725e12b3351b970f87b1aeb36603",
          "withoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8",
          "linkedWithoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:7",
        "version": {
          "withMetadata": "5d1c96e457a259edf475b811222e1f9424bfe35f1342eae916c13e713c86a2d6",
          "withoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a",
          "linkedWithoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:FinderInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "changeImplementationAddress(bytes32,address)",
          "getImplementationAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:IdentifierWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSupportedIdentifier(bytes32)",
          "removeSupportedIdentifier(bytes32)",
          "isIdentifierSupported(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:OracleAncillaryInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint256,bytes)",
          "hasPrice(bytes32,uint256,bytes)",
          "getPrice(bytes32,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:StoreInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "payOracleFees()",
          "payOracleFeesErc20(address,(uint256))",
          "computeRegularFee(uint256,uint256,(uint256))",
          "computeFinalFee(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:OptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "defaultLiveness()",
          "finder()",
          "getCurrentTime()",
          "requestPrice(bytes32,uint256,bytes,address,uint256)",
          "setBond(bytes32,uint256,bytes,uint256)",
          "setRefundOnDispute(bytes32,uint256,bytes)",
          "setCustomLiveness(bytes32,uint256,bytes,uint256)",
          "proposePriceFor(address,address,bytes32,uint256,bytes,int256)",
          "proposePrice(address,bytes32,uint256,bytes,int256)",
          "disputePriceFor(address,address,bytes32,uint256,bytes)",
          "disputePrice(address,bytes32,uint256,bytes)",
          "settleAndGetPrice(bytes32,uint256,bytes)",
          "settle(address,bytes32,uint256,bytes)",
          "getRequest(address,bytes32,uint256,bytes)",
          "getState(address,bytes32,uint256,bytes)",
          "hasPrice(address,bytes32,uint256,bytes)",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "requests",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(Request)5202_storage)",
              "contract": "OptimisticOracleInterface",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:90"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)1402": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Request)5202_storage)": {
              "label": "mapping(bytes32 => struct OptimisticOracleInterface.Request)",
              "numberOfBytes": "32"
            },
            "t_struct(Request)5202_storage": {
              "label": "struct OptimisticOracleInterface.Request",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "disputer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "currency",
                  "type": "t_contract(IERC20)1402",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "settled",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "refundOnDispute",
                  "type": "t_bool",
                  "offset": 21,
                  "slot": "2"
                },
                {
                  "label": "proposedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "resolvedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "expirationTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "reward",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "finalFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "bond",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "customLiveness",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                }
              ],
              "numberOfBytes": "320"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:OptimisticRequester": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:31",
        "inherit": [],
        "libraries": [],
        "methods": [
          "priceProposed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceDisputed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceSettled(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:79",
        "version": {
          "withMetadata": "47979f7226923188bd966e85b90072d36fc0c5dce0282ae3f04d9e6b90837cf3",
          "withoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41",
          "linkedWithoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address",
          "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint",
          "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces",
          "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData"
        ],
        "methods": [
          "(uint256,address,address)",
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracle",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:129"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)4988",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)4988": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracleProd": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:694",
        "version": {
          "withMetadata": "956103e177af1333f066f6d9505f43fb684229457eb133b14c189469d18bf396",
          "withoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7",
          "linkedWithoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle",
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address,address)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracleProd",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:695"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)4988",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)4988": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "src/Escrow.sol:Escrow": {
        "src": "src/Escrow.sol:17",
        "version": {
          "withMetadata": "6c5c66b753689c5f5b19eb87ebf31a40389e493e240cccc3e680bba61d3c4615",
          "withoutMetadata": "d46388d5f349ec8a8ce2142f7d82808476f96f382a612ea61d08ab15aa42ad45",
          "linkedWithoutMetadata": "d46388d5f349ec8a8ce2142f7d82808476f96f382a612ea61d08ab15aa42ad45"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize()",
          "escrow(string,address,uint256,address,uint256)",
          "submit(string,address)",
          "initiateDispute(string,address,address,uint256,string,address)",
          "hunterDisputeResponse(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "forceHunterPayout(string,address,address)",
          "payoutIfDispute(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address)",
          "payout(string,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "bountyAmounts",
              "offset": 0,
              "slot": "201",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:21"
            },
            {
              "label": "progress",
              "offset": 0,
              "slot": "202",
              "type": "t_mapping(t_bytes32,t_enum(Status)7411)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:22"
            },
            {
              "label": "expiration",
              "offset": 0,
              "slot": "203",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:23"
            },
            {
              "label": "payoutExpiration",
              "offset": 0,
              "slot": "204",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:24"
            },
            {
              "label": "oracleInterface",
              "offset": 0,
              "slot": "205",
              "type": "t_contract(SkinnyOptimisticOracleInterface)5642",
              "contract": "Escrow",
              "src": "src/Escrow.sol:26"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(SkinnyOptimisticOracleInterface)5642": {
              "label": "contract SkinnyOptimisticOracleInterface",
              "numberOfBytes": "20"
            },
            "t_enum(Status)7411": {
              "label": "enum Escrow.Status",
              "members": [
                "NoBounty",
                "Submitted",
                "DisputeInitiated",
                "DisputeRespondedTo",
                "Resolved"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_bytes32,t_enum(Status)7411)": {
              "label": "mapping(bytes32 => enum Escrow.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "d65e256e33a6d738e4d4a1ac28fe31d0a5666b00e7247cb66468cf73fda6e234",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "8c47729f697ae3015b0d69ad9827a882b8ec7a3fe0491b2a7f67dabee231d471",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable": {
        "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "54aaaf1a0fec7ce54cb86be756fb68747a7835527ab3b15def5fc3f9f86c55b6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "7fbfe241808361e4008c586d87fe792879c3154d751b9d805c31b1a42593aaa7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "95b49f4475f8f3e402c7b2796308e8eda58f76d91931b8f72a6fd581ab44f5df",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:12",
        "version": {
          "withMetadata": "dd32c0aa9561bc3819b2cfb8eae197970201e22ed4fc22ab93a900a41d812d72",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:AddressWhitelist": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:11",
        "version": {
          "withMetadata": "70abc05384eda86b852b5a7824890928675ca17ae0c61ec1f5ac4b980370013f",
          "withoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a",
          "linkedWithoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface"
        ],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_enum(Status)2463)",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:13"
            },
            {
              "label": "whitelistIndices",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(Status)2463": {
              "label": "enum AddressWhitelist.Status",
              "members": [
                "None",
                "In",
                "Out"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_enum(Status)2463)": {
              "label": "mapping(address => enum AddressWhitelist.Status)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:12",
        "version": {
          "withMetadata": "e90c897ba27c11f2b02b997035637abce77ee6c042f189b8e23c0c595de3700f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:10",
        "version": {
          "withMetadata": "8a260d79a18130ad1b9a0ede35d1eeb03dae0c9821275f608cb62a71b2573cbb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:9",
        "version": {
          "withMetadata": "b5fcfa5f44b8f695f41466f10de000b671ad5ed45eec523e494559977a30055c",
          "withoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e",
          "linkedWithoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lockable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_notEntered",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Testable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:Timer": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:7",
        "version": {
          "withMetadata": "f521c841d87d86f8f84c59939043f2bcb16b807f81afe1a72b0db7098c0a4c05",
          "withoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311",
          "linkedWithoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Timer",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTime",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Timer",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OptimisticOracleConstraints": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:27",
        "version": {
          "withMetadata": "4b8ccac9ad3cd4af51d0242ec1386019f64614af70b2870a50435b1b21117711",
          "withoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8",
          "linkedWithoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:7",
        "version": {
          "withMetadata": "97601bab5c31691318a07d551843eae07a8ef77600a811d24e3d3c611151fb60",
          "withoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a",
          "linkedWithoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:FinderInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "changeImplementationAddress(bytes32,address)",
          "getImplementationAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:IdentifierWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSupportedIdentifier(bytes32)",
          "removeSupportedIdentifier(bytes32)",
          "isIdentifierSupported(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:OracleAncillaryInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint256,bytes)",
          "hasPrice(bytes32,uint256,bytes)",
          "getPrice(bytes32,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:StoreInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "payOracleFees()",
          "payOracleFeesErc20(address,(uint256))",
          "computeRegularFee(uint256,uint256,(uint256))",
          "computeFinalFee(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:OptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "defaultLiveness()",
          "finder()",
          "getCurrentTime()",
          "requestPrice(bytes32,uint256,bytes,address,uint256)",
          "setBond(bytes32,uint256,bytes,uint256)",
          "setRefundOnDispute(bytes32,uint256,bytes)",
          "setCustomLiveness(bytes32,uint256,bytes,uint256)",
          "proposePriceFor(address,address,bytes32,uint256,bytes,int256)",
          "proposePrice(address,bytes32,uint256,bytes,int256)",
          "disputePriceFor(address,address,bytes32,uint256,bytes)",
          "disputePrice(address,bytes32,uint256,bytes)",
          "settleAndGetPrice(bytes32,uint256,bytes)",
          "settle(address,bytes32,uint256,bytes)",
          "getRequest(address,bytes32,uint256,bytes)",
          "getState(address,bytes32,uint256,bytes)",
          "hasPrice(address,bytes32,uint256,bytes)",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "requests",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(Request)5202_storage)",
              "contract": "OptimisticOracleInterface",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:90"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)1402": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Request)5202_storage)": {
              "label": "mapping(bytes32 => struct OptimisticOracleInterface.Request)",
              "numberOfBytes": "32"
            },
            "t_struct(Request)5202_storage": {
              "label": "struct OptimisticOracleInterface.Request",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "disputer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "currency",
                  "type": "t_contract(IERC20)1402",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "settled",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "refundOnDispute",
                  "type": "t_bool",
                  "offset": 21,
                  "slot": "2"
                },
                {
                  "label": "proposedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "resolvedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "expirationTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "reward",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "finalFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "bond",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "customLiveness",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                }
              ],
              "numberOfBytes": "320"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:OptimisticRequester": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:31",
        "inherit": [],
        "libraries": [],
        "methods": [
          "priceProposed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceDisputed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceSettled(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:79",
        "version": {
          "withMetadata": "117916d0e333d03c8f3e1f11ba4aa09b1fa373a192e0e09e40f4e58df532c38f",
          "withoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41",
          "linkedWithoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address",
          "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint",
          "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces",
          "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData"
        ],
        "methods": [
          "(uint256,address,address)",
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracle",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:129"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)4988",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)4988": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracleProd": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:694",
        "version": {
          "withMetadata": "9317b26a4bbc2ceabd98c3a5ff7f7233b0725e619a21dd57d4d1902b23532f1f",
          "withoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7",
          "linkedWithoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle",
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address,address)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracleProd",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:695"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)4988",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)4988": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "src/Escrow.sol:Escrow": {
        "src": "src/Escrow.sol:17",
        "version": {
          "withMetadata": "b26d2bb2d66478c5dddc5f6f4c81d6ecf050d98bdb4dcbaf75953df9d5e7325d",
          "withoutMetadata": "d46388d5f349ec8a8ce2142f7d82808476f96f382a612ea61d08ab15aa42ad45",
          "linkedWithoutMetadata": "d46388d5f349ec8a8ce2142f7d82808476f96f382a612ea61d08ab15aa42ad45"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize()",
          "escrow(string,address,uint256,address,uint256)",
          "submit(string,address)",
          "initiateDispute(string,address,address,uint256,string,address)",
          "hunterDisputeResponse(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "forceHunterPayout(string,address,address)",
          "payoutIfDispute(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address)",
          "payout(string,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "bountyAmounts",
              "offset": 0,
              "slot": "201",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:21"
            },
            {
              "label": "progress",
              "offset": 0,
              "slot": "202",
              "type": "t_mapping(t_bytes32,t_enum(Status)7411)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:22"
            },
            {
              "label": "expiration",
              "offset": 0,
              "slot": "203",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:23"
            },
            {
              "label": "payoutExpiration",
              "offset": 0,
              "slot": "204",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:24"
            },
            {
              "label": "oracleInterface",
              "offset": 0,
              "slot": "205",
              "type": "t_contract(SkinnyOptimisticOracleInterface)5642",
              "contract": "Escrow",
              "src": "src/Escrow.sol:26"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(SkinnyOptimisticOracleInterface)5642": {
              "label": "contract SkinnyOptimisticOracleInterface",
              "numberOfBytes": "20"
            },
            "t_enum(Status)7411": {
              "label": "enum Escrow.Status",
              "members": [
                "NoBounty",
                "Submitted",
                "DisputeInitiated",
                "DisputeRespondedTo",
                "Resolved"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_bytes32,t_enum(Status)7411)": {
              "label": "mapping(bytes32 => enum Escrow.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5ebe334ac53d3c59232b57907f48b11e0da026624028642d3b3ddaa2aaea74e7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "ab10784f4c9875ccae53770f53a71f7ecf8a8771729f3d200d75980f266ce3d1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable": {
        "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "0f5e3a91db58f06b77bf5fd60bf90998f79a7a09b034c141838c81ad15516694",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "3154d840828a0e7389aed487f24633abc6c8c0f5d6f7f561067d4232be79e263",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "e7ea6a1693351ee31599f3dae3de1f2b17a38cc79d15cfef7aa4c4ceaf1d4595",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:12",
        "version": {
          "withMetadata": "8d4be58d6a1a393eb85f32b9957f24cef75412cde4639376181371c422f17e5c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:AddressWhitelist": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:11",
        "version": {
          "withMetadata": "0f2aefbe43395269f66634fa78a9825cd110fb8d3d9c320078b44d18bc984419",
          "withoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a",
          "linkedWithoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface"
        ],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_enum(Status)2463)",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:13"
            },
            {
              "label": "whitelistIndices",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(Status)2463": {
              "label": "enum AddressWhitelist.Status",
              "members": [
                "None",
                "In",
                "Out"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_enum(Status)2463)": {
              "label": "mapping(address => enum AddressWhitelist.Status)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:12",
        "version": {
          "withMetadata": "0d22dc1643aa3c36d894f5d47566dafc22ae36f51eed25ee3b9cef96e56851bf",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:10",
        "version": {
          "withMetadata": "89a89870c2992b1342ead799eac1dcea5dd08e7c94cb9ba158b2ae39035d916f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:9",
        "version": {
          "withMetadata": "0af8a88f3d50f86e0360fab3e8c5cc4149819991ee8a350e0a5c76ca7a114181",
          "withoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e",
          "linkedWithoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lockable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_notEntered",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Testable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:Timer": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:7",
        "version": {
          "withMetadata": "1be9db4051962f398f3b4456ff93b99b3eeca484e2527d1b054750c0d0267b4d",
          "withoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311",
          "linkedWithoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Timer",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTime",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Timer",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OptimisticOracleConstraints": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:27",
        "version": {
          "withMetadata": "31fed2e418379a9891740511301fa54d13461e73263667d39c9746b776228b0d",
          "withoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8",
          "linkedWithoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:7",
        "version": {
          "withMetadata": "1a5d09da9e44b576d37de331f650fb6cad059ba4178e7dc1894ac4138e18839a",
          "withoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a",
          "linkedWithoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:FinderInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "changeImplementationAddress(bytes32,address)",
          "getImplementationAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:IdentifierWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSupportedIdentifier(bytes32)",
          "removeSupportedIdentifier(bytes32)",
          "isIdentifierSupported(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:OracleAncillaryInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint256,bytes)",
          "hasPrice(bytes32,uint256,bytes)",
          "getPrice(bytes32,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:StoreInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "payOracleFees()",
          "payOracleFeesErc20(address,(uint256))",
          "computeRegularFee(uint256,uint256,(uint256))",
          "computeFinalFee(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:OptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "defaultLiveness()",
          "finder()",
          "getCurrentTime()",
          "requestPrice(bytes32,uint256,bytes,address,uint256)",
          "setBond(bytes32,uint256,bytes,uint256)",
          "setRefundOnDispute(bytes32,uint256,bytes)",
          "setCustomLiveness(bytes32,uint256,bytes,uint256)",
          "proposePriceFor(address,address,bytes32,uint256,bytes,int256)",
          "proposePrice(address,bytes32,uint256,bytes,int256)",
          "disputePriceFor(address,address,bytes32,uint256,bytes)",
          "disputePrice(address,bytes32,uint256,bytes)",
          "settleAndGetPrice(bytes32,uint256,bytes)",
          "settle(address,bytes32,uint256,bytes)",
          "getRequest(address,bytes32,uint256,bytes)",
          "getState(address,bytes32,uint256,bytes)",
          "hasPrice(address,bytes32,uint256,bytes)",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "requests",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(Request)5202_storage)",
              "contract": "OptimisticOracleInterface",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:90"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)1402": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Request)5202_storage)": {
              "label": "mapping(bytes32 => struct OptimisticOracleInterface.Request)",
              "numberOfBytes": "32"
            },
            "t_struct(Request)5202_storage": {
              "label": "struct OptimisticOracleInterface.Request",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "disputer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "currency",
                  "type": "t_contract(IERC20)1402",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "settled",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "refundOnDispute",
                  "type": "t_bool",
                  "offset": 21,
                  "slot": "2"
                },
                {
                  "label": "proposedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "resolvedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "expirationTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "reward",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "finalFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "bond",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "customLiveness",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                }
              ],
              "numberOfBytes": "320"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:OptimisticRequester": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:31",
        "inherit": [],
        "libraries": [],
        "methods": [
          "priceProposed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceDisputed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceSettled(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:79",
        "version": {
          "withMetadata": "0fea92adc56c788d4ae068e15486f344f0252a15739e452b5abc401f2b918ec8",
          "withoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41",
          "linkedWithoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address",
          "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint",
          "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces",
          "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData"
        ],
        "methods": [
          "(uint256,address,address)",
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracle",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:129"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)4988",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)4988": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracleProd": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:694",
        "version": {
          "withMetadata": "274546501d34ba422bfe8680022a86f4b154053bed9516f7b519012326247289",
          "withoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7",
          "linkedWithoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle",
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address,address)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracleProd",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:695"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)4988",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)4988": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "src/Escrow.sol:Escrow": {
        "src": "src/Escrow.sol:17",
        "version": {
          "withMetadata": "aed5c8d339b0541e4e243481f6be2890c1c942a67f1d9bede6f072a5b7f80487",
          "withoutMetadata": "d46388d5f349ec8a8ce2142f7d82808476f96f382a612ea61d08ab15aa42ad45",
          "linkedWithoutMetadata": "d46388d5f349ec8a8ce2142f7d82808476f96f382a612ea61d08ab15aa42ad45"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize()",
          "escrow(string,address,uint256,address,uint256)",
          "submit(string,address)",
          "initiateDispute(string,address,address,uint256,string,address)",
          "hunterDisputeResponse(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "forceHunterPayout(string,address,address)",
          "payoutIfDispute(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address)",
          "payout(string,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "bountyAmounts",
              "offset": 0,
              "slot": "201",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:21"
            },
            {
              "label": "progress",
              "offset": 0,
              "slot": "202",
              "type": "t_mapping(t_bytes32,t_enum(Status)7411)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:22"
            },
            {
              "label": "expiration",
              "offset": 0,
              "slot": "203",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:23"
            },
            {
              "label": "payoutExpiration",
              "offset": 0,
              "slot": "204",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:24"
            },
            {
              "label": "oracleInterface",
              "offset": 0,
              "slot": "205",
              "type": "t_contract(SkinnyOptimisticOracleInterface)5642",
              "contract": "Escrow",
              "src": "src/Escrow.sol:26"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(SkinnyOptimisticOracleInterface)5642": {
              "label": "contract SkinnyOptimisticOracleInterface",
              "numberOfBytes": "20"
            },
            "t_enum(Status)7411": {
              "label": "enum Escrow.Status",
              "members": [
                "NoBounty",
                "Submitted",
                "DisputeInitiated",
                "DisputeRespondedTo",
                "Resolved"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_bytes32,t_enum(Status)7411)": {
              "label": "mapping(bytes32 => enum Escrow.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "e0442742ca258a5cfdb5e9951aca2a01885760f4153c9591e92fcaf5063f9483",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "e8477a6420430c977d2d43ea679eebf10c6d1193cb46342caab306c52a7a6843",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable": {
        "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "89de5d9fe4a6f61c36de14b8f41620a5b8c0143cf6f991de90a5ea9233e01ae6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b8bd47ba94275a5af723b467f8026d3f03d030fdf67e889388f65290333dbbdb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "5a5b8f81c29011087584206fefa178385c9c07ad4e38a17daa9fd1204ae3e720",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:12",
        "version": {
          "withMetadata": "41b4666ac7a46057239196efcbd52db5788244e91cbd0885c7f6051b7984de24",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:AddressWhitelist": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:11",
        "version": {
          "withMetadata": "c927a52d545dbc52bec3e932bdb01c6e4310ee958e4fc09c07bf33a485566819",
          "withoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a",
          "linkedWithoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface"
        ],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_enum(Status)2463)",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:13"
            },
            {
              "label": "whitelistIndices",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(Status)2463": {
              "label": "enum AddressWhitelist.Status",
              "members": [
                "None",
                "In",
                "Out"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_enum(Status)2463)": {
              "label": "mapping(address => enum AddressWhitelist.Status)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:12",
        "version": {
          "withMetadata": "b7855166cb743fa21b8b53bb66dff1941f375ca53310f994d27d84f531a148b7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:10",
        "version": {
          "withMetadata": "315fa85df23cee189492bda9fc7d1211497e641f72ec21e9f475a0e61a74c92b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:9",
        "version": {
          "withMetadata": "e9548c879850ebb4bf8b832cf048a745e07df5138bcb223b7a396d7c3893da41",
          "withoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e",
          "linkedWithoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lockable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_notEntered",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Testable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:Timer": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:7",
        "version": {
          "withMetadata": "5ba15f5f7f4f7e39aff26aeb357e5fb534f8ecc6c5edb62e0fbfa8c3dd8d7ab8",
          "withoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311",
          "linkedWithoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Timer",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTime",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Timer",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OptimisticOracleConstraints": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:27",
        "version": {
          "withMetadata": "991cf36aab02bd477d06cd0f421d58d0af92158d370a8fd0e914faa57ebb5bdc",
          "withoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8",
          "linkedWithoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:7",
        "version": {
          "withMetadata": "5b55eab770a37274caf9b256c4414dfd51a5aab6e2ee4bbdca1f3eea045b8cb1",
          "withoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a",
          "linkedWithoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:FinderInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "changeImplementationAddress(bytes32,address)",
          "getImplementationAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:IdentifierWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSupportedIdentifier(bytes32)",
          "removeSupportedIdentifier(bytes32)",
          "isIdentifierSupported(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:OracleAncillaryInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint256,bytes)",
          "hasPrice(bytes32,uint256,bytes)",
          "getPrice(bytes32,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:StoreInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "payOracleFees()",
          "payOracleFeesErc20(address,(uint256))",
          "computeRegularFee(uint256,uint256,(uint256))",
          "computeFinalFee(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:OptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "defaultLiveness()",
          "finder()",
          "getCurrentTime()",
          "requestPrice(bytes32,uint256,bytes,address,uint256)",
          "setBond(bytes32,uint256,bytes,uint256)",
          "setRefundOnDispute(bytes32,uint256,bytes)",
          "setCustomLiveness(bytes32,uint256,bytes,uint256)",
          "proposePriceFor(address,address,bytes32,uint256,bytes,int256)",
          "proposePrice(address,bytes32,uint256,bytes,int256)",
          "disputePriceFor(address,address,bytes32,uint256,bytes)",
          "disputePrice(address,bytes32,uint256,bytes)",
          "settleAndGetPrice(bytes32,uint256,bytes)",
          "settle(address,bytes32,uint256,bytes)",
          "getRequest(address,bytes32,uint256,bytes)",
          "getState(address,bytes32,uint256,bytes)",
          "hasPrice(address,bytes32,uint256,bytes)",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "requests",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(Request)5202_storage)",
              "contract": "OptimisticOracleInterface",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:90"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)1402": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Request)5202_storage)": {
              "label": "mapping(bytes32 => struct OptimisticOracleInterface.Request)",
              "numberOfBytes": "32"
            },
            "t_struct(Request)5202_storage": {
              "label": "struct OptimisticOracleInterface.Request",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "disputer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "currency",
                  "type": "t_contract(IERC20)1402",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "settled",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "refundOnDispute",
                  "type": "t_bool",
                  "offset": 21,
                  "slot": "2"
                },
                {
                  "label": "proposedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "resolvedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "expirationTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "reward",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "finalFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "bond",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "customLiveness",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                }
              ],
              "numberOfBytes": "320"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:OptimisticRequester": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:31",
        "inherit": [],
        "libraries": [],
        "methods": [
          "priceProposed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceDisputed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceSettled(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:79",
        "version": {
          "withMetadata": "6f0cb5c1cb9241c3cdc80bbd1b050d53fe455341a79ae50a5d4bd8479a794051",
          "withoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41",
          "linkedWithoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address",
          "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint",
          "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces",
          "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData"
        ],
        "methods": [
          "(uint256,address,address)",
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracle",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:129"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)4988",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)4988": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracleProd": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:694",
        "version": {
          "withMetadata": "5446efbff1bda26177607ddde5d7b2ee0c26545e644f4e9c52863bd39d859e35",
          "withoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7",
          "linkedWithoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle",
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address,address)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracleProd",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:695"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)4988",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)4988": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "src/Escrow.sol:Escrow": {
        "src": "src/Escrow.sol:17",
        "version": {
          "withMetadata": "3dd6b2bd2252f0bd439a311fd75b56626e6696d4336461874cf2a355e41d7af6",
          "withoutMetadata": "d46388d5f349ec8a8ce2142f7d82808476f96f382a612ea61d08ab15aa42ad45",
          "linkedWithoutMetadata": "d46388d5f349ec8a8ce2142f7d82808476f96f382a612ea61d08ab15aa42ad45"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize()",
          "escrow(string,address,uint256,address,uint256)",
          "submit(string,address)",
          "initiateDispute(string,address,address,uint256,string,address)",
          "hunterDisputeResponse(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "forceHunterPayout(string,address,address)",
          "payoutIfDispute(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address)",
          "payout(string,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "bountyAmounts",
              "offset": 0,
              "slot": "201",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:21"
            },
            {
              "label": "progress",
              "offset": 0,
              "slot": "202",
              "type": "t_mapping(t_bytes32,t_enum(Status)7411)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:22"
            },
            {
              "label": "expiration",
              "offset": 0,
              "slot": "203",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:23"
            },
            {
              "label": "payoutExpiration",
              "offset": 0,
              "slot": "204",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:24"
            },
            {
              "label": "oracleInterface",
              "offset": 0,
              "slot": "205",
              "type": "t_contract(SkinnyOptimisticOracleInterface)5642",
              "contract": "Escrow",
              "src": "src/Escrow.sol:26"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(SkinnyOptimisticOracleInterface)5642": {
              "label": "contract SkinnyOptimisticOracleInterface",
              "numberOfBytes": "20"
            },
            "t_enum(Status)7411": {
              "label": "enum Escrow.Status",
              "members": [
                "NoBounty",
                "Submitted",
                "DisputeInitiated",
                "DisputeRespondedTo",
                "Resolved"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_bytes32,t_enum(Status)7411)": {
              "label": "mapping(bytes32 => enum Escrow.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "8eb0f03fa4bb1fdb29efaebf7944a0131bfd4b237c91772158cb78eeac687405",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "7417eb49744518005cb102e420d22392c3b167c92f090f87d7db49449c7d19d8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable": {
        "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "a76d6b5ced7a3675a1a3f59850a2052d65be35068c1c73bff7dc514f812d45b5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "ad7299f5cab30ddcd539e37250b685cecdad5a1fa4d96124a967fd9cb5563334",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "a7e33a8adac3ce8f4a66b5246ae70117fc067e791e390813d633db1a597c1087",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:12",
        "version": {
          "withMetadata": "c2aa6f7e03b644262b628b1e58af36ed425944739a6f600e8aa6740b83761723",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:AddressWhitelist": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:11",
        "version": {
          "withMetadata": "6fd91c9f1795f89a988dd7242241f9ac7de677d9109d74e2edd45d2c7d475ed7",
          "withoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a",
          "linkedWithoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface"
        ],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_enum(Status)2463)",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:13"
            },
            {
              "label": "whitelistIndices",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(Status)2463": {
              "label": "enum AddressWhitelist.Status",
              "members": [
                "None",
                "In",
                "Out"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_enum(Status)2463)": {
              "label": "mapping(address => enum AddressWhitelist.Status)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:12",
        "version": {
          "withMetadata": "321254ed643dd932754860efc70c5202f891066adf29bb0c8379393a1c936af3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:10",
        "version": {
          "withMetadata": "8dd741140f838718904aca09781f1d6080c2c7a126e1f02df6a0fc7548d7976d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:9",
        "version": {
          "withMetadata": "29f488c6ddaa06e257b8a18d458ba86335654d787c029cf38130b4d9ceee5683",
          "withoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e",
          "linkedWithoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lockable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_notEntered",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Testable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:Timer": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:7",
        "version": {
          "withMetadata": "c7410c6cbb4e46e98b95cd5dbfba08be63eeb563abfbe16ffcd235114f1a9a12",
          "withoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311",
          "linkedWithoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Timer",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTime",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Timer",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OptimisticOracleConstraints": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:27",
        "version": {
          "withMetadata": "7d61e23ad7f72cb8e899d5bca329045f27bce74977e0bb0c3be4b066f7d1e9da",
          "withoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8",
          "linkedWithoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:7",
        "version": {
          "withMetadata": "059b0e6f1586eaa6a7783f68f27c933df6b504ef27c051b7c0a3be152b62e2e2",
          "withoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a",
          "linkedWithoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:FinderInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "changeImplementationAddress(bytes32,address)",
          "getImplementationAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:IdentifierWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSupportedIdentifier(bytes32)",
          "removeSupportedIdentifier(bytes32)",
          "isIdentifierSupported(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:OracleAncillaryInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint256,bytes)",
          "hasPrice(bytes32,uint256,bytes)",
          "getPrice(bytes32,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:StoreInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "payOracleFees()",
          "payOracleFeesErc20(address,(uint256))",
          "computeRegularFee(uint256,uint256,(uint256))",
          "computeFinalFee(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:OptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "defaultLiveness()",
          "finder()",
          "getCurrentTime()",
          "requestPrice(bytes32,uint256,bytes,address,uint256)",
          "setBond(bytes32,uint256,bytes,uint256)",
          "setRefundOnDispute(bytes32,uint256,bytes)",
          "setCustomLiveness(bytes32,uint256,bytes,uint256)",
          "proposePriceFor(address,address,bytes32,uint256,bytes,int256)",
          "proposePrice(address,bytes32,uint256,bytes,int256)",
          "disputePriceFor(address,address,bytes32,uint256,bytes)",
          "disputePrice(address,bytes32,uint256,bytes)",
          "settleAndGetPrice(bytes32,uint256,bytes)",
          "settle(address,bytes32,uint256,bytes)",
          "getRequest(address,bytes32,uint256,bytes)",
          "getState(address,bytes32,uint256,bytes)",
          "hasPrice(address,bytes32,uint256,bytes)",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "requests",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(Request)5202_storage)",
              "contract": "OptimisticOracleInterface",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:90"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)1402": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Request)5202_storage)": {
              "label": "mapping(bytes32 => struct OptimisticOracleInterface.Request)",
              "numberOfBytes": "32"
            },
            "t_struct(Request)5202_storage": {
              "label": "struct OptimisticOracleInterface.Request",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "disputer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "currency",
                  "type": "t_contract(IERC20)1402",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "settled",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "refundOnDispute",
                  "type": "t_bool",
                  "offset": 21,
                  "slot": "2"
                },
                {
                  "label": "proposedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "resolvedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "expirationTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "reward",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "finalFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "bond",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "customLiveness",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                }
              ],
              "numberOfBytes": "320"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:OptimisticRequester": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:31",
        "inherit": [],
        "libraries": [],
        "methods": [
          "priceProposed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceDisputed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceSettled(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:79",
        "version": {
          "withMetadata": "8f66a1d2f2dfddda87661023ab8a4f089bc0555096151d1377c63efc1a77e604",
          "withoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41",
          "linkedWithoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address",
          "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint",
          "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces",
          "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData"
        ],
        "methods": [
          "(uint256,address,address)",
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracle",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:129"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)4988",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)4988": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracleProd": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:694",
        "version": {
          "withMetadata": "55a7624374b3ae1345832303d367269ea0e0d9391e695b69dc6fd252edcaf097",
          "withoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7",
          "linkedWithoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle",
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address,address)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracleProd",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:695"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)4988",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)4988": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "src/Escrow.sol:Escrow": {
        "src": "src/Escrow.sol:17",
        "version": {
          "withMetadata": "26edb27983ae93a746a7de640f152eaa1e5ab206ade59c7e2742ee600c0e2bbd",
          "withoutMetadata": "d46388d5f349ec8a8ce2142f7d82808476f96f382a612ea61d08ab15aa42ad45",
          "linkedWithoutMetadata": "d46388d5f349ec8a8ce2142f7d82808476f96f382a612ea61d08ab15aa42ad45"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize()",
          "escrow(string,address,uint256,address,uint256)",
          "submit(string,address)",
          "initiateDispute(string,address,address,uint256,string,address)",
          "hunterDisputeResponse(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "forceHunterPayout(string,address,address)",
          "payoutIfDispute(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address)",
          "payout(string,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "bountyAmounts",
              "offset": 0,
              "slot": "201",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:21"
            },
            {
              "label": "progress",
              "offset": 0,
              "slot": "202",
              "type": "t_mapping(t_bytes32,t_enum(Status)7411)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:22"
            },
            {
              "label": "expiration",
              "offset": 0,
              "slot": "203",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:23"
            },
            {
              "label": "payoutExpiration",
              "offset": 0,
              "slot": "204",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:24"
            },
            {
              "label": "oracleInterface",
              "offset": 0,
              "slot": "205",
              "type": "t_contract(SkinnyOptimisticOracleInterface)5642",
              "contract": "Escrow",
              "src": "src/Escrow.sol:26"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(SkinnyOptimisticOracleInterface)5642": {
              "label": "contract SkinnyOptimisticOracleInterface",
              "numberOfBytes": "20"
            },
            "t_enum(Status)7411": {
              "label": "enum Escrow.Status",
              "members": [
                "NoBounty",
                "Submitted",
                "DisputeInitiated",
                "DisputeRespondedTo",
                "Resolved"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_bytes32,t_enum(Status)7411)": {
              "label": "mapping(bytes32 => enum Escrow.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5b8543a0626abb8f2c5ad489f3b3124defc3c1073fe4b1c58cc3366e83cc2dc0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "c0d85295203be63de5142a072915f0b729c5c6fb53be4acd425dde75cc00f1ab",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable": {
        "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "7d5ead19a1bf1dd8a15c34d2135ad2bc69ed52e3926141fea53480386366f76a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "5130074a00a1b8d6c3958c2182324ad87f3c684db3e850f56ed920373467b58e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "ed9be83595f0c282e697b72a4111eab7af527e9483d4b44a258897e3c8049c85",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:12",
        "version": {
          "withMetadata": "43e1719d4cfef6650a9c88bfc372e8f880f04bf7450cec2aad195ca09f83ad3b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:AddressWhitelist": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:11",
        "version": {
          "withMetadata": "81c4a8e718862c9c091d9f3e4f5ff62f99aa42a3f382a3f4a31cdd623587370c",
          "withoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a",
          "linkedWithoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface"
        ],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_enum(Status)2463)",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:13"
            },
            {
              "label": "whitelistIndices",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(Status)2463": {
              "label": "enum AddressWhitelist.Status",
              "members": [
                "None",
                "In",
                "Out"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_enum(Status)2463)": {
              "label": "mapping(address => enum AddressWhitelist.Status)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:12",
        "version": {
          "withMetadata": "e2c2136447c39d3bfd257021f9c843137c844f21c89c7a6b94a3ac4c3ed0f91c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:10",
        "version": {
          "withMetadata": "d49b76c3e4a2923be4db5336e8aa7c6717acf5bb12e260186eb64772096d105a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:9",
        "version": {
          "withMetadata": "8d7716670c335314674be90be7c820602cea5b647ef499e24c7393e46b1ef4c7",
          "withoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e",
          "linkedWithoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lockable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_notEntered",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Testable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:Timer": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:7",
        "version": {
          "withMetadata": "54e395448250b9dbe9dfe53013cf940fb2865580b8dab856edfd138468f7b41c",
          "withoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311",
          "linkedWithoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Timer",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTime",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Timer",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OptimisticOracleConstraints": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:27",
        "version": {
          "withMetadata": "01fafa98771ffd844f917251e7e025cb6605829a992c89c9ef1924c775fcf895",
          "withoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8",
          "linkedWithoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:7",
        "version": {
          "withMetadata": "07f1e600f1fc77baf7ea8a4cd65f419a043f75927c7be76ee1678163f5fa9cfc",
          "withoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a",
          "linkedWithoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:FinderInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "changeImplementationAddress(bytes32,address)",
          "getImplementationAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:IdentifierWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSupportedIdentifier(bytes32)",
          "removeSupportedIdentifier(bytes32)",
          "isIdentifierSupported(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:OracleAncillaryInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint256,bytes)",
          "hasPrice(bytes32,uint256,bytes)",
          "getPrice(bytes32,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:StoreInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "payOracleFees()",
          "payOracleFeesErc20(address,(uint256))",
          "computeRegularFee(uint256,uint256,(uint256))",
          "computeFinalFee(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:OptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "defaultLiveness()",
          "finder()",
          "getCurrentTime()",
          "requestPrice(bytes32,uint256,bytes,address,uint256)",
          "setBond(bytes32,uint256,bytes,uint256)",
          "setRefundOnDispute(bytes32,uint256,bytes)",
          "setCustomLiveness(bytes32,uint256,bytes,uint256)",
          "proposePriceFor(address,address,bytes32,uint256,bytes,int256)",
          "proposePrice(address,bytes32,uint256,bytes,int256)",
          "disputePriceFor(address,address,bytes32,uint256,bytes)",
          "disputePrice(address,bytes32,uint256,bytes)",
          "settleAndGetPrice(bytes32,uint256,bytes)",
          "settle(address,bytes32,uint256,bytes)",
          "getRequest(address,bytes32,uint256,bytes)",
          "getState(address,bytes32,uint256,bytes)",
          "hasPrice(address,bytes32,uint256,bytes)",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "requests",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(Request)5202_storage)",
              "contract": "OptimisticOracleInterface",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:90"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)1402": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Request)5202_storage)": {
              "label": "mapping(bytes32 => struct OptimisticOracleInterface.Request)",
              "numberOfBytes": "32"
            },
            "t_struct(Request)5202_storage": {
              "label": "struct OptimisticOracleInterface.Request",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "disputer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "currency",
                  "type": "t_contract(IERC20)1402",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "settled",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "refundOnDispute",
                  "type": "t_bool",
                  "offset": 21,
                  "slot": "2"
                },
                {
                  "label": "proposedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "resolvedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "expirationTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "reward",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "finalFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "bond",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "customLiveness",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                }
              ],
              "numberOfBytes": "320"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:OptimisticRequester": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:31",
        "inherit": [],
        "libraries": [],
        "methods": [
          "priceProposed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceDisputed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceSettled(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:79",
        "version": {
          "withMetadata": "29986aa4f00a50300202ef092cc8838185be03824f1925e78be3bd38ea67f776",
          "withoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41",
          "linkedWithoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address",
          "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint",
          "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces",
          "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData"
        ],
        "methods": [
          "(uint256,address,address)",
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracle",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:129"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)4988",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)4988": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracleProd": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:694",
        "version": {
          "withMetadata": "2e569032e36c13a9c672bd9579dcaff350a14a4ed9a473ea2bf4d116b0452dd0",
          "withoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7",
          "linkedWithoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle",
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address,address)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracleProd",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:695"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)4988",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)4988": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "src/Escrow.sol:Escrow": {
        "src": "src/Escrow.sol:17",
        "version": {
          "withMetadata": "3ab3c235b94d87f0eb402520e6eedacc59f05c3d293acea33e205c96528c509f",
          "withoutMetadata": "d46388d5f349ec8a8ce2142f7d82808476f96f382a612ea61d08ab15aa42ad45",
          "linkedWithoutMetadata": "d46388d5f349ec8a8ce2142f7d82808476f96f382a612ea61d08ab15aa42ad45"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize()",
          "escrow(string,address,uint256,address,uint256)",
          "submit(string,address)",
          "initiateDispute(string,address,address,uint256,string,address)",
          "hunterDisputeResponse(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "forceHunterPayout(string,address,address)",
          "payoutIfDispute(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address)",
          "payout(string,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "bountyAmounts",
              "offset": 0,
              "slot": "201",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:21"
            },
            {
              "label": "progress",
              "offset": 0,
              "slot": "202",
              "type": "t_mapping(t_bytes32,t_enum(Status)7411)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:22"
            },
            {
              "label": "expiration",
              "offset": 0,
              "slot": "203",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:23"
            },
            {
              "label": "payoutExpiration",
              "offset": 0,
              "slot": "204",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:24"
            },
            {
              "label": "oracleInterface",
              "offset": 0,
              "slot": "205",
              "type": "t_contract(SkinnyOptimisticOracleInterface)5642",
              "contract": "Escrow",
              "src": "src/Escrow.sol:26"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(SkinnyOptimisticOracleInterface)5642": {
              "label": "contract SkinnyOptimisticOracleInterface",
              "numberOfBytes": "20"
            },
            "t_enum(Status)7411": {
              "label": "enum Escrow.Status",
              "members": [
                "NoBounty",
                "Submitted",
                "DisputeInitiated",
                "DisputeRespondedTo",
                "Resolved"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_bytes32,t_enum(Status)7411)": {
              "label": "mapping(bytes32 => enum Escrow.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "bb11b7dd1da1cbb107b5a374d797f5a666cc16459e2b7d9431c6852e07655c18",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "9754ba49cd37a41447644dfaf401b9778f61bd8ae2a9e580deb8a62bb9f16c3d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable": {
        "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "71d418cde060285468e26fc30f1a9fede40bdb5c4deae7f9d6753f2d84c04471",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "331fc48ded5d39ff871ac44edb2e53ca479ec02c44c967a84f85444ae584ed7f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "794a40cd82a6e5f362b0ff0d320f1fac5eace8e362a395218bd70bf8b1ea4842",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:12",
        "version": {
          "withMetadata": "3a92086bdddfc894c067c8f4a5ffecddceb8810aef82e632739f15b750ba2753",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:AddressWhitelist": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:11",
        "version": {
          "withMetadata": "9d16894c0b122a0f0d59aa1688acbf2bb08ddf95e02536aa3ca4bde5c7ea589f",
          "withoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a",
          "linkedWithoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface"
        ],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_enum(Status)2463)",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:13"
            },
            {
              "label": "whitelistIndices",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(Status)2463": {
              "label": "enum AddressWhitelist.Status",
              "members": [
                "None",
                "In",
                "Out"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_enum(Status)2463)": {
              "label": "mapping(address => enum AddressWhitelist.Status)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:12",
        "version": {
          "withMetadata": "fa2d137582dec5353816ac525253b4e97c9dc41108dad2ee17d0cb489deca35d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:10",
        "version": {
          "withMetadata": "1dbe78188104dd57d027c948094a19a37459d68c8d6c86e9f6154d8ac211477d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:9",
        "version": {
          "withMetadata": "09c9c1dd8337eca8049fc1087dbce4932ad16583b680bf84d373d99f046f2898",
          "withoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e",
          "linkedWithoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lockable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_notEntered",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Testable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:Timer": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:7",
        "version": {
          "withMetadata": "8263fe56bbfeecc6a4d0d77f80ca6665334d362358fc69e51895f3bce581d09e",
          "withoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311",
          "linkedWithoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Timer",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTime",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Timer",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OptimisticOracleConstraints": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:27",
        "version": {
          "withMetadata": "09634da0329d23fe1b8b159a0d74d88f83fed651115d1cf206dc8f8b9f5499f9",
          "withoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8",
          "linkedWithoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:7",
        "version": {
          "withMetadata": "3a4718eaec6c44fbd29596192b66010f15e92a75a90932b8b53d827ea94f3a6e",
          "withoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a",
          "linkedWithoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:FinderInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "changeImplementationAddress(bytes32,address)",
          "getImplementationAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:IdentifierWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSupportedIdentifier(bytes32)",
          "removeSupportedIdentifier(bytes32)",
          "isIdentifierSupported(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:OracleAncillaryInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint256,bytes)",
          "hasPrice(bytes32,uint256,bytes)",
          "getPrice(bytes32,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:StoreInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "payOracleFees()",
          "payOracleFeesErc20(address,(uint256))",
          "computeRegularFee(uint256,uint256,(uint256))",
          "computeFinalFee(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:OptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "defaultLiveness()",
          "finder()",
          "getCurrentTime()",
          "requestPrice(bytes32,uint256,bytes,address,uint256)",
          "setBond(bytes32,uint256,bytes,uint256)",
          "setRefundOnDispute(bytes32,uint256,bytes)",
          "setCustomLiveness(bytes32,uint256,bytes,uint256)",
          "proposePriceFor(address,address,bytes32,uint256,bytes,int256)",
          "proposePrice(address,bytes32,uint256,bytes,int256)",
          "disputePriceFor(address,address,bytes32,uint256,bytes)",
          "disputePrice(address,bytes32,uint256,bytes)",
          "settleAndGetPrice(bytes32,uint256,bytes)",
          "settle(address,bytes32,uint256,bytes)",
          "getRequest(address,bytes32,uint256,bytes)",
          "getState(address,bytes32,uint256,bytes)",
          "hasPrice(address,bytes32,uint256,bytes)",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "requests",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(Request)5202_storage)",
              "contract": "OptimisticOracleInterface",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:90"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)1402": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Request)5202_storage)": {
              "label": "mapping(bytes32 => struct OptimisticOracleInterface.Request)",
              "numberOfBytes": "32"
            },
            "t_struct(Request)5202_storage": {
              "label": "struct OptimisticOracleInterface.Request",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "disputer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "currency",
                  "type": "t_contract(IERC20)1402",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "settled",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "refundOnDispute",
                  "type": "t_bool",
                  "offset": 21,
                  "slot": "2"
                },
                {
                  "label": "proposedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "resolvedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "expirationTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "reward",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "finalFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "bond",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "customLiveness",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                }
              ],
              "numberOfBytes": "320"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:OptimisticRequester": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:31",
        "inherit": [],
        "libraries": [],
        "methods": [
          "priceProposed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceDisputed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceSettled(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:79",
        "version": {
          "withMetadata": "cf756597139fe0b06ec9c79eb2aaad54a4972c7749c5fd7b93a9376ba97ba10a",
          "withoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41",
          "linkedWithoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address",
          "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint",
          "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces",
          "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData"
        ],
        "methods": [
          "(uint256,address,address)",
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracle",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:129"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)4988",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)4988": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracleProd": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:694",
        "version": {
          "withMetadata": "c743b2731200e4a4025814a17bfaa1693def2db34d9d65ba624e6661ac6e748b",
          "withoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7",
          "linkedWithoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle",
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address,address)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracleProd",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:695"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)4988",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)4988": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "src/Escrow.sol:Escrow": {
        "src": "src/Escrow.sol:17",
        "version": {
          "withMetadata": "e4deb9d0e195bb65e61ad3d87a29dfda6aad99dcf3a35722683dd50d8f618e9a",
          "withoutMetadata": "d46388d5f349ec8a8ce2142f7d82808476f96f382a612ea61d08ab15aa42ad45",
          "linkedWithoutMetadata": "d46388d5f349ec8a8ce2142f7d82808476f96f382a612ea61d08ab15aa42ad45"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize()",
          "escrow(string,address,uint256,address,uint256)",
          "submit(string,address)",
          "initiateDispute(string,address,address,uint256,string,address)",
          "hunterDisputeResponse(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "forceHunterPayout(string,address,address)",
          "payoutIfDispute(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address)",
          "payout(string,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "bountyAmounts",
              "offset": 0,
              "slot": "201",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:21"
            },
            {
              "label": "progress",
              "offset": 0,
              "slot": "202",
              "type": "t_mapping(t_bytes32,t_enum(Status)7411)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:22"
            },
            {
              "label": "expiration",
              "offset": 0,
              "slot": "203",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:23"
            },
            {
              "label": "payoutExpiration",
              "offset": 0,
              "slot": "204",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:24"
            },
            {
              "label": "oracleInterface",
              "offset": 0,
              "slot": "205",
              "type": "t_contract(SkinnyOptimisticOracleInterface)5642",
              "contract": "Escrow",
              "src": "src/Escrow.sol:26"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(SkinnyOptimisticOracleInterface)5642": {
              "label": "contract SkinnyOptimisticOracleInterface",
              "numberOfBytes": "20"
            },
            "t_enum(Status)7411": {
              "label": "enum Escrow.Status",
              "members": [
                "NoBounty",
                "Submitted",
                "DisputeInitiated",
                "DisputeRespondedTo",
                "Resolved"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_bytes32,t_enum(Status)7411)": {
              "label": "mapping(bytes32 => enum Escrow.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "dbc07738a731d65600e2b523e0850ec687c17da52d8d5f626d25bb0493ad007a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "1d554090575a199439b03e2c3a37c7f66b12683343e1d9158769cddd0e8f69f6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable": {
        "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "65b731d0b6a85c4016bd2af114840825372ed3cf7f29b22cb14c053a1020283d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "3f99f850f88dc9a07207f52e6c603fedc92a369bfd5bd6e04a688fa6ae0d815f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "b6ae44f0f909ee5a842f80c60eb14bfb14c83ccf80dfc01914f7065329389578",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:12",
        "version": {
          "withMetadata": "39e29451f03f9ba93fddf9a6c5f9a044f8f4a5714d77e2a2903f0fa5253f779a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:AddressWhitelist": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:11",
        "version": {
          "withMetadata": "cea2a82ec1fff540d8c2c24abbf39f02fc362cc91f93e119d2c20a6e07d6daef",
          "withoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a",
          "linkedWithoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface"
        ],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_enum(Status)2463)",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:13"
            },
            {
              "label": "whitelistIndices",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(Status)2463": {
              "label": "enum AddressWhitelist.Status",
              "members": [
                "None",
                "In",
                "Out"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_enum(Status)2463)": {
              "label": "mapping(address => enum AddressWhitelist.Status)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:12",
        "version": {
          "withMetadata": "f2040ffcf8eb5e624ef25c954943df7175c0f3a94943efffe29a069013393977",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:10",
        "version": {
          "withMetadata": "b192c10bf0f990245b4b065ee60616f4442baf83897fc4a5ba956f2dec602f68",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:9",
        "version": {
          "withMetadata": "dc1b320dc0b8a2bbd91355cedebd3c4063f645b18e3973062cae0a544504ef5a",
          "withoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e",
          "linkedWithoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lockable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_notEntered",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Testable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:Timer": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:7",
        "version": {
          "withMetadata": "6ad6b543234de7200ebbad5c2139ba690faf76b777a197e525e2084ee98f7bf9",
          "withoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311",
          "linkedWithoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Timer",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTime",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Timer",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OptimisticOracleConstraints": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:27",
        "version": {
          "withMetadata": "46b0ff6e490cee5c3c20fd5969bb194d75287982c958b17dd284a0f1910c734c",
          "withoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8",
          "linkedWithoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:7",
        "version": {
          "withMetadata": "5437451d4262bf6f5b1dac80dffa96cc6893ed91ff81a6a7ba89b25664cdbf12",
          "withoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a",
          "linkedWithoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:FinderInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "changeImplementationAddress(bytes32,address)",
          "getImplementationAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:IdentifierWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSupportedIdentifier(bytes32)",
          "removeSupportedIdentifier(bytes32)",
          "isIdentifierSupported(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:OracleAncillaryInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint256,bytes)",
          "hasPrice(bytes32,uint256,bytes)",
          "getPrice(bytes32,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:StoreInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "payOracleFees()",
          "payOracleFeesErc20(address,(uint256))",
          "computeRegularFee(uint256,uint256,(uint256))",
          "computeFinalFee(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:OptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "defaultLiveness()",
          "finder()",
          "getCurrentTime()",
          "requestPrice(bytes32,uint256,bytes,address,uint256)",
          "setBond(bytes32,uint256,bytes,uint256)",
          "setRefundOnDispute(bytes32,uint256,bytes)",
          "setCustomLiveness(bytes32,uint256,bytes,uint256)",
          "proposePriceFor(address,address,bytes32,uint256,bytes,int256)",
          "proposePrice(address,bytes32,uint256,bytes,int256)",
          "disputePriceFor(address,address,bytes32,uint256,bytes)",
          "disputePrice(address,bytes32,uint256,bytes)",
          "settleAndGetPrice(bytes32,uint256,bytes)",
          "settle(address,bytes32,uint256,bytes)",
          "getRequest(address,bytes32,uint256,bytes)",
          "getState(address,bytes32,uint256,bytes)",
          "hasPrice(address,bytes32,uint256,bytes)",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "requests",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(Request)5202_storage)",
              "contract": "OptimisticOracleInterface",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:90"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)1402": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Request)5202_storage)": {
              "label": "mapping(bytes32 => struct OptimisticOracleInterface.Request)",
              "numberOfBytes": "32"
            },
            "t_struct(Request)5202_storage": {
              "label": "struct OptimisticOracleInterface.Request",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "disputer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "currency",
                  "type": "t_contract(IERC20)1402",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "settled",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "refundOnDispute",
                  "type": "t_bool",
                  "offset": 21,
                  "slot": "2"
                },
                {
                  "label": "proposedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "resolvedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "expirationTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "reward",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "finalFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "bond",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "customLiveness",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                }
              ],
              "numberOfBytes": "320"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:OptimisticRequester": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:31",
        "inherit": [],
        "libraries": [],
        "methods": [
          "priceProposed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceDisputed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceSettled(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:79",
        "version": {
          "withMetadata": "64c2bb8b40e13651fc380f113748f0052f1a0c6bc93cd0386a67a877f0cd58a1",
          "withoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41",
          "linkedWithoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address",
          "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint",
          "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces",
          "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData"
        ],
        "methods": [
          "(uint256,address,address)",
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracle",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:129"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)4988",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)4988": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracleProd": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:694",
        "version": {
          "withMetadata": "232452da413b08c57d875fb006710aa33ae94a76da9b33dc0759809925998ead",
          "withoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7",
          "linkedWithoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle",
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address,address)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracleProd",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:695"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)4988",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)4988": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "src/Escrow.sol:Escrow": {
        "src": "src/Escrow.sol:17",
        "version": {
          "withMetadata": "b4b2313d11932276d6432a2cb5629138f297c9bfffc7791e7534380be8dc7278",
          "withoutMetadata": "d46388d5f349ec8a8ce2142f7d82808476f96f382a612ea61d08ab15aa42ad45",
          "linkedWithoutMetadata": "d46388d5f349ec8a8ce2142f7d82808476f96f382a612ea61d08ab15aa42ad45"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize()",
          "escrow(string,address,uint256,address,uint256)",
          "submit(string,address)",
          "initiateDispute(string,address,address,uint256,string,address)",
          "hunterDisputeResponse(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "forceHunterPayout(string,address,address)",
          "payoutIfDispute(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address)",
          "payout(string,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "bountyAmounts",
              "offset": 0,
              "slot": "201",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:21"
            },
            {
              "label": "progress",
              "offset": 0,
              "slot": "202",
              "type": "t_mapping(t_bytes32,t_enum(Status)7411)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:22"
            },
            {
              "label": "expiration",
              "offset": 0,
              "slot": "203",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:23"
            },
            {
              "label": "payoutExpiration",
              "offset": 0,
              "slot": "204",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:24"
            },
            {
              "label": "oracleInterface",
              "offset": 0,
              "slot": "205",
              "type": "t_contract(SkinnyOptimisticOracleInterface)5642",
              "contract": "Escrow",
              "src": "src/Escrow.sol:26"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(SkinnyOptimisticOracleInterface)5642": {
              "label": "contract SkinnyOptimisticOracleInterface",
              "numberOfBytes": "20"
            },
            "t_enum(Status)7411": {
              "label": "enum Escrow.Status",
              "members": [
                "NoBounty",
                "Submitted",
                "DisputeInitiated",
                "DisputeRespondedTo",
                "Resolved"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_bytes32,t_enum(Status)7411)": {
              "label": "mapping(bytes32 => enum Escrow.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "2a2f0ae39b730fd25e27177c69aa1f8c8fb95cc7fa2ca8bf2e80a8ccd1dea493",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "7be0c62af66881474b0a9c0c4a366362c9f713990a0e924d9cfcceae434a8f3a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable": {
        "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "2f65cb32d2ce2fc20154f9bc3c3a1bf43a2bf5f7a52b949d0a42484c5d6757ba",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "7234b595de18c40a8e9808024909340cd15c3bf854e8826971a6a026b4fa44de",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "b96087cae44755915a90ddb87d006da0f6a30c8be388b90a90a054a2cf3bfe0a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:12",
        "version": {
          "withMetadata": "12574975ea01c245c157c88a4689ec365df2489607dcabf38726daf5031fad2d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:AddressWhitelist": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:11",
        "version": {
          "withMetadata": "bdc9b35ab3ffc90b76eaa622109876d8b5d699ccdc30c3a6d22ba4ab3363c567",
          "withoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a",
          "linkedWithoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface"
        ],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_enum(Status)2463)",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:13"
            },
            {
              "label": "whitelistIndices",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(Status)2463": {
              "label": "enum AddressWhitelist.Status",
              "members": [
                "None",
                "In",
                "Out"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_enum(Status)2463)": {
              "label": "mapping(address => enum AddressWhitelist.Status)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:12",
        "version": {
          "withMetadata": "db3d5bd10e69e57b2a7e99196f3dbd47daff49047282e1e54a4862e70c9d6fc2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:10",
        "version": {
          "withMetadata": "d2d2a4dfc873e01707789d92310d991be44b5caaf2111aa8c43005f66dee8ea7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:9",
        "version": {
          "withMetadata": "4e04f4d800e656d24610bd3cd2e805bebceb079cc1a4be080c0c88a097e426dd",
          "withoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e",
          "linkedWithoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lockable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_notEntered",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Testable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:Timer": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:7",
        "version": {
          "withMetadata": "dc3b6706d385a1cbaee3329db0ad6d29035dac4df5d08e0adab0f30eba213dfd",
          "withoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311",
          "linkedWithoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Timer",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTime",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Timer",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OptimisticOracleConstraints": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:27",
        "version": {
          "withMetadata": "abb3b0241e67eca1302d6220d054a519810443e14ad510a27eb6406f964a5a40",
          "withoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8",
          "linkedWithoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:7",
        "version": {
          "withMetadata": "ea7d5b1f4be6d1cec1ea67363aa80ee458299a656113c58caec57b56372e7e60",
          "withoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a",
          "linkedWithoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:FinderInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "changeImplementationAddress(bytes32,address)",
          "getImplementationAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:IdentifierWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSupportedIdentifier(bytes32)",
          "removeSupportedIdentifier(bytes32)",
          "isIdentifierSupported(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:OracleAncillaryInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint256,bytes)",
          "hasPrice(bytes32,uint256,bytes)",
          "getPrice(bytes32,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:StoreInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "payOracleFees()",
          "payOracleFeesErc20(address,(uint256))",
          "computeRegularFee(uint256,uint256,(uint256))",
          "computeFinalFee(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:OptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "defaultLiveness()",
          "finder()",
          "getCurrentTime()",
          "requestPrice(bytes32,uint256,bytes,address,uint256)",
          "setBond(bytes32,uint256,bytes,uint256)",
          "setRefundOnDispute(bytes32,uint256,bytes)",
          "setCustomLiveness(bytes32,uint256,bytes,uint256)",
          "proposePriceFor(address,address,bytes32,uint256,bytes,int256)",
          "proposePrice(address,bytes32,uint256,bytes,int256)",
          "disputePriceFor(address,address,bytes32,uint256,bytes)",
          "disputePrice(address,bytes32,uint256,bytes)",
          "settleAndGetPrice(bytes32,uint256,bytes)",
          "settle(address,bytes32,uint256,bytes)",
          "getRequest(address,bytes32,uint256,bytes)",
          "getState(address,bytes32,uint256,bytes)",
          "hasPrice(address,bytes32,uint256,bytes)",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "requests",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(Request)5202_storage)",
              "contract": "OptimisticOracleInterface",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:90"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)1402": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Request)5202_storage)": {
              "label": "mapping(bytes32 => struct OptimisticOracleInterface.Request)",
              "numberOfBytes": "32"
            },
            "t_struct(Request)5202_storage": {
              "label": "struct OptimisticOracleInterface.Request",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "disputer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "currency",
                  "type": "t_contract(IERC20)1402",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "settled",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "refundOnDispute",
                  "type": "t_bool",
                  "offset": 21,
                  "slot": "2"
                },
                {
                  "label": "proposedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "resolvedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "expirationTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "reward",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "finalFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "bond",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "customLiveness",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                }
              ],
              "numberOfBytes": "320"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:OptimisticRequester": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:31",
        "inherit": [],
        "libraries": [],
        "methods": [
          "priceProposed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceDisputed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceSettled(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:79",
        "version": {
          "withMetadata": "91d92f2d20c1c73e17bb99b4f380f85dceddeb43279ffc9136cf499e8f49eda4",
          "withoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41",
          "linkedWithoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address",
          "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint",
          "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces",
          "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData"
        ],
        "methods": [
          "(uint256,address,address)",
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracle",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:129"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)4988",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)4988": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracleProd": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:694",
        "version": {
          "withMetadata": "ba26ad06e51843dded2700e558c123215a771b2e62d409c1cb35b581278117ee",
          "withoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7",
          "linkedWithoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle",
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address,address)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracleProd",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:695"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)4988",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)4988": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "src/Escrow.sol:Escrow": {
        "src": "src/Escrow.sol:17",
        "version": {
          "withMetadata": "4ed09b0642fecfb97ff94b29b0d6de583d94b99103f631c827359eddd694b55c",
          "withoutMetadata": "d46388d5f349ec8a8ce2142f7d82808476f96f382a612ea61d08ab15aa42ad45",
          "linkedWithoutMetadata": "d46388d5f349ec8a8ce2142f7d82808476f96f382a612ea61d08ab15aa42ad45"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize()",
          "escrow(string,address,uint256,address,uint256)",
          "submit(string,address)",
          "initiateDispute(string,address,address,uint256,string,address)",
          "hunterDisputeResponse(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "forceHunterPayout(string,address,address)",
          "payoutIfDispute(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address)",
          "payout(string,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "bountyAmounts",
              "offset": 0,
              "slot": "201",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:21"
            },
            {
              "label": "progress",
              "offset": 0,
              "slot": "202",
              "type": "t_mapping(t_bytes32,t_enum(Status)7411)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:22"
            },
            {
              "label": "expiration",
              "offset": 0,
              "slot": "203",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:23"
            },
            {
              "label": "payoutExpiration",
              "offset": 0,
              "slot": "204",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:24"
            },
            {
              "label": "oracleInterface",
              "offset": 0,
              "slot": "205",
              "type": "t_contract(SkinnyOptimisticOracleInterface)5642",
              "contract": "Escrow",
              "src": "src/Escrow.sol:26"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(SkinnyOptimisticOracleInterface)5642": {
              "label": "contract SkinnyOptimisticOracleInterface",
              "numberOfBytes": "20"
            },
            "t_enum(Status)7411": {
              "label": "enum Escrow.Status",
              "members": [
                "NoBounty",
                "Submitted",
                "DisputeInitiated",
                "DisputeRespondedTo",
                "Resolved"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_bytes32,t_enum(Status)7411)": {
              "label": "mapping(bytes32 => enum Escrow.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "0c6179f5a05c2215a7500f5b1f78e4d014afa6725d62f06e248d002fde8b73e0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "a941aecd3e34ee1edddb6fc97cad647d778cb5ef3397c7d2e48813e29756913c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable": {
        "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "683a6e14e1a8456ab743492e873b850b963e1694bb74cd83a51b77423599d181",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "39fbf40294bad18f747275730cfe72f4b4363220387c5ed68ec290b9535f94e2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "f213ee7012d33a66e08270ebee9e32edd9609ec65d19154312bf585e424955d1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:12",
        "version": {
          "withMetadata": "d375bd8289e8c4fecb53fdb5fd93f4d84546c1b507dc177c2e7972ee80d390f6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:AddressWhitelist": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:11",
        "version": {
          "withMetadata": "701cfc70169bde23cd725299aba49065712e7517de9b6a33caed22fc41de20d8",
          "withoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a",
          "linkedWithoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface"
        ],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_enum(Status)2463)",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:13"
            },
            {
              "label": "whitelistIndices",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(Status)2463": {
              "label": "enum AddressWhitelist.Status",
              "members": [
                "None",
                "In",
                "Out"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_enum(Status)2463)": {
              "label": "mapping(address => enum AddressWhitelist.Status)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:12",
        "version": {
          "withMetadata": "af32deb38dba84f8531ec79602602771f04c285e7b1ebbb09f79be390f8a50a8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:10",
        "version": {
          "withMetadata": "dff3316a0cd17e4d6d857b604298d80fde68f04977b30a3ab3f50bacf2bc534a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:9",
        "version": {
          "withMetadata": "0f4b4f71f68bcf1539f717910974c462deaff595bc2626d8de1c55bcf1a6e3e1",
          "withoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e",
          "linkedWithoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lockable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_notEntered",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Testable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:Timer": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:7",
        "version": {
          "withMetadata": "f3d355b6ebe51e0c064b197afe7f3615d9b69a2e5d000c6a82d6d136c92c59c6",
          "withoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311",
          "linkedWithoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Timer",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTime",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Timer",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OptimisticOracleConstraints": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:27",
        "version": {
          "withMetadata": "1a4108b2fdc700cf8063e453d9f939c83f40d948be26795c93464da2045d3578",
          "withoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8",
          "linkedWithoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:7",
        "version": {
          "withMetadata": "d647543127be04992226843c316b2f8b3ed23f49806cd9aae23fcae80c54d6a8",
          "withoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a",
          "linkedWithoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:FinderInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "changeImplementationAddress(bytes32,address)",
          "getImplementationAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:IdentifierWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSupportedIdentifier(bytes32)",
          "removeSupportedIdentifier(bytes32)",
          "isIdentifierSupported(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:OracleAncillaryInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint256,bytes)",
          "hasPrice(bytes32,uint256,bytes)",
          "getPrice(bytes32,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:StoreInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "payOracleFees()",
          "payOracleFeesErc20(address,(uint256))",
          "computeRegularFee(uint256,uint256,(uint256))",
          "computeFinalFee(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:OptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "defaultLiveness()",
          "finder()",
          "getCurrentTime()",
          "requestPrice(bytes32,uint256,bytes,address,uint256)",
          "setBond(bytes32,uint256,bytes,uint256)",
          "setRefundOnDispute(bytes32,uint256,bytes)",
          "setCustomLiveness(bytes32,uint256,bytes,uint256)",
          "proposePriceFor(address,address,bytes32,uint256,bytes,int256)",
          "proposePrice(address,bytes32,uint256,bytes,int256)",
          "disputePriceFor(address,address,bytes32,uint256,bytes)",
          "disputePrice(address,bytes32,uint256,bytes)",
          "settleAndGetPrice(bytes32,uint256,bytes)",
          "settle(address,bytes32,uint256,bytes)",
          "getRequest(address,bytes32,uint256,bytes)",
          "getState(address,bytes32,uint256,bytes)",
          "hasPrice(address,bytes32,uint256,bytes)",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "requests",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(Request)5202_storage)",
              "contract": "OptimisticOracleInterface",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:90"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)1402": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Request)5202_storage)": {
              "label": "mapping(bytes32 => struct OptimisticOracleInterface.Request)",
              "numberOfBytes": "32"
            },
            "t_struct(Request)5202_storage": {
              "label": "struct OptimisticOracleInterface.Request",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "disputer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "currency",
                  "type": "t_contract(IERC20)1402",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "settled",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "refundOnDispute",
                  "type": "t_bool",
                  "offset": 21,
                  "slot": "2"
                },
                {
                  "label": "proposedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "resolvedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "expirationTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "reward",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "finalFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "bond",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "customLiveness",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                }
              ],
              "numberOfBytes": "320"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:OptimisticRequester": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:31",
        "inherit": [],
        "libraries": [],
        "methods": [
          "priceProposed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceDisputed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceSettled(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:79",
        "version": {
          "withMetadata": "a9286099dfe3e972eac49eb9fdf4ad3831ce49a4a4803ced5eb7f106c519f671",
          "withoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41",
          "linkedWithoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address",
          "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint",
          "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces",
          "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData"
        ],
        "methods": [
          "(uint256,address,address)",
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracle",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:129"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)4988",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)4988": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracleProd": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:694",
        "version": {
          "withMetadata": "b0d9aa6ca550b219f7812a9e279d2723ee39b6385eeee5ff92e43a7ecaf4346d",
          "withoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7",
          "linkedWithoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle",
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address,address)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracleProd",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:695"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)4988",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)4988": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "src/Escrow.sol:Escrow": {
        "src": "src/Escrow.sol:17",
        "version": {
          "withMetadata": "c10097779ff27f7590aa151d3ddfa75ad561ac1206de925edeabacf0c827aaff",
          "withoutMetadata": "d46388d5f349ec8a8ce2142f7d82808476f96f382a612ea61d08ab15aa42ad45",
          "linkedWithoutMetadata": "d46388d5f349ec8a8ce2142f7d82808476f96f382a612ea61d08ab15aa42ad45"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize()",
          "escrow(string,address,uint256,address,uint256)",
          "submit(string,address)",
          "initiateDispute(string,address,address,uint256,string,address)",
          "hunterDisputeResponse(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "forceHunterPayout(string,address,address)",
          "payoutIfDispute(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address)",
          "payout(string,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "bountyAmounts",
              "offset": 0,
              "slot": "201",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:21"
            },
            {
              "label": "progress",
              "offset": 0,
              "slot": "202",
              "type": "t_mapping(t_bytes32,t_enum(Status)7411)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:22"
            },
            {
              "label": "expiration",
              "offset": 0,
              "slot": "203",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:23"
            },
            {
              "label": "payoutExpiration",
              "offset": 0,
              "slot": "204",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:24"
            },
            {
              "label": "oracleInterface",
              "offset": 0,
              "slot": "205",
              "type": "t_contract(SkinnyOptimisticOracleInterface)5642",
              "contract": "Escrow",
              "src": "src/Escrow.sol:26"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(SkinnyOptimisticOracleInterface)5642": {
              "label": "contract SkinnyOptimisticOracleInterface",
              "numberOfBytes": "20"
            },
            "t_enum(Status)7411": {
              "label": "enum Escrow.Status",
              "members": [
                "NoBounty",
                "Submitted",
                "DisputeInitiated",
                "DisputeRespondedTo",
                "Resolved"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_bytes32,t_enum(Status)7411)": {
              "label": "mapping(bytes32 => enum Escrow.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "30c03e0efaf000fc82ee40ea04bcd452f388c09010b856d09c6b6a4222c9290f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "9f5cdb7506fe1c2d897509e5e5e316a5a42ff09db5cfb57ab0daca7713262af3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable": {
        "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "9d0e4b10579ad22d5878c9e985ab91b656116e88c113908dfb63ae47d7cb415b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "cf758aa2f01a68244c2f1a268d0ba52513b4b990217f15d28b524a6d97d331c8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "8f00800d0e41ad971ab1954c39397d076d181f810f71ef8432cda5e872703246",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:12",
        "version": {
          "withMetadata": "60bb886c5854776f5ada71dd9496b2de3ff2b0f41c31bdb88562766f68e4ac9c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:AddressWhitelist": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:11",
        "version": {
          "withMetadata": "e1beb728aabc1a70b31e3b31019d3cbf9bfb9c23a9226b3423747ed346a215bd",
          "withoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a",
          "linkedWithoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface"
        ],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_enum(Status)2463)",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:13"
            },
            {
              "label": "whitelistIndices",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(Status)2463": {
              "label": "enum AddressWhitelist.Status",
              "members": [
                "None",
                "In",
                "Out"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_enum(Status)2463)": {
              "label": "mapping(address => enum AddressWhitelist.Status)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:12",
        "version": {
          "withMetadata": "f0e32c7185e10df511a4131cb04b5aa87dd43f37a77332dcc4dfbc50a6199954",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:10",
        "version": {
          "withMetadata": "f4cad66171ce5ccf1d59a038d866742942c55d35d1fd5a034112809ddd35f72f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:9",
        "version": {
          "withMetadata": "6595fb99a45b71af28e6bcd49d0896e449ca6e75921adf74c61b56f654f041c2",
          "withoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e",
          "linkedWithoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lockable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_notEntered",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Testable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:Timer": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:7",
        "version": {
          "withMetadata": "16bd4ab8c3d8dee92f42da5380b579823e7bfb164e1a84ceaad5ac40313c52cd",
          "withoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311",
          "linkedWithoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Timer",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTime",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Timer",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OptimisticOracleConstraints": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:27",
        "version": {
          "withMetadata": "e78c2f24d757b84063e0e0997a0bdaaca31213ffcf7a9ac4988ce170efa1495e",
          "withoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8",
          "linkedWithoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:7",
        "version": {
          "withMetadata": "1fecb97ab9fa5881791e54afd24839d9d6b5443465d64584b6730969728ced2f",
          "withoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a",
          "linkedWithoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:FinderInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "changeImplementationAddress(bytes32,address)",
          "getImplementationAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:IdentifierWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSupportedIdentifier(bytes32)",
          "removeSupportedIdentifier(bytes32)",
          "isIdentifierSupported(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:OracleAncillaryInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint256,bytes)",
          "hasPrice(bytes32,uint256,bytes)",
          "getPrice(bytes32,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:StoreInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "payOracleFees()",
          "payOracleFeesErc20(address,(uint256))",
          "computeRegularFee(uint256,uint256,(uint256))",
          "computeFinalFee(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:OptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "defaultLiveness()",
          "finder()",
          "getCurrentTime()",
          "requestPrice(bytes32,uint256,bytes,address,uint256)",
          "setBond(bytes32,uint256,bytes,uint256)",
          "setRefundOnDispute(bytes32,uint256,bytes)",
          "setCustomLiveness(bytes32,uint256,bytes,uint256)",
          "proposePriceFor(address,address,bytes32,uint256,bytes,int256)",
          "proposePrice(address,bytes32,uint256,bytes,int256)",
          "disputePriceFor(address,address,bytes32,uint256,bytes)",
          "disputePrice(address,bytes32,uint256,bytes)",
          "settleAndGetPrice(bytes32,uint256,bytes)",
          "settle(address,bytes32,uint256,bytes)",
          "getRequest(address,bytes32,uint256,bytes)",
          "getState(address,bytes32,uint256,bytes)",
          "hasPrice(address,bytes32,uint256,bytes)",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "requests",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(Request)5202_storage)",
              "contract": "OptimisticOracleInterface",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:90"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)1402": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Request)5202_storage)": {
              "label": "mapping(bytes32 => struct OptimisticOracleInterface.Request)",
              "numberOfBytes": "32"
            },
            "t_struct(Request)5202_storage": {
              "label": "struct OptimisticOracleInterface.Request",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "disputer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "currency",
                  "type": "t_contract(IERC20)1402",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "settled",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "refundOnDispute",
                  "type": "t_bool",
                  "offset": 21,
                  "slot": "2"
                },
                {
                  "label": "proposedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "resolvedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "expirationTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "reward",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "finalFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "bond",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "customLiveness",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                }
              ],
              "numberOfBytes": "320"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:OptimisticRequester": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:31",
        "inherit": [],
        "libraries": [],
        "methods": [
          "priceProposed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceDisputed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceSettled(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:79",
        "version": {
          "withMetadata": "09661d0cf02050c9fe8094d5c0b8d51deb0ed83c23ca0d3a86bd11556fbc6c17",
          "withoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41",
          "linkedWithoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address",
          "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint",
          "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces",
          "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData"
        ],
        "methods": [
          "(uint256,address,address)",
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracle",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:129"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)4988",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)4988": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracleProd": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:694",
        "version": {
          "withMetadata": "5b7c4852028259a7d11474cd3077e07c8efbe7fdf68610cebdcff4777eeba373",
          "withoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7",
          "linkedWithoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle",
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address,address)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracleProd",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:695"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)4988",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)4988": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "src/Escrow.sol:Escrow": {
        "src": "src/Escrow.sol:17",
        "version": {
          "withMetadata": "92226d8f50cc2ae30af3958aa612c4f854e6f36ebee96ec90a6353184623e10c",
          "withoutMetadata": "d46388d5f349ec8a8ce2142f7d82808476f96f382a612ea61d08ab15aa42ad45",
          "linkedWithoutMetadata": "d46388d5f349ec8a8ce2142f7d82808476f96f382a612ea61d08ab15aa42ad45"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize()",
          "escrow(string,address,uint256,address,uint256)",
          "submit(string,address)",
          "initiateDispute(string,address,address,uint256,string,address)",
          "hunterDisputeResponse(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "forceHunterPayout(string,address,address)",
          "payoutIfDispute(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address)",
          "payout(string,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "bountyAmounts",
              "offset": 0,
              "slot": "201",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:21"
            },
            {
              "label": "progress",
              "offset": 0,
              "slot": "202",
              "type": "t_mapping(t_bytes32,t_enum(Status)7411)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:22"
            },
            {
              "label": "expiration",
              "offset": 0,
              "slot": "203",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:23"
            },
            {
              "label": "payoutExpiration",
              "offset": 0,
              "slot": "204",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:24"
            },
            {
              "label": "oracleInterface",
              "offset": 0,
              "slot": "205",
              "type": "t_contract(SkinnyOptimisticOracleInterface)5642",
              "contract": "Escrow",
              "src": "src/Escrow.sol:26"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(SkinnyOptimisticOracleInterface)5642": {
              "label": "contract SkinnyOptimisticOracleInterface",
              "numberOfBytes": "20"
            },
            "t_enum(Status)7411": {
              "label": "enum Escrow.Status",
              "members": [
                "NoBounty",
                "Submitted",
                "DisputeInitiated",
                "DisputeRespondedTo",
                "Resolved"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_bytes32,t_enum(Status)7411)": {
              "label": "mapping(bytes32 => enum Escrow.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "b808cf4235a6d3ab4ab2db01383df43b081ddcb940189a295299f1b0466d9707",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "f456852140b803f1d74562656c77414c09702ea0a83bf9a348fda0228cb58cf9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable": {
        "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "e95a38ab89dad7c05cd77a9ccb2f5569e44991dde7ce7471dd80d1fe313c917e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "0b88fe00bdb3eb181b0a2431b73b1eff8a6b4530bbf9867aceef71aba69841aa",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "815967e4aa0a278d9817ae72a2b07c2e3d1af2e731a7a264200ab5b69e9a7184",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:12",
        "version": {
          "withMetadata": "4db3d82856508fca43c7d8ad3c9b24b28608586a86fd0f6310428f97519a6dc2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:AddressWhitelist": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:11",
        "version": {
          "withMetadata": "e654d59d3849669d92c440db7aefa13c232272a44e4e0ab59c77ea141f3139f3",
          "withoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a",
          "linkedWithoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface"
        ],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_enum(Status)2463)",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:13"
            },
            {
              "label": "whitelistIndices",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(Status)2463": {
              "label": "enum AddressWhitelist.Status",
              "members": [
                "None",
                "In",
                "Out"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_enum(Status)2463)": {
              "label": "mapping(address => enum AddressWhitelist.Status)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:12",
        "version": {
          "withMetadata": "0643fbf304e613f8b0a0a37753b5115cf633a2d9092db50311b545492cb040d7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:10",
        "version": {
          "withMetadata": "3ee3d1f62116b1f2edc36ad82128c4177492835578a0b064223befe1e5cc1317",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:9",
        "version": {
          "withMetadata": "43a3e3fd04810ff07dcfebc8d38f5e4fde92c660d7e2a2fb7226cc8affb9a69a",
          "withoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e",
          "linkedWithoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lockable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_notEntered",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Testable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:Timer": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:7",
        "version": {
          "withMetadata": "8b0d183ec30635e2e4211b8858605fc0b2e95963d451d69a63814d8964289e64",
          "withoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311",
          "linkedWithoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Timer",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTime",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Timer",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OptimisticOracleConstraints": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:27",
        "version": {
          "withMetadata": "cfcc5bcabb1ce29339abfcb3c9d06eb078fc29bd7a0ff465835a7e3e35fbaeb4",
          "withoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8",
          "linkedWithoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:7",
        "version": {
          "withMetadata": "9e91381187d92a83aa84b367719883865a874631e11f63c89d4fbfa733107e38",
          "withoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a",
          "linkedWithoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:FinderInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "changeImplementationAddress(bytes32,address)",
          "getImplementationAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:IdentifierWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSupportedIdentifier(bytes32)",
          "removeSupportedIdentifier(bytes32)",
          "isIdentifierSupported(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:OracleAncillaryInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint256,bytes)",
          "hasPrice(bytes32,uint256,bytes)",
          "getPrice(bytes32,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:StoreInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "payOracleFees()",
          "payOracleFeesErc20(address,(uint256))",
          "computeRegularFee(uint256,uint256,(uint256))",
          "computeFinalFee(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:OptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "defaultLiveness()",
          "finder()",
          "getCurrentTime()",
          "requestPrice(bytes32,uint256,bytes,address,uint256)",
          "setBond(bytes32,uint256,bytes,uint256)",
          "setRefundOnDispute(bytes32,uint256,bytes)",
          "setCustomLiveness(bytes32,uint256,bytes,uint256)",
          "proposePriceFor(address,address,bytes32,uint256,bytes,int256)",
          "proposePrice(address,bytes32,uint256,bytes,int256)",
          "disputePriceFor(address,address,bytes32,uint256,bytes)",
          "disputePrice(address,bytes32,uint256,bytes)",
          "settleAndGetPrice(bytes32,uint256,bytes)",
          "settle(address,bytes32,uint256,bytes)",
          "getRequest(address,bytes32,uint256,bytes)",
          "getState(address,bytes32,uint256,bytes)",
          "hasPrice(address,bytes32,uint256,bytes)",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "requests",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(Request)5202_storage)",
              "contract": "OptimisticOracleInterface",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:90"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)1402": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Request)5202_storage)": {
              "label": "mapping(bytes32 => struct OptimisticOracleInterface.Request)",
              "numberOfBytes": "32"
            },
            "t_struct(Request)5202_storage": {
              "label": "struct OptimisticOracleInterface.Request",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "disputer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "currency",
                  "type": "t_contract(IERC20)1402",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "settled",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "refundOnDispute",
                  "type": "t_bool",
                  "offset": 21,
                  "slot": "2"
                },
                {
                  "label": "proposedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "resolvedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "expirationTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "reward",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "finalFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "bond",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "customLiveness",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                }
              ],
              "numberOfBytes": "320"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:OptimisticRequester": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:31",
        "inherit": [],
        "libraries": [],
        "methods": [
          "priceProposed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceDisputed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceSettled(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:79",
        "version": {
          "withMetadata": "cec38e7cbaf2bd250ac0c97f277e28559af534d4d41572f8dd0b6dd3a492a2d4",
          "withoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41",
          "linkedWithoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address",
          "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint",
          "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces",
          "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData"
        ],
        "methods": [
          "(uint256,address,address)",
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracle",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:129"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)4988",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)4988": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracleProd": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:694",
        "version": {
          "withMetadata": "e68b78ba24a815c48f2a7174fee2b43a8b3123c20c56e830d28624e750647a5a",
          "withoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7",
          "linkedWithoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle",
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address,address)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracleProd",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:695"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)4988",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)4988": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "src/Escrow.sol:Escrow": {
        "src": "src/Escrow.sol:17",
        "version": {
          "withMetadata": "0675db2d044d7cee9628c40fbc8047447c88edcf6c9094edbe84816a2979921c",
          "withoutMetadata": "d46388d5f349ec8a8ce2142f7d82808476f96f382a612ea61d08ab15aa42ad45",
          "linkedWithoutMetadata": "d46388d5f349ec8a8ce2142f7d82808476f96f382a612ea61d08ab15aa42ad45"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize()",
          "escrow(string,address,uint256,address,uint256)",
          "submit(string,address)",
          "initiateDispute(string,address,address,uint256,string,address)",
          "hunterDisputeResponse(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "forceHunterPayout(string,address,address)",
          "payoutIfDispute(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address)",
          "payout(string,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "bountyAmounts",
              "offset": 0,
              "slot": "201",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:21"
            },
            {
              "label": "progress",
              "offset": 0,
              "slot": "202",
              "type": "t_mapping(t_bytes32,t_enum(Status)7411)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:22"
            },
            {
              "label": "expiration",
              "offset": 0,
              "slot": "203",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:23"
            },
            {
              "label": "payoutExpiration",
              "offset": 0,
              "slot": "204",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:24"
            },
            {
              "label": "oracleInterface",
              "offset": 0,
              "slot": "205",
              "type": "t_contract(SkinnyOptimisticOracleInterface)5642",
              "contract": "Escrow",
              "src": "src/Escrow.sol:26"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(SkinnyOptimisticOracleInterface)5642": {
              "label": "contract SkinnyOptimisticOracleInterface",
              "numberOfBytes": "20"
            },
            "t_enum(Status)7411": {
              "label": "enum Escrow.Status",
              "members": [
                "NoBounty",
                "Submitted",
                "DisputeInitiated",
                "DisputeRespondedTo",
                "Resolved"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_bytes32,t_enum(Status)7411)": {
              "label": "mapping(bytes32 => enum Escrow.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "3e693c1272caada3c9103ee27cdd1b4b35a77f6d4994e4b396cd08fb8d36e192",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "513741a0c4df3ac3bad85563192dfe4a3c8c61cb3fa283ce4fda116f4d49b4c2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable": {
        "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "4f132fcf2c88364114a5374409cff333e427ab294a60640eb04490ca20d8e7d1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "e8c54c8858d61444b4c9d36aa9b1b93f1acb28fcf36fc86b21121ec6114958bd",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "5575a808c9d58a04eaaa83cad092c287c3fc27f31798e668df3ab368042db45d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:12",
        "version": {
          "withMetadata": "ebcf5bd373c0f188b060af197ced4a499afc66ea6bd139cc88a0453405dbb9fb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:AddressWhitelist": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:11",
        "version": {
          "withMetadata": "551a93f00fe6685c9245d1ffb9ab6662cde36b79e782925e1901dca0d2e1cb63",
          "withoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a",
          "linkedWithoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface"
        ],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_enum(Status)2463)",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:13"
            },
            {
              "label": "whitelistIndices",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(Status)2463": {
              "label": "enum AddressWhitelist.Status",
              "members": [
                "None",
                "In",
                "Out"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_enum(Status)2463)": {
              "label": "mapping(address => enum AddressWhitelist.Status)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:12",
        "version": {
          "withMetadata": "ca06851c7f582db0a7f732e937ae954debf84679fd1f7b92d0c0434d28c3cca7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:10",
        "version": {
          "withMetadata": "85a90f054b13570b4dcf30fe91288786493f2887859c0002d7ec5f0815e83562",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:9",
        "version": {
          "withMetadata": "4145d404ddbf3c5b2d5483fb9a9d560367824e8966d9f800a95eb49514fc2dc5",
          "withoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e",
          "linkedWithoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lockable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_notEntered",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Testable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:Timer": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:7",
        "version": {
          "withMetadata": "85041940e0e96ca7af93f5b7f8b0d1091dd5bf0bd0dee608014c1fd13770bfeb",
          "withoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311",
          "linkedWithoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Timer",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTime",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Timer",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OptimisticOracleConstraints": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:27",
        "version": {
          "withMetadata": "b99484552d1c919a327a34b83d1038f321c300fc92a2191d77ab6dd9f87d328a",
          "withoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8",
          "linkedWithoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:7",
        "version": {
          "withMetadata": "ebc94cdc78a27e5459cfe202cf54b293a7de1d9c83f9367529b4a10c04a7ed1c",
          "withoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a",
          "linkedWithoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:FinderInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "changeImplementationAddress(bytes32,address)",
          "getImplementationAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:IdentifierWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSupportedIdentifier(bytes32)",
          "removeSupportedIdentifier(bytes32)",
          "isIdentifierSupported(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:OracleAncillaryInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint256,bytes)",
          "hasPrice(bytes32,uint256,bytes)",
          "getPrice(bytes32,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:StoreInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "payOracleFees()",
          "payOracleFeesErc20(address,(uint256))",
          "computeRegularFee(uint256,uint256,(uint256))",
          "computeFinalFee(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:OptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "defaultLiveness()",
          "finder()",
          "getCurrentTime()",
          "requestPrice(bytes32,uint256,bytes,address,uint256)",
          "setBond(bytes32,uint256,bytes,uint256)",
          "setRefundOnDispute(bytes32,uint256,bytes)",
          "setCustomLiveness(bytes32,uint256,bytes,uint256)",
          "proposePriceFor(address,address,bytes32,uint256,bytes,int256)",
          "proposePrice(address,bytes32,uint256,bytes,int256)",
          "disputePriceFor(address,address,bytes32,uint256,bytes)",
          "disputePrice(address,bytes32,uint256,bytes)",
          "settleAndGetPrice(bytes32,uint256,bytes)",
          "settle(address,bytes32,uint256,bytes)",
          "getRequest(address,bytes32,uint256,bytes)",
          "getState(address,bytes32,uint256,bytes)",
          "hasPrice(address,bytes32,uint256,bytes)",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "requests",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(Request)5202_storage)",
              "contract": "OptimisticOracleInterface",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:90"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)1402": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Request)5202_storage)": {
              "label": "mapping(bytes32 => struct OptimisticOracleInterface.Request)",
              "numberOfBytes": "32"
            },
            "t_struct(Request)5202_storage": {
              "label": "struct OptimisticOracleInterface.Request",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "disputer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "currency",
                  "type": "t_contract(IERC20)1402",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "settled",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "refundOnDispute",
                  "type": "t_bool",
                  "offset": 21,
                  "slot": "2"
                },
                {
                  "label": "proposedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "resolvedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "expirationTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "reward",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "finalFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "bond",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "customLiveness",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                }
              ],
              "numberOfBytes": "320"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:OptimisticRequester": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:31",
        "inherit": [],
        "libraries": [],
        "methods": [
          "priceProposed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceDisputed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceSettled(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:79",
        "version": {
          "withMetadata": "0c70b70055996d84202e0260bf1dcfa4af839e4d56e49b0e2fbbd73f08388f88",
          "withoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41",
          "linkedWithoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address",
          "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint",
          "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces",
          "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData"
        ],
        "methods": [
          "(uint256,address,address)",
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracle",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:129"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)4988",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)4988": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracleProd": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:694",
        "version": {
          "withMetadata": "d3a7a023e857ceedb906abb580afecd6acef42df662ddbecbcc32a2c6b1eea85",
          "withoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7",
          "linkedWithoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle",
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address,address)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracleProd",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:695"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)4988",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)4988": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "src/Escrow.sol:Escrow": {
        "src": "src/Escrow.sol:16",
        "version": {
          "withMetadata": "52df8f14af57075d37a55b06b76b761aa621d9b4fb4fb23cb680fdafdf66615d",
          "withoutMetadata": "d46388d5f349ec8a8ce2142f7d82808476f96f382a612ea61d08ab15aa42ad45",
          "linkedWithoutMetadata": "d46388d5f349ec8a8ce2142f7d82808476f96f382a612ea61d08ab15aa42ad45"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize()",
          "escrow(string,address,uint256,address,uint256)",
          "submit(string,address)",
          "initiateDispute(string,address,address,uint256,string,address)",
          "hunterDisputeResponse(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "forceHunterPayout(string,address,address)",
          "payoutIfDispute(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address)",
          "payout(string,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "bountyAmounts",
              "offset": 0,
              "slot": "201",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:20"
            },
            {
              "label": "progress",
              "offset": 0,
              "slot": "202",
              "type": "t_mapping(t_bytes32,t_enum(Status)7411)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:21"
            },
            {
              "label": "expiration",
              "offset": 0,
              "slot": "203",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:22"
            },
            {
              "label": "payoutExpiration",
              "offset": 0,
              "slot": "204",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:23"
            },
            {
              "label": "oracleInterface",
              "offset": 0,
              "slot": "205",
              "type": "t_contract(SkinnyOptimisticOracleInterface)5642",
              "contract": "Escrow",
              "src": "src/Escrow.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(SkinnyOptimisticOracleInterface)5642": {
              "label": "contract SkinnyOptimisticOracleInterface",
              "numberOfBytes": "20"
            },
            "t_enum(Status)7411": {
              "label": "enum Escrow.Status",
              "members": [
                "NoBounty",
                "Submitted",
                "DisputeInitiated",
                "DisputeRespondedTo",
                "Resolved"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_bytes32,t_enum(Status)7411)": {
              "label": "mapping(bytes32 => enum Escrow.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "11a55f39dbb87a4228c8ebe1f71bb9fdf9cb2c3032917c155ad1140d8e7447c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "c2564fe283862ad6d470b1dc350fc3afec204ba8429df537dde302cb22e3639a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable": {
        "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "99c967cd5705b1a3a1ba6658cb57365ce0f1654e6b63f93eb8b49e3ba2eb8419",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "0fdbdbffa7efa1d2b3a2439bca2436195cb93b92a6f497cf1ce36d78b58e96f8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "a4730689ab601971414b0e5e63f37da6dfd9394965f356e5ad7be0175796f842",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:12",
        "version": {
          "withMetadata": "24f3df548a3adfff99461182ba995f0c7ba2d540c6bed357dbbf3abfc577e45f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:AddressWhitelist": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:11",
        "version": {
          "withMetadata": "e500f17672550ef8929df388ce9f2b661b651d90fb4337553947bd2502c3aa56",
          "withoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a",
          "linkedWithoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface"
        ],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_enum(Status)2463)",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:13"
            },
            {
              "label": "whitelistIndices",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(Status)2463": {
              "label": "enum AddressWhitelist.Status",
              "members": [
                "None",
                "In",
                "Out"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_enum(Status)2463)": {
              "label": "mapping(address => enum AddressWhitelist.Status)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:12",
        "version": {
          "withMetadata": "44d661d3ee62763f42c2a27abadb01958089103362d6b325ccdd296d43d7a9e6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:10",
        "version": {
          "withMetadata": "019ec9933cdef4c6671082cf5638da85d00fc9d104b4cd3d4529dab5e9627bc3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:9",
        "version": {
          "withMetadata": "05a9c2b7c1951a72d9102fcd290ef5e1b5d13265d53996369fa9630a9002d616",
          "withoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e",
          "linkedWithoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lockable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_notEntered",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Testable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:Timer": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:7",
        "version": {
          "withMetadata": "82fda981776a1808f4c485fedc2be688f32f30a28e483870ed74efbc674fbb1e",
          "withoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311",
          "linkedWithoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Timer",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTime",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Timer",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OptimisticOracleConstraints": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:27",
        "version": {
          "withMetadata": "bb8ecb6ccf1f69027dc11c9ac6a9cc8f2a7e19987a7c578ddb5c07505b6c4c91",
          "withoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8",
          "linkedWithoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:7",
        "version": {
          "withMetadata": "e2af786e7c553c08abe1803d3d4224688a6e8bf3443b3393478ebf2a96d2b5ff",
          "withoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a",
          "linkedWithoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:FinderInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "changeImplementationAddress(bytes32,address)",
          "getImplementationAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:IdentifierWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSupportedIdentifier(bytes32)",
          "removeSupportedIdentifier(bytes32)",
          "isIdentifierSupported(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:OracleAncillaryInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint256,bytes)",
          "hasPrice(bytes32,uint256,bytes)",
          "getPrice(bytes32,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:StoreInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "payOracleFees()",
          "payOracleFeesErc20(address,(uint256))",
          "computeRegularFee(uint256,uint256,(uint256))",
          "computeFinalFee(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:OptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "defaultLiveness()",
          "finder()",
          "getCurrentTime()",
          "requestPrice(bytes32,uint256,bytes,address,uint256)",
          "setBond(bytes32,uint256,bytes,uint256)",
          "setRefundOnDispute(bytes32,uint256,bytes)",
          "setCustomLiveness(bytes32,uint256,bytes,uint256)",
          "proposePriceFor(address,address,bytes32,uint256,bytes,int256)",
          "proposePrice(address,bytes32,uint256,bytes,int256)",
          "disputePriceFor(address,address,bytes32,uint256,bytes)",
          "disputePrice(address,bytes32,uint256,bytes)",
          "settleAndGetPrice(bytes32,uint256,bytes)",
          "settle(address,bytes32,uint256,bytes)",
          "getRequest(address,bytes32,uint256,bytes)",
          "getState(address,bytes32,uint256,bytes)",
          "hasPrice(address,bytes32,uint256,bytes)",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "requests",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(Request)5202_storage)",
              "contract": "OptimisticOracleInterface",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:90"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)1402": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Request)5202_storage)": {
              "label": "mapping(bytes32 => struct OptimisticOracleInterface.Request)",
              "numberOfBytes": "32"
            },
            "t_struct(Request)5202_storage": {
              "label": "struct OptimisticOracleInterface.Request",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "disputer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "currency",
                  "type": "t_contract(IERC20)1402",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "settled",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "refundOnDispute",
                  "type": "t_bool",
                  "offset": 21,
                  "slot": "2"
                },
                {
                  "label": "proposedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "resolvedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "expirationTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "reward",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "finalFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "bond",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "customLiveness",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                }
              ],
              "numberOfBytes": "320"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:OptimisticRequester": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:31",
        "inherit": [],
        "libraries": [],
        "methods": [
          "priceProposed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceDisputed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceSettled(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:79",
        "version": {
          "withMetadata": "f0aa8343d6c05e042bbbc9ec2e397f06496e9d141a74e0d8435ada1dc02881ee",
          "withoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41",
          "linkedWithoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address",
          "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint",
          "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces",
          "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData"
        ],
        "methods": [
          "(uint256,address,address)",
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracle",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:129"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)4988",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)4988": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracleProd": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:694",
        "version": {
          "withMetadata": "921c85b14a29c2277a0c7fec599d402151d0da67acba44a9268ef223aaf8ff42",
          "withoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7",
          "linkedWithoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle",
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address,address)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracleProd",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:695"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)4988",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)4988": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "src/Escrow.sol:Escrow": {
        "src": "src/Escrow.sol:16",
        "version": {
          "withMetadata": "8bb45cec898ea7707a57d53deb74cf4d17e6230315b4bea888afa1a0bba81614",
          "withoutMetadata": "d46388d5f349ec8a8ce2142f7d82808476f96f382a612ea61d08ab15aa42ad45",
          "linkedWithoutMetadata": "d46388d5f349ec8a8ce2142f7d82808476f96f382a612ea61d08ab15aa42ad45"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize()",
          "escrow(string,address,uint256,address,uint256)",
          "submit(string,address)",
          "initiateDispute(string,address,address,uint256,string,address)",
          "hunterDisputeResponse(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "forceHunterPayout(string,address,address)",
          "payoutIfDispute(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address)",
          "payout(string,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Escrow",
            "src": "src/Escrow.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "bountyAmounts",
              "offset": 0,
              "slot": "201",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:20"
            },
            {
              "label": "progress",
              "offset": 0,
              "slot": "202",
              "type": "t_mapping(t_bytes32,t_enum(Status)7411)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:21"
            },
            {
              "label": "expiration",
              "offset": 0,
              "slot": "203",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:22"
            },
            {
              "label": "payoutExpiration",
              "offset": 0,
              "slot": "204",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:23"
            },
            {
              "label": "oracleInterface",
              "offset": 0,
              "slot": "205",
              "type": "t_contract(SkinnyOptimisticOracleInterface)5642",
              "contract": "Escrow",
              "src": "src/Escrow.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(SkinnyOptimisticOracleInterface)5642": {
              "label": "contract SkinnyOptimisticOracleInterface",
              "numberOfBytes": "20"
            },
            "t_enum(Status)7411": {
              "label": "enum Escrow.Status",
              "members": [
                "NoBounty",
                "Submitted",
                "DisputeInitiated",
                "DisputeRespondedTo",
                "Resolved"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_bytes32,t_enum(Status)7411)": {
              "label": "mapping(bytes32 => enum Escrow.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "56bb83da23bbfcea7c0a3038e72d273dfab739cbd1ff03d675749cd2fe702cf9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "77fd95d225626a5b101192d75f45b64539750c52cabffd22b7dde154ca3ab874",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable": {
        "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "9fe9c4b0ea5005d1c96334e980c7c360b8fd94d98410a837967f0511c78ae543",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "8c115bbb50a2c579cefce97e216fba3c59826e29483bcd576d77e9187259c3ad",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "1e82487b40e767564be9049ac4fa1032df4d00be8e75a50cd9adc41865e940c4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:12",
        "version": {
          "withMetadata": "86f9c50fcf3a500d2498c035ae6b8c24af072b2d60656fd8fa524f152d2d773d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:AddressWhitelist": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:11",
        "version": {
          "withMetadata": "ee95e3731d261bd90483ea9ccd74c18053d47efb3a42538ed991e23dee3350b4",
          "withoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a",
          "linkedWithoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface"
        ],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_enum(Status)2463)",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:13"
            },
            {
              "label": "whitelistIndices",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(Status)2463": {
              "label": "enum AddressWhitelist.Status",
              "members": [
                "None",
                "In",
                "Out"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_enum(Status)2463)": {
              "label": "mapping(address => enum AddressWhitelist.Status)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:12",
        "version": {
          "withMetadata": "4c3936265d723e52f8cdad6434fd4021f6da2aa82a8bc1df855f67d601706fed",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:10",
        "version": {
          "withMetadata": "bb0c6ed6d3015f315d583096f923aacac915edbf99f4cd8cdeb298e09e2443c7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:9",
        "version": {
          "withMetadata": "eca6226831e9d90376da5845edd32383a4494420a8d8848730d17d0a6f2bb2b4",
          "withoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e",
          "linkedWithoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lockable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_notEntered",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Testable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:Timer": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:7",
        "version": {
          "withMetadata": "84a69ae7b77d50acf849e99d35603e155f2fb072787c8c8752e5e36e93d6e8ee",
          "withoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311",
          "linkedWithoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Timer",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTime",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Timer",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OptimisticOracleConstraints": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:27",
        "version": {
          "withMetadata": "8e828b6b64e8182800955f6aae341360c29dc2ff4d1b49e131f86e0cad76554a",
          "withoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8",
          "linkedWithoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:7",
        "version": {
          "withMetadata": "50febbf2c56c4d4ae777ac529e4a1f0bffd2921b89054928ca7f647d0cc6009a",
          "withoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a",
          "linkedWithoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:FinderInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "changeImplementationAddress(bytes32,address)",
          "getImplementationAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:IdentifierWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSupportedIdentifier(bytes32)",
          "removeSupportedIdentifier(bytes32)",
          "isIdentifierSupported(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:OracleAncillaryInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint256,bytes)",
          "hasPrice(bytes32,uint256,bytes)",
          "getPrice(bytes32,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:StoreInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "payOracleFees()",
          "payOracleFeesErc20(address,(uint256))",
          "computeRegularFee(uint256,uint256,(uint256))",
          "computeFinalFee(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:OptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "defaultLiveness()",
          "finder()",
          "getCurrentTime()",
          "requestPrice(bytes32,uint256,bytes,address,uint256)",
          "setBond(bytes32,uint256,bytes,uint256)",
          "setRefundOnDispute(bytes32,uint256,bytes)",
          "setCustomLiveness(bytes32,uint256,bytes,uint256)",
          "proposePriceFor(address,address,bytes32,uint256,bytes,int256)",
          "proposePrice(address,bytes32,uint256,bytes,int256)",
          "disputePriceFor(address,address,bytes32,uint256,bytes)",
          "disputePrice(address,bytes32,uint256,bytes)",
          "settleAndGetPrice(bytes32,uint256,bytes)",
          "settle(address,bytes32,uint256,bytes)",
          "getRequest(address,bytes32,uint256,bytes)",
          "getState(address,bytes32,uint256,bytes)",
          "hasPrice(address,bytes32,uint256,bytes)",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "requests",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(Request)5202_storage)",
              "contract": "OptimisticOracleInterface",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:90"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)1402": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Request)5202_storage)": {
              "label": "mapping(bytes32 => struct OptimisticOracleInterface.Request)",
              "numberOfBytes": "32"
            },
            "t_struct(Request)5202_storage": {
              "label": "struct OptimisticOracleInterface.Request",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "disputer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "currency",
                  "type": "t_contract(IERC20)1402",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "settled",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "refundOnDispute",
                  "type": "t_bool",
                  "offset": 21,
                  "slot": "2"
                },
                {
                  "label": "proposedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "resolvedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "expirationTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "reward",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "finalFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "bond",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "customLiveness",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                }
              ],
              "numberOfBytes": "320"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:OptimisticRequester": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:31",
        "inherit": [],
        "libraries": [],
        "methods": [
          "priceProposed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceDisputed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceSettled(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:79",
        "version": {
          "withMetadata": "5f586e919657ea12a14f0e00eb7850f2ede6fadcc1cff6e3e95b5c53876aa6c1",
          "withoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41",
          "linkedWithoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address",
          "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint",
          "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces",
          "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData"
        ],
        "methods": [
          "(uint256,address,address)",
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracle",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:129"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)4988",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)4988": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracleProd": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:694",
        "version": {
          "withMetadata": "aa17ee2f8711956e2be242b1a5b712b28cbb3e14654863c9e25acb197c70ca6e",
          "withoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7",
          "linkedWithoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle",
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address,address)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracleProd",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:695"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)4988",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)4988": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "src/Escrow.sol:Escrow": {
        "src": "src/Escrow.sol:16",
        "version": {
          "withMetadata": "62c4457b0c4a412f8ee0f25cab44cc79c402af4023916bba4b7546b418033d8b",
          "withoutMetadata": "d46388d5f349ec8a8ce2142f7d82808476f96f382a612ea61d08ab15aa42ad45",
          "linkedWithoutMetadata": "d46388d5f349ec8a8ce2142f7d82808476f96f382a612ea61d08ab15aa42ad45"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize()",
          "escrow(string,address,uint256,address,uint256)",
          "submit(string,address)",
          "initiateDispute(string,address,address,uint256,string,address)",
          "hunterDisputeResponse(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "forceHunterPayout(string,address,address)",
          "payoutIfDispute(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address)",
          "payout(string,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Escrow",
            "src": "src/Escrow.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "bountyAmounts",
              "offset": 0,
              "slot": "201",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:20"
            },
            {
              "label": "progress",
              "offset": 0,
              "slot": "202",
              "type": "t_mapping(t_bytes32,t_enum(Status)7411)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:21"
            },
            {
              "label": "expiration",
              "offset": 0,
              "slot": "203",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:22"
            },
            {
              "label": "payoutExpiration",
              "offset": 0,
              "slot": "204",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:23"
            },
            {
              "label": "oracleInterface",
              "offset": 0,
              "slot": "205",
              "type": "t_contract(SkinnyOptimisticOracleInterface)5642",
              "contract": "Escrow",
              "src": "src/Escrow.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(SkinnyOptimisticOracleInterface)5642": {
              "label": "contract SkinnyOptimisticOracleInterface",
              "numberOfBytes": "20"
            },
            "t_enum(Status)7411": {
              "label": "enum Escrow.Status",
              "members": [
                "NoBounty",
                "Submitted",
                "DisputeInitiated",
                "DisputeRespondedTo",
                "Resolved"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_bytes32,t_enum(Status)7411)": {
              "label": "mapping(bytes32 => enum Escrow.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "f0ad64c32091319cc08364eae00909de1b66ba94fb96cbdb7d488d1f93fea18b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b54ceaaf9b1bc3afaedc129ee7d38af5553fbade3c5554392a24926137a63c20",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable": {
        "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "09f4364ac6a892c2690e4d219381580fdd78ef46df9306de41ff72d6e8a582ec",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "4721db517da9dfecddd739baea797a14cab4691da1fcce8b4fc44d63db6a122c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "deb443f9cbe56e209cf74936131e01e4827c38759a7d87794d777e144a133e54",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:12",
        "version": {
          "withMetadata": "6eaadabaa529560befb9261c68968a0f702c80d4aa91cd5256c5f12b4d4147b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:AddressWhitelist": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:11",
        "version": {
          "withMetadata": "aa1cee2d91622f2e70033741b49e55f70dd31e21a6cd958159893808cf50e868",
          "withoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a",
          "linkedWithoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface"
        ],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_enum(Status)2463)",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:13"
            },
            {
              "label": "whitelistIndices",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(Status)2463": {
              "label": "enum AddressWhitelist.Status",
              "members": [
                "None",
                "In",
                "Out"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_enum(Status)2463)": {
              "label": "mapping(address => enum AddressWhitelist.Status)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:12",
        "version": {
          "withMetadata": "2866ac2684f681577eafb5e5f4e1413d4f6be3e1cad3d3fa0c452ef42d0bdff0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:10",
        "version": {
          "withMetadata": "a01398bae0a02095b0ca0f523b61daae30c7db47d24869db5359fe507e08995b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:9",
        "version": {
          "withMetadata": "b7bd57432cab6c62396ecbb75aaf991431171d60e0bb51d3ba314c024339d9a1",
          "withoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e",
          "linkedWithoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lockable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_notEntered",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Testable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:Timer": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:7",
        "version": {
          "withMetadata": "b51a43b07ab12e227292d5dc779d12e404a15acc0bb31cbb6f63762e27aab3b3",
          "withoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311",
          "linkedWithoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Timer",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTime",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Timer",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OptimisticOracleConstraints": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:27",
        "version": {
          "withMetadata": "e4baada4f4f85d071ce653dc8f686f2fb605ef14ee527052cbfba42ec83249c5",
          "withoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8",
          "linkedWithoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:7",
        "version": {
          "withMetadata": "d0b55568eb46e671d002746ad5dc2a8c9114bb8bf1abd2848eccff9600d8f55f",
          "withoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a",
          "linkedWithoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:FinderInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "changeImplementationAddress(bytes32,address)",
          "getImplementationAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:IdentifierWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSupportedIdentifier(bytes32)",
          "removeSupportedIdentifier(bytes32)",
          "isIdentifierSupported(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:OracleAncillaryInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint256,bytes)",
          "hasPrice(bytes32,uint256,bytes)",
          "getPrice(bytes32,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:StoreInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "payOracleFees()",
          "payOracleFeesErc20(address,(uint256))",
          "computeRegularFee(uint256,uint256,(uint256))",
          "computeFinalFee(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:OptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "defaultLiveness()",
          "finder()",
          "getCurrentTime()",
          "requestPrice(bytes32,uint256,bytes,address,uint256)",
          "setBond(bytes32,uint256,bytes,uint256)",
          "setRefundOnDispute(bytes32,uint256,bytes)",
          "setCustomLiveness(bytes32,uint256,bytes,uint256)",
          "proposePriceFor(address,address,bytes32,uint256,bytes,int256)",
          "proposePrice(address,bytes32,uint256,bytes,int256)",
          "disputePriceFor(address,address,bytes32,uint256,bytes)",
          "disputePrice(address,bytes32,uint256,bytes)",
          "settleAndGetPrice(bytes32,uint256,bytes)",
          "settle(address,bytes32,uint256,bytes)",
          "getRequest(address,bytes32,uint256,bytes)",
          "getState(address,bytes32,uint256,bytes)",
          "hasPrice(address,bytes32,uint256,bytes)",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "requests",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(Request)5202_storage)",
              "contract": "OptimisticOracleInterface",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:90"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)1402": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Request)5202_storage)": {
              "label": "mapping(bytes32 => struct OptimisticOracleInterface.Request)",
              "numberOfBytes": "32"
            },
            "t_struct(Request)5202_storage": {
              "label": "struct OptimisticOracleInterface.Request",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "disputer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "currency",
                  "type": "t_contract(IERC20)1402",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "settled",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "refundOnDispute",
                  "type": "t_bool",
                  "offset": 21,
                  "slot": "2"
                },
                {
                  "label": "proposedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "resolvedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "expirationTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "reward",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "finalFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "bond",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "customLiveness",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                }
              ],
              "numberOfBytes": "320"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:OptimisticRequester": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:31",
        "inherit": [],
        "libraries": [],
        "methods": [
          "priceProposed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceDisputed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceSettled(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:79",
        "version": {
          "withMetadata": "a4e57381f408c0c9865faf9c121b1cd0d93434a3bfe1424a0a67961f429b8830",
          "withoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41",
          "linkedWithoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address",
          "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint",
          "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces",
          "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData"
        ],
        "methods": [
          "(uint256,address,address)",
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracle",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:129"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)4988",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)4988": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracleProd": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:694",
        "version": {
          "withMetadata": "e7c59fb402c50606dfcc5326e5c2b373e9062c4521076a3d01dea68427631b68",
          "withoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7",
          "linkedWithoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle",
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address,address)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracleProd",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:695"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)4988",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)4988": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "src/Escrow.sol:Escrow": {
        "src": "src/Escrow.sol:16",
        "version": {
          "withMetadata": "38bd1ecb6ce29011a56bbd36a849971263230767a52addb766ba6efae48ca588",
          "withoutMetadata": "d46388d5f349ec8a8ce2142f7d82808476f96f382a612ea61d08ab15aa42ad45",
          "linkedWithoutMetadata": "d46388d5f349ec8a8ce2142f7d82808476f96f382a612ea61d08ab15aa42ad45"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize()",
          "escrow(string,address,uint256,address,uint256)",
          "submit(string,address)",
          "initiateDispute(string,address,address,uint256,string,address)",
          "hunterDisputeResponse(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "forceHunterPayout(string,address,address)",
          "payoutIfDispute(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address)",
          "payout(string,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Escrow",
            "src": "src/Escrow.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "bountyAmounts",
              "offset": 0,
              "slot": "201",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:20"
            },
            {
              "label": "progress",
              "offset": 0,
              "slot": "202",
              "type": "t_mapping(t_bytes32,t_enum(Status)7411)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:21"
            },
            {
              "label": "expiration",
              "offset": 0,
              "slot": "203",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:22"
            },
            {
              "label": "payoutExpiration",
              "offset": 0,
              "slot": "204",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:23"
            },
            {
              "label": "oracleInterface",
              "offset": 0,
              "slot": "205",
              "type": "t_contract(SkinnyOptimisticOracleInterface)5642",
              "contract": "Escrow",
              "src": "src/Escrow.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(SkinnyOptimisticOracleInterface)5642": {
              "label": "contract SkinnyOptimisticOracleInterface",
              "numberOfBytes": "20"
            },
            "t_enum(Status)7411": {
              "label": "enum Escrow.Status",
              "members": [
                "NoBounty",
                "Submitted",
                "DisputeInitiated",
                "DisputeRespondedTo",
                "Resolved"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_bytes32,t_enum(Status)7411)": {
              "label": "mapping(bytes32 => enum Escrow.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "24fbd8d90cf092bcfd5b8db179aebf621059492d29dec32237d3390739e05a71",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "91ef7508e62e11418e6e75b9e2acc531d2248824e31e840148be19f3f2eaa994",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable": {
        "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "efd593ea9cd48dd816a14c56e9aef1f044681739a46ff9a78b7b9b47e510e934",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "24e0a7a5c3961acfc93ec2c061aacca3e60d930346eca1066a9c72baa49cac5a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "f68463403ff34e1a767370d05d05e4799e52120ee4f0c3e65d1257c6a4dc663e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:12",
        "version": {
          "withMetadata": "2695d05e3d206048cce33cd112830895749d104b89288ae5531f2fe8cd3689ed",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:AddressWhitelist": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:11",
        "version": {
          "withMetadata": "2f278a6ef9bfa63dafc897dd57f774a21f1d4b349fc15250c95b38a35ec6876d",
          "withoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a",
          "linkedWithoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface"
        ],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_enum(Status)2463)",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:13"
            },
            {
              "label": "whitelistIndices",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(Status)2463": {
              "label": "enum AddressWhitelist.Status",
              "members": [
                "None",
                "In",
                "Out"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_enum(Status)2463)": {
              "label": "mapping(address => enum AddressWhitelist.Status)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:12",
        "version": {
          "withMetadata": "d44209cfd0526abec88098a1e65d597144b933197cf22968821e45df89951999",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:10",
        "version": {
          "withMetadata": "6a4c5c4d689a1520852c1d6175ee29490d883d00b6a1477165853bde63b5cda9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:9",
        "version": {
          "withMetadata": "4059e5b2275d0c22b3be24c9aecd2bea5575e88a7e310a7b5c4db4a0d2d05070",
          "withoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e",
          "linkedWithoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lockable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_notEntered",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Testable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:Timer": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:7",
        "version": {
          "withMetadata": "81aa66dfe2f8183002eccbeaacc3837b8cfa02d7c279b953979c1fe32fb8531d",
          "withoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311",
          "linkedWithoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Timer",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTime",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Timer",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OptimisticOracleConstraints": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:27",
        "version": {
          "withMetadata": "3e2bcf142fd64b366d983b4f1fb58c5c9a49aa4eaf441014a2ec3ad1cfec9169",
          "withoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8",
          "linkedWithoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:7",
        "version": {
          "withMetadata": "7a46d0b493d3787a868b7c372a25d2dedd9894eb9144555b4db9c1b8c47bf72f",
          "withoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a",
          "linkedWithoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:FinderInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "changeImplementationAddress(bytes32,address)",
          "getImplementationAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:IdentifierWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSupportedIdentifier(bytes32)",
          "removeSupportedIdentifier(bytes32)",
          "isIdentifierSupported(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:OracleAncillaryInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint256,bytes)",
          "hasPrice(bytes32,uint256,bytes)",
          "getPrice(bytes32,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:StoreInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "payOracleFees()",
          "payOracleFeesErc20(address,(uint256))",
          "computeRegularFee(uint256,uint256,(uint256))",
          "computeFinalFee(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:OptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "defaultLiveness()",
          "finder()",
          "getCurrentTime()",
          "requestPrice(bytes32,uint256,bytes,address,uint256)",
          "setBond(bytes32,uint256,bytes,uint256)",
          "setRefundOnDispute(bytes32,uint256,bytes)",
          "setCustomLiveness(bytes32,uint256,bytes,uint256)",
          "proposePriceFor(address,address,bytes32,uint256,bytes,int256)",
          "proposePrice(address,bytes32,uint256,bytes,int256)",
          "disputePriceFor(address,address,bytes32,uint256,bytes)",
          "disputePrice(address,bytes32,uint256,bytes)",
          "settleAndGetPrice(bytes32,uint256,bytes)",
          "settle(address,bytes32,uint256,bytes)",
          "getRequest(address,bytes32,uint256,bytes)",
          "getState(address,bytes32,uint256,bytes)",
          "hasPrice(address,bytes32,uint256,bytes)",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "requests",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(Request)5202_storage)",
              "contract": "OptimisticOracleInterface",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:90"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)1402": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Request)5202_storage)": {
              "label": "mapping(bytes32 => struct OptimisticOracleInterface.Request)",
              "numberOfBytes": "32"
            },
            "t_struct(Request)5202_storage": {
              "label": "struct OptimisticOracleInterface.Request",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "disputer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "currency",
                  "type": "t_contract(IERC20)1402",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "settled",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "refundOnDispute",
                  "type": "t_bool",
                  "offset": 21,
                  "slot": "2"
                },
                {
                  "label": "proposedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "resolvedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "expirationTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "reward",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "finalFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "bond",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "customLiveness",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                }
              ],
              "numberOfBytes": "320"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:OptimisticRequester": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:31",
        "inherit": [],
        "libraries": [],
        "methods": [
          "priceProposed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceDisputed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceSettled(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:79",
        "version": {
          "withMetadata": "022822ebaa2f9875355398fb96a32de6e413980757eef73b60c20eb05bc314eb",
          "withoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41",
          "linkedWithoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address",
          "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint",
          "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces",
          "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData"
        ],
        "methods": [
          "(uint256,address,address)",
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracle",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:129"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)4988",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)4988": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracleProd": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:694",
        "version": {
          "withMetadata": "466f13a2881e6d49acdac53c0d9ce2e64e741437bb3eee0baabc36821cb697cb",
          "withoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7",
          "linkedWithoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle",
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address,address)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracleProd",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:695"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)4988",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)4988": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "src/Escrow.sol:Escrow": {
        "src": "src/Escrow.sol:16",
        "version": {
          "withMetadata": "42cf22f8ed95c54a666b2614cdc98fdebcdfd45a222c94c05481b38f6e6c21ab",
          "withoutMetadata": "d46388d5f349ec8a8ce2142f7d82808476f96f382a612ea61d08ab15aa42ad45",
          "linkedWithoutMetadata": "d46388d5f349ec8a8ce2142f7d82808476f96f382a612ea61d08ab15aa42ad45"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize()",
          "escrow(string,address,uint256,address,uint256)",
          "submit(string,address)",
          "initiateDispute(string,address,address,uint256,string,address)",
          "hunterDisputeResponse(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "forceHunterPayout(string,address,address)",
          "payoutIfDispute(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address)",
          "payout(string,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Escrow",
            "src": "src/Escrow.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "bountyAmounts",
              "offset": 0,
              "slot": "201",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:20"
            },
            {
              "label": "progress",
              "offset": 0,
              "slot": "202",
              "type": "t_mapping(t_bytes32,t_enum(Status)7411)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:21"
            },
            {
              "label": "expiration",
              "offset": 0,
              "slot": "203",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:22"
            },
            {
              "label": "payoutExpiration",
              "offset": 0,
              "slot": "204",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:23"
            },
            {
              "label": "oracleInterface",
              "offset": 0,
              "slot": "205",
              "type": "t_contract(SkinnyOptimisticOracleInterface)5642",
              "contract": "Escrow",
              "src": "src/Escrow.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(SkinnyOptimisticOracleInterface)5642": {
              "label": "contract SkinnyOptimisticOracleInterface",
              "numberOfBytes": "20"
            },
            "t_enum(Status)7411": {
              "label": "enum Escrow.Status",
              "members": [
                "NoBounty",
                "Submitted",
                "DisputeInitiated",
                "DisputeRespondedTo",
                "Resolved"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_bytes32,t_enum(Status)7411)": {
              "label": "mapping(bytes32 => enum Escrow.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "54f7e39fa884cbb36e957bf1c3ba55e8b5bb6128c50bc44d24fdc2c04f2af16b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "4f233263c29a3b99ea9a225dbad7d2dc9c27a5eb041361f88ce1437368f4573b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable": {
        "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "5f008e223c89cdca187a23ef787991fe58dde92624e731ffe19905039022c15e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "3877b6ee772d81e1b8fa1e96a7eee548a402912650b29f041939661d76a2b723",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "86189124e8d69ba928cd9b7920163d26d4b552f72c4cd868ed1c008bca631f93",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:12",
        "version": {
          "withMetadata": "8a536cce2e6b32b94105c5777f45072733639be5bb7c584278275f3b285a6c55",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:AddressWhitelist": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:11",
        "version": {
          "withMetadata": "19c118349dce02095f649c7d752a4c8898d80bb8a683a201d5ea3b9f804940e8",
          "withoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a",
          "linkedWithoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface"
        ],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_enum(Status)2463)",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:13"
            },
            {
              "label": "whitelistIndices",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(Status)2463": {
              "label": "enum AddressWhitelist.Status",
              "members": [
                "None",
                "In",
                "Out"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_enum(Status)2463)": {
              "label": "mapping(address => enum AddressWhitelist.Status)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:12",
        "version": {
          "withMetadata": "b8f091dbdf2671ff956f87a6bc253e4140414fa6ed9add4ad40609351ee71c94",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:10",
        "version": {
          "withMetadata": "1315467f88088ee1c1a9d4bdc91b2ba69d5df225795bd7e157acd30010ea90e7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:9",
        "version": {
          "withMetadata": "2fdc617d633dd56d493e71d6bc7807dad2c84bb18488faf8751e8632a5628611",
          "withoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e",
          "linkedWithoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lockable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_notEntered",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Testable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:Timer": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:7",
        "version": {
          "withMetadata": "f302271c6adbb6e8c2a31a6943523773395471f5d7bc8e72d166ce0f0e21366e",
          "withoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311",
          "linkedWithoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Timer",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTime",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Timer",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OptimisticOracleConstraints": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:27",
        "version": {
          "withMetadata": "2b398451c9bcc048ff7042929564e70cc58c61d4cbdb665d78e4a3b1bdca1671",
          "withoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8",
          "linkedWithoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:7",
        "version": {
          "withMetadata": "4557caac03ac98e82d596aaecdc99b102245f6617c18d1a05cf6ab52302f50e2",
          "withoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a",
          "linkedWithoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:FinderInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "changeImplementationAddress(bytes32,address)",
          "getImplementationAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:IdentifierWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSupportedIdentifier(bytes32)",
          "removeSupportedIdentifier(bytes32)",
          "isIdentifierSupported(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:OracleAncillaryInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint256,bytes)",
          "hasPrice(bytes32,uint256,bytes)",
          "getPrice(bytes32,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:StoreInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "payOracleFees()",
          "payOracleFeesErc20(address,(uint256))",
          "computeRegularFee(uint256,uint256,(uint256))",
          "computeFinalFee(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:OptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "defaultLiveness()",
          "finder()",
          "getCurrentTime()",
          "requestPrice(bytes32,uint256,bytes,address,uint256)",
          "setBond(bytes32,uint256,bytes,uint256)",
          "setRefundOnDispute(bytes32,uint256,bytes)",
          "setCustomLiveness(bytes32,uint256,bytes,uint256)",
          "proposePriceFor(address,address,bytes32,uint256,bytes,int256)",
          "proposePrice(address,bytes32,uint256,bytes,int256)",
          "disputePriceFor(address,address,bytes32,uint256,bytes)",
          "disputePrice(address,bytes32,uint256,bytes)",
          "settleAndGetPrice(bytes32,uint256,bytes)",
          "settle(address,bytes32,uint256,bytes)",
          "getRequest(address,bytes32,uint256,bytes)",
          "getState(address,bytes32,uint256,bytes)",
          "hasPrice(address,bytes32,uint256,bytes)",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "requests",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(Request)5202_storage)",
              "contract": "OptimisticOracleInterface",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:90"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)1402": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Request)5202_storage)": {
              "label": "mapping(bytes32 => struct OptimisticOracleInterface.Request)",
              "numberOfBytes": "32"
            },
            "t_struct(Request)5202_storage": {
              "label": "struct OptimisticOracleInterface.Request",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "disputer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "currency",
                  "type": "t_contract(IERC20)1402",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "settled",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "refundOnDispute",
                  "type": "t_bool",
                  "offset": 21,
                  "slot": "2"
                },
                {
                  "label": "proposedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "resolvedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "expirationTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "reward",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "finalFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "bond",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "customLiveness",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                }
              ],
              "numberOfBytes": "320"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:OptimisticRequester": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:31",
        "inherit": [],
        "libraries": [],
        "methods": [
          "priceProposed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceDisputed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceSettled(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:79",
        "version": {
          "withMetadata": "8f7d8313ec4eb6dcefe49039f38bca25aa1f5ce7c781415c93f93ca2c07e95fd",
          "withoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41",
          "linkedWithoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address",
          "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint",
          "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces",
          "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData"
        ],
        "methods": [
          "(uint256,address,address)",
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracle",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:129"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)4988",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)4988": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracleProd": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:694",
        "version": {
          "withMetadata": "61ae744052c15742179da6388ab2183496d50599334baf5a7e4ab848f73484f7",
          "withoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7",
          "linkedWithoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle",
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address,address)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracleProd",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:695"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)4988",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)4988": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "src/Escrow.sol:Escrow": {
        "src": "src/Escrow.sol:16",
        "version": {
          "withMetadata": "c2d265267174a1fd6fda501552f4017705f2fa3072d20266cad8dfb51f8e9f17",
          "withoutMetadata": "d46388d5f349ec8a8ce2142f7d82808476f96f382a612ea61d08ab15aa42ad45",
          "linkedWithoutMetadata": "d46388d5f349ec8a8ce2142f7d82808476f96f382a612ea61d08ab15aa42ad45"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize()",
          "escrow(string,address,uint256,address,uint256)",
          "submit(string,address)",
          "initiateDispute(string,address,address,uint256,string,address)",
          "hunterDisputeResponse(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "forceHunterPayout(string,address,address)",
          "payoutIfDispute(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address)",
          "payout(string,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Escrow",
            "src": "src/Escrow.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "bountyAmounts",
              "offset": 0,
              "slot": "201",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:20"
            },
            {
              "label": "progress",
              "offset": 0,
              "slot": "202",
              "type": "t_mapping(t_bytes32,t_enum(Status)7411)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:21"
            },
            {
              "label": "expiration",
              "offset": 0,
              "slot": "203",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:22"
            },
            {
              "label": "payoutExpiration",
              "offset": 0,
              "slot": "204",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:23"
            },
            {
              "label": "oracleInterface",
              "offset": 0,
              "slot": "205",
              "type": "t_contract(SkinnyOptimisticOracleInterface)5642",
              "contract": "Escrow",
              "src": "src/Escrow.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(SkinnyOptimisticOracleInterface)5642": {
              "label": "contract SkinnyOptimisticOracleInterface",
              "numberOfBytes": "20"
            },
            "t_enum(Status)7411": {
              "label": "enum Escrow.Status",
              "members": [
                "NoBounty",
                "Submitted",
                "DisputeInitiated",
                "DisputeRespondedTo",
                "Resolved"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_bytes32,t_enum(Status)7411)": {
              "label": "mapping(bytes32 => enum Escrow.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "1b7b8d4af16a75f66c0fb7d308c1bd3003f294a6a59692fbb93d6adcc59f3f11",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "6468af75d06b905c10327e321564b83317605e51fbf401b2adea65ddf79596a5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable": {
        "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "b389cc23f2da761dc47b706ffcb1a40b57a2c0109711a7c5f15da5eb2c7e0f19",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "3773d2b140d079aa77f7c096a8acc66141eedfc33963788f85395620d0c84514",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "8bfbd8fcf323faf91d6c847f9f310c9bf5aa9cad97577878f05f1216dcb3fb87",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:12",
        "version": {
          "withMetadata": "ca847ca7706dde0cebe6fdace78bd8fd680ed624ac58a3671caf367eae2c773a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:AddressWhitelist": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:11",
        "version": {
          "withMetadata": "50fb533f4a414766111039c88e50aef13b3c8dc3c0d50e1220cf5edf40f40e5e",
          "withoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a",
          "linkedWithoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface"
        ],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_enum(Status)2463)",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:13"
            },
            {
              "label": "whitelistIndices",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(Status)2463": {
              "label": "enum AddressWhitelist.Status",
              "members": [
                "None",
                "In",
                "Out"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_enum(Status)2463)": {
              "label": "mapping(address => enum AddressWhitelist.Status)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:12",
        "version": {
          "withMetadata": "a3f338721df9600d598ee3ce383515c23317df7849b296c28098aa38eecc30e1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:10",
        "version": {
          "withMetadata": "088cdd9b8fe11c37cf9003fc9599e69f35dd6c95277b57bd10518f8c7465a51f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:9",
        "version": {
          "withMetadata": "d11ec83fe1b73b8488030c64b0d3c79062ffa087b2fb1bb39198d7452272fe6f",
          "withoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e",
          "linkedWithoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lockable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_notEntered",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Testable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:Timer": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:7",
        "version": {
          "withMetadata": "12c118eb4c7cfc584fd3bdb8836c9d2450fcb727489b4b2116adc05042f5a501",
          "withoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311",
          "linkedWithoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Timer",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTime",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Timer",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OptimisticOracleConstraints": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:27",
        "version": {
          "withMetadata": "862bc3eca1e8467c70a3114aacfaac6f3c3b61cfdee6b04bd14f0b21e7c90d26",
          "withoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8",
          "linkedWithoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:7",
        "version": {
          "withMetadata": "8806a559c4fab4a0e8465f37194cfca9643b7b1e40b5cd2183fc899cea524312",
          "withoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a",
          "linkedWithoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:FinderInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "changeImplementationAddress(bytes32,address)",
          "getImplementationAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:IdentifierWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSupportedIdentifier(bytes32)",
          "removeSupportedIdentifier(bytes32)",
          "isIdentifierSupported(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:OracleAncillaryInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint256,bytes)",
          "hasPrice(bytes32,uint256,bytes)",
          "getPrice(bytes32,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:StoreInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "payOracleFees()",
          "payOracleFeesErc20(address,(uint256))",
          "computeRegularFee(uint256,uint256,(uint256))",
          "computeFinalFee(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:OptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "defaultLiveness()",
          "finder()",
          "getCurrentTime()",
          "requestPrice(bytes32,uint256,bytes,address,uint256)",
          "setBond(bytes32,uint256,bytes,uint256)",
          "setRefundOnDispute(bytes32,uint256,bytes)",
          "setCustomLiveness(bytes32,uint256,bytes,uint256)",
          "proposePriceFor(address,address,bytes32,uint256,bytes,int256)",
          "proposePrice(address,bytes32,uint256,bytes,int256)",
          "disputePriceFor(address,address,bytes32,uint256,bytes)",
          "disputePrice(address,bytes32,uint256,bytes)",
          "settleAndGetPrice(bytes32,uint256,bytes)",
          "settle(address,bytes32,uint256,bytes)",
          "getRequest(address,bytes32,uint256,bytes)",
          "getState(address,bytes32,uint256,bytes)",
          "hasPrice(address,bytes32,uint256,bytes)",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "requests",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(Request)5202_storage)",
              "contract": "OptimisticOracleInterface",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:90"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)1402": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Request)5202_storage)": {
              "label": "mapping(bytes32 => struct OptimisticOracleInterface.Request)",
              "numberOfBytes": "32"
            },
            "t_struct(Request)5202_storage": {
              "label": "struct OptimisticOracleInterface.Request",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "disputer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "currency",
                  "type": "t_contract(IERC20)1402",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "settled",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "refundOnDispute",
                  "type": "t_bool",
                  "offset": 21,
                  "slot": "2"
                },
                {
                  "label": "proposedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "resolvedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "expirationTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "reward",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "finalFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "bond",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "customLiveness",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                }
              ],
              "numberOfBytes": "320"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:OptimisticRequester": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:31",
        "inherit": [],
        "libraries": [],
        "methods": [
          "priceProposed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceDisputed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceSettled(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:79",
        "version": {
          "withMetadata": "6a9cbedbcb03f8eb95a5fcd9f07aef5b768e672ebe10f39353fe33b02abb3873",
          "withoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41",
          "linkedWithoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address",
          "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint",
          "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces",
          "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData"
        ],
        "methods": [
          "(uint256,address,address)",
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracle",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:129"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)4988",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)4988": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracleProd": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:694",
        "version": {
          "withMetadata": "4f374cb97e7f858fd9f8b05bac13daf576e7615845f1e707bc0d4a4e28b547db",
          "withoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7",
          "linkedWithoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle",
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address,address)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracleProd",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:695"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)4988",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)4988": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "src/Escrow.sol:Escrow": {
        "src": "src/Escrow.sol:16",
        "version": {
          "withMetadata": "1b5b9e7a854055c381f7565f3e333ff44185f0aaf86c538749d2243d85f980b3",
          "withoutMetadata": "d46388d5f349ec8a8ce2142f7d82808476f96f382a612ea61d08ab15aa42ad45",
          "linkedWithoutMetadata": "d46388d5f349ec8a8ce2142f7d82808476f96f382a612ea61d08ab15aa42ad45"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize()",
          "escrow(string,address,uint256,address,uint256)",
          "submit(string,address)",
          "initiateDispute(string,address,address,uint256,string,address)",
          "hunterDisputeResponse(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "forceHunterPayout(string,address,address)",
          "payoutIfDispute(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address)",
          "payout(string,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Escrow",
            "src": "src/Escrow.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "bountyAmounts",
              "offset": 0,
              "slot": "201",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:20"
            },
            {
              "label": "progress",
              "offset": 0,
              "slot": "202",
              "type": "t_mapping(t_bytes32,t_enum(Status)7411)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:21"
            },
            {
              "label": "expiration",
              "offset": 0,
              "slot": "203",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:22"
            },
            {
              "label": "payoutExpiration",
              "offset": 0,
              "slot": "204",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:23"
            },
            {
              "label": "oracleInterface",
              "offset": 0,
              "slot": "205",
              "type": "t_contract(SkinnyOptimisticOracleInterface)5642",
              "contract": "Escrow",
              "src": "src/Escrow.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(SkinnyOptimisticOracleInterface)5642": {
              "label": "contract SkinnyOptimisticOracleInterface",
              "numberOfBytes": "20"
            },
            "t_enum(Status)7411": {
              "label": "enum Escrow.Status",
              "members": [
                "NoBounty",
                "Submitted",
                "DisputeInitiated",
                "DisputeRespondedTo",
                "Resolved"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_bytes32,t_enum(Status)7411)": {
              "label": "mapping(bytes32 => enum Escrow.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "205cb26bb03de590fe765748cdbae97d9eb2f4675eb50b6c3be8986a4f3ff7ca",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "f187b22f55ffa696101a47c61601b4acd68d817ed0143533ca1ddaa17779efa9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable": {
        "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "8211bc32116ca1d42a131d6579968fce2260febe77b5ace59a70a351579d79a7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "e4cc88888aae9b8d8669ae723a4ffd811b5818389c1e7675a00ded42da079f77",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "0a3eaa4df21a0309c8f7eaf5aa2023b8cb427b167bd1d9995f90cba66c3079ea",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:12",
        "version": {
          "withMetadata": "4183fe7cec2cc54aeec53a62949d55e9430ff350292a849084afd1e776081178",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:AddressWhitelist": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:11",
        "version": {
          "withMetadata": "4668172b82becbb1e6464cef8db08d9f76489d09ebf8d2bf961808d78d0782e9",
          "withoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a",
          "linkedWithoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface"
        ],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_enum(Status)2463)",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:13"
            },
            {
              "label": "whitelistIndices",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(Status)2463": {
              "label": "enum AddressWhitelist.Status",
              "members": [
                "None",
                "In",
                "Out"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_enum(Status)2463)": {
              "label": "mapping(address => enum AddressWhitelist.Status)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:12",
        "version": {
          "withMetadata": "c4e359a811d7d372c91c61f0b3e613f723efb00885b6c267b16dcf877d4e5865",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:10",
        "version": {
          "withMetadata": "aa7e48fc6d2ab01a94a1c38e9425342b152c0f405e0def54856fde9c132ce6fa",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:9",
        "version": {
          "withMetadata": "5aef74b2d9795d81b429bbb82f05838982132ee7cec6cbc845ae59b35613e06b",
          "withoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e",
          "linkedWithoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lockable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_notEntered",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Testable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:Timer": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:7",
        "version": {
          "withMetadata": "55f78d4ae4b0d45d55d61e32763e1094250576442818e358bbdd69047acd46f6",
          "withoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311",
          "linkedWithoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Timer",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTime",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Timer",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OptimisticOracleConstraints": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:27",
        "version": {
          "withMetadata": "b66b5bcf41d09052535dbc6f1599941d191fe94a533fd1afd74693d72557c4d1",
          "withoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8",
          "linkedWithoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:7",
        "version": {
          "withMetadata": "b6ec46f84527b470b5f84a7cfd4386723fe3b432167cfc9ead1f25d8a8b2afc2",
          "withoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a",
          "linkedWithoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:FinderInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "changeImplementationAddress(bytes32,address)",
          "getImplementationAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:IdentifierWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSupportedIdentifier(bytes32)",
          "removeSupportedIdentifier(bytes32)",
          "isIdentifierSupported(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:OracleAncillaryInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint256,bytes)",
          "hasPrice(bytes32,uint256,bytes)",
          "getPrice(bytes32,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:StoreInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "payOracleFees()",
          "payOracleFeesErc20(address,(uint256))",
          "computeRegularFee(uint256,uint256,(uint256))",
          "computeFinalFee(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:OptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "defaultLiveness()",
          "finder()",
          "getCurrentTime()",
          "requestPrice(bytes32,uint256,bytes,address,uint256)",
          "setBond(bytes32,uint256,bytes,uint256)",
          "setRefundOnDispute(bytes32,uint256,bytes)",
          "setCustomLiveness(bytes32,uint256,bytes,uint256)",
          "proposePriceFor(address,address,bytes32,uint256,bytes,int256)",
          "proposePrice(address,bytes32,uint256,bytes,int256)",
          "disputePriceFor(address,address,bytes32,uint256,bytes)",
          "disputePrice(address,bytes32,uint256,bytes)",
          "settleAndGetPrice(bytes32,uint256,bytes)",
          "settle(address,bytes32,uint256,bytes)",
          "getRequest(address,bytes32,uint256,bytes)",
          "getState(address,bytes32,uint256,bytes)",
          "hasPrice(address,bytes32,uint256,bytes)",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "requests",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(Request)5202_storage)",
              "contract": "OptimisticOracleInterface",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:90"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)1402": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Request)5202_storage)": {
              "label": "mapping(bytes32 => struct OptimisticOracleInterface.Request)",
              "numberOfBytes": "32"
            },
            "t_struct(Request)5202_storage": {
              "label": "struct OptimisticOracleInterface.Request",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "disputer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "currency",
                  "type": "t_contract(IERC20)1402",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "settled",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "refundOnDispute",
                  "type": "t_bool",
                  "offset": 21,
                  "slot": "2"
                },
                {
                  "label": "proposedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "resolvedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "expirationTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "reward",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "finalFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "bond",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "customLiveness",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                }
              ],
              "numberOfBytes": "320"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:OptimisticRequester": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:31",
        "inherit": [],
        "libraries": [],
        "methods": [
          "priceProposed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceDisputed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceSettled(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:79",
        "version": {
          "withMetadata": "487582d1d6d856bfb5b28bc0f683c829140204af959346055ee644608973c0d8",
          "withoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41",
          "linkedWithoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address",
          "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint",
          "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces",
          "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData"
        ],
        "methods": [
          "(uint256,address,address)",
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracle",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:129"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)4988",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)4988": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracleProd": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:694",
        "version": {
          "withMetadata": "436f653e8756b395068e49c3f61e76b13f5ed26151b2e1b22d2d79da4ca74dff",
          "withoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7",
          "linkedWithoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle",
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address,address)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracleProd",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:695"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)4988",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)4988": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "src/Escrow.sol:Escrow": {
        "src": "src/Escrow.sol:16",
        "version": {
          "withMetadata": "f3afc850b8cbd0cda6e75204f3e5661555e57c2adb32833c122b2d86ffeb9afd",
          "withoutMetadata": "d46388d5f349ec8a8ce2142f7d82808476f96f382a612ea61d08ab15aa42ad45",
          "linkedWithoutMetadata": "d46388d5f349ec8a8ce2142f7d82808476f96f382a612ea61d08ab15aa42ad45"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize()",
          "escrow(string,address,uint256,address,uint256)",
          "submit(string,address)",
          "initiateDispute(string,address,address,uint256,string,address)",
          "hunterDisputeResponse(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "forceHunterPayout(string,address,address)",
          "payoutIfDispute(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address)",
          "payout(string,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Escrow",
            "src": "src/Escrow.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "bountyAmounts",
              "offset": 0,
              "slot": "201",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:20"
            },
            {
              "label": "progress",
              "offset": 0,
              "slot": "202",
              "type": "t_mapping(t_bytes32,t_enum(Status)7411)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:21"
            },
            {
              "label": "expiration",
              "offset": 0,
              "slot": "203",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:22"
            },
            {
              "label": "payoutExpiration",
              "offset": 0,
              "slot": "204",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:23"
            },
            {
              "label": "oracleInterface",
              "offset": 0,
              "slot": "205",
              "type": "t_contract(SkinnyOptimisticOracleInterface)5642",
              "contract": "Escrow",
              "src": "src/Escrow.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(SkinnyOptimisticOracleInterface)5642": {
              "label": "contract SkinnyOptimisticOracleInterface",
              "numberOfBytes": "20"
            },
            "t_enum(Status)7411": {
              "label": "enum Escrow.Status",
              "members": [
                "NoBounty",
                "Submitted",
                "DisputeInitiated",
                "DisputeRespondedTo",
                "Resolved"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_bytes32,t_enum(Status)7411)": {
              "label": "mapping(bytes32 => enum Escrow.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "97df2b003276ec3471635b471ffd9997e9f68ba47a98b9bed530d63ccc653cbf",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "c0bf5a1f45cfe4b904bccfbbedff8cdca9bf35cd68f81d5377aa0d2687858571",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable": {
        "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "dfd52c01460d23c36f0d3182e893654e2db712ef9e3bbaa3d6ca3a80900a9ba6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "02b44f5a757bab10f4a2089dc91cf4b0aa7e897ea6b1cb80a842c37136152543",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "197be91d881907746a876af692c44c6d98f7a8b23bc2b192a9b6fbe3487bbc8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:12",
        "version": {
          "withMetadata": "b6c3e5cea80b08f5d57207cfe86dd8b6ade70e7fc3b748b8af9229006e036a46",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:AddressWhitelist": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:11",
        "version": {
          "withMetadata": "4395d9a72bd1bf8c8b8f54f81d8071d4ec69ca76afa22a5d8b0ac1e3cb247824",
          "withoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a",
          "linkedWithoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface"
        ],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_enum(Status)2463)",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:13"
            },
            {
              "label": "whitelistIndices",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(Status)2463": {
              "label": "enum AddressWhitelist.Status",
              "members": [
                "None",
                "In",
                "Out"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_enum(Status)2463)": {
              "label": "mapping(address => enum AddressWhitelist.Status)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:12",
        "version": {
          "withMetadata": "db9e36fcda1b0e70354bf7f4e16bf34df0325100ff8081c6e767b09d1d12abfe",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:10",
        "version": {
          "withMetadata": "7b9baf4c4ae388b2a4f29e4b565c80586c1207968509cdc36fb95cd171ce5bb2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:9",
        "version": {
          "withMetadata": "a201de1e1d910ee82caa95bfccdd2c9dea030bd3342d069752f03bacbf65f6a4",
          "withoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e",
          "linkedWithoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lockable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_notEntered",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Testable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:Timer": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:7",
        "version": {
          "withMetadata": "1e0fe0541877faadbe22cedcdf495076fbc9ee7c07d65b647bc198b76ac53073",
          "withoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311",
          "linkedWithoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Timer",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTime",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Timer",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OptimisticOracleConstraints": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:27",
        "version": {
          "withMetadata": "44bb7a09a2539497200ea7ca8dab51f2c85775582669b99caad75c3c51ea096d",
          "withoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8",
          "linkedWithoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:7",
        "version": {
          "withMetadata": "9522720fafa35153ac4c045986663832055a7f7e209a7cf1f5a99e3b818cb0b2",
          "withoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a",
          "linkedWithoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:FinderInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "changeImplementationAddress(bytes32,address)",
          "getImplementationAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:IdentifierWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSupportedIdentifier(bytes32)",
          "removeSupportedIdentifier(bytes32)",
          "isIdentifierSupported(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:OracleAncillaryInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint256,bytes)",
          "hasPrice(bytes32,uint256,bytes)",
          "getPrice(bytes32,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:StoreInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "payOracleFees()",
          "payOracleFeesErc20(address,(uint256))",
          "computeRegularFee(uint256,uint256,(uint256))",
          "computeFinalFee(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:OptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "defaultLiveness()",
          "finder()",
          "getCurrentTime()",
          "requestPrice(bytes32,uint256,bytes,address,uint256)",
          "setBond(bytes32,uint256,bytes,uint256)",
          "setRefundOnDispute(bytes32,uint256,bytes)",
          "setCustomLiveness(bytes32,uint256,bytes,uint256)",
          "proposePriceFor(address,address,bytes32,uint256,bytes,int256)",
          "proposePrice(address,bytes32,uint256,bytes,int256)",
          "disputePriceFor(address,address,bytes32,uint256,bytes)",
          "disputePrice(address,bytes32,uint256,bytes)",
          "settleAndGetPrice(bytes32,uint256,bytes)",
          "settle(address,bytes32,uint256,bytes)",
          "getRequest(address,bytes32,uint256,bytes)",
          "getState(address,bytes32,uint256,bytes)",
          "hasPrice(address,bytes32,uint256,bytes)",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "requests",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(Request)5202_storage)",
              "contract": "OptimisticOracleInterface",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:90"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)1402": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Request)5202_storage)": {
              "label": "mapping(bytes32 => struct OptimisticOracleInterface.Request)",
              "numberOfBytes": "32"
            },
            "t_struct(Request)5202_storage": {
              "label": "struct OptimisticOracleInterface.Request",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "disputer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "currency",
                  "type": "t_contract(IERC20)1402",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "settled",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "refundOnDispute",
                  "type": "t_bool",
                  "offset": 21,
                  "slot": "2"
                },
                {
                  "label": "proposedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "resolvedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "expirationTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "reward",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "finalFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "bond",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "customLiveness",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                }
              ],
              "numberOfBytes": "320"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:OptimisticRequester": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:31",
        "inherit": [],
        "libraries": [],
        "methods": [
          "priceProposed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceDisputed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceSettled(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:79",
        "version": {
          "withMetadata": "8b2a80323e0d923455975ec5a15875afb819a8772fa3866af955c80c463d2ab4",
          "withoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41",
          "linkedWithoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address",
          "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint",
          "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces",
          "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData"
        ],
        "methods": [
          "(uint256,address,address)",
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracle",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:129"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)4988",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)4988": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracleProd": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:694",
        "version": {
          "withMetadata": "1638540144c8edd90c5b20ede3edb5da3a4c612b64fbfe6157b582dc64df9a37",
          "withoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7",
          "linkedWithoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle",
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address,address)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracleProd",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:695"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)4988",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)4988": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "src/Escrow.sol:Escrow": {
        "src": "src/Escrow.sol:16",
        "version": {
          "withMetadata": "dfb30dba089e763f70a50dae0c545d8d4a9c24e88afaf2ac783a02ceca346444",
          "withoutMetadata": "d46388d5f349ec8a8ce2142f7d82808476f96f382a612ea61d08ab15aa42ad45",
          "linkedWithoutMetadata": "d46388d5f349ec8a8ce2142f7d82808476f96f382a612ea61d08ab15aa42ad45"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize()",
          "escrow(string,address,uint256,address,uint256)",
          "submit(string,address)",
          "initiateDispute(string,address,address,uint256,string,address)",
          "hunterDisputeResponse(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "forceHunterPayout(string,address,address)",
          "payoutIfDispute(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address)",
          "payout(string,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Escrow",
            "src": "src/Escrow.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "bountyAmounts",
              "offset": 0,
              "slot": "201",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:20"
            },
            {
              "label": "progress",
              "offset": 0,
              "slot": "202",
              "type": "t_mapping(t_bytes32,t_enum(Status)7411)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:21"
            },
            {
              "label": "expiration",
              "offset": 0,
              "slot": "203",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:22"
            },
            {
              "label": "payoutExpiration",
              "offset": 0,
              "slot": "204",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:23"
            },
            {
              "label": "oracleInterface",
              "offset": 0,
              "slot": "205",
              "type": "t_contract(SkinnyOptimisticOracleInterface)5642",
              "contract": "Escrow",
              "src": "src/Escrow.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(SkinnyOptimisticOracleInterface)5642": {
              "label": "contract SkinnyOptimisticOracleInterface",
              "numberOfBytes": "20"
            },
            "t_enum(Status)7411": {
              "label": "enum Escrow.Status",
              "members": [
                "NoBounty",
                "Submitted",
                "DisputeInitiated",
                "DisputeRespondedTo",
                "Resolved"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_bytes32,t_enum(Status)7411)": {
              "label": "mapping(bytes32 => enum Escrow.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "925173ed6b7b2b198c8361bca2d9b8bfc57c1075af5f68cc46e6b475f571e98a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "bc24264795f0a889f6267bb00c9152d9f2489731b60c46ecc405fd4917f3d3fd",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable": {
        "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "be1034078ba8252a9aba4bc31f2bb860c319b503f1343e3aade7625f47e09407",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "c01ea7e6cb1117bf19e5342b2456c7cb99848ad951d731820485dd264d81ff22",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "b3f92f370bbf911abaabe60d3fd42313f351262a3f151b0ca4b60eb68f9c7139",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:12",
        "version": {
          "withMetadata": "25af12db85ba3cacb71125cbef43b1aed5b9607fbbd7124141cb412b1137e884",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:AddressWhitelist": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:11",
        "version": {
          "withMetadata": "a44d0dc3b3958df482b535a681c125e20e90178ae3347c55e49f88ac049d2704",
          "withoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a",
          "linkedWithoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface"
        ],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_enum(Status)2463)",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:13"
            },
            {
              "label": "whitelistIndices",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(Status)2463": {
              "label": "enum AddressWhitelist.Status",
              "members": [
                "None",
                "In",
                "Out"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_enum(Status)2463)": {
              "label": "mapping(address => enum AddressWhitelist.Status)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:12",
        "version": {
          "withMetadata": "ee780bfe25990cc978ccfcadfa4aac803336d4d9ac9c0c4c44b906c535fefbfd",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:10",
        "version": {
          "withMetadata": "f79c994df378a3c1a9ec999c016e12f5dfd9aa4857e4b34f8882312e1c8223bd",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:9",
        "version": {
          "withMetadata": "91ad980262b5ce56b5ae0acab476e20e4dca2e5b0d1d04404b398c364ba68641",
          "withoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e",
          "linkedWithoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lockable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_notEntered",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Testable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:Timer": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:7",
        "version": {
          "withMetadata": "b50140eb5728c4c57c34a3da81f8d7f0903c45f97f0687312540c202d79d5850",
          "withoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311",
          "linkedWithoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Timer",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTime",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Timer",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OptimisticOracleConstraints": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:27",
        "version": {
          "withMetadata": "22adda504378f39b9fe55ad5fabf76e4f2727f2c81f7db972242e64daa10d12b",
          "withoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8",
          "linkedWithoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:7",
        "version": {
          "withMetadata": "5c1f16dfc9428413423ae5038d80b3860482067143aa37e690efd37c161a4ef9",
          "withoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a",
          "linkedWithoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:FinderInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "changeImplementationAddress(bytes32,address)",
          "getImplementationAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:IdentifierWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSupportedIdentifier(bytes32)",
          "removeSupportedIdentifier(bytes32)",
          "isIdentifierSupported(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:OracleAncillaryInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint256,bytes)",
          "hasPrice(bytes32,uint256,bytes)",
          "getPrice(bytes32,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:StoreInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "payOracleFees()",
          "payOracleFeesErc20(address,(uint256))",
          "computeRegularFee(uint256,uint256,(uint256))",
          "computeFinalFee(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:OptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "defaultLiveness()",
          "finder()",
          "getCurrentTime()",
          "requestPrice(bytes32,uint256,bytes,address,uint256)",
          "setBond(bytes32,uint256,bytes,uint256)",
          "setRefundOnDispute(bytes32,uint256,bytes)",
          "setCustomLiveness(bytes32,uint256,bytes,uint256)",
          "proposePriceFor(address,address,bytes32,uint256,bytes,int256)",
          "proposePrice(address,bytes32,uint256,bytes,int256)",
          "disputePriceFor(address,address,bytes32,uint256,bytes)",
          "disputePrice(address,bytes32,uint256,bytes)",
          "settleAndGetPrice(bytes32,uint256,bytes)",
          "settle(address,bytes32,uint256,bytes)",
          "getRequest(address,bytes32,uint256,bytes)",
          "getState(address,bytes32,uint256,bytes)",
          "hasPrice(address,bytes32,uint256,bytes)",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "requests",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(Request)5202_storage)",
              "contract": "OptimisticOracleInterface",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:90"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)1402": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Request)5202_storage)": {
              "label": "mapping(bytes32 => struct OptimisticOracleInterface.Request)",
              "numberOfBytes": "32"
            },
            "t_struct(Request)5202_storage": {
              "label": "struct OptimisticOracleInterface.Request",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "disputer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "currency",
                  "type": "t_contract(IERC20)1402",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "settled",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "refundOnDispute",
                  "type": "t_bool",
                  "offset": 21,
                  "slot": "2"
                },
                {
                  "label": "proposedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "resolvedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "expirationTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "reward",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "finalFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "bond",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "customLiveness",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                }
              ],
              "numberOfBytes": "320"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:OptimisticRequester": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:31",
        "inherit": [],
        "libraries": [],
        "methods": [
          "priceProposed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceDisputed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceSettled(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:79",
        "version": {
          "withMetadata": "f923b00fcfe68b3ff643185174b14881580e198a283b42ffe7be337974bb2fd1",
          "withoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41",
          "linkedWithoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address",
          "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint",
          "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces",
          "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData"
        ],
        "methods": [
          "(uint256,address,address)",
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracle",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:129"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)4988",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)4988": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracleProd": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:694",
        "version": {
          "withMetadata": "e6e384289c9033f601edf7961586cb98793ce760e6c4d17663eac904bd880423",
          "withoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7",
          "linkedWithoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle",
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address,address)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracleProd",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:695"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)4988",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)4988": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "src/Escrow.sol:Escrow": {
        "src": "src/Escrow.sol:16",
        "version": {
          "withMetadata": "82fb32bdedaf3e2073186a98ce820b74fa68f9d180ce72b495cd2287464cd209",
          "withoutMetadata": "d46388d5f349ec8a8ce2142f7d82808476f96f382a612ea61d08ab15aa42ad45",
          "linkedWithoutMetadata": "d46388d5f349ec8a8ce2142f7d82808476f96f382a612ea61d08ab15aa42ad45"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize()",
          "escrow(string,address,uint256,address,uint256)",
          "submit(string,address)",
          "initiateDispute(string,address,address,uint256,string,address)",
          "hunterDisputeResponse(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "forceHunterPayout(string,address,address)",
          "payoutIfDispute(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address)",
          "payout(string,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Escrow",
            "src": "src/Escrow.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "bountyAmounts",
              "offset": 0,
              "slot": "201",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:20"
            },
            {
              "label": "progress",
              "offset": 0,
              "slot": "202",
              "type": "t_mapping(t_bytes32,t_enum(Status)7411)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:21"
            },
            {
              "label": "expiration",
              "offset": 0,
              "slot": "203",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:22"
            },
            {
              "label": "payoutExpiration",
              "offset": 0,
              "slot": "204",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:23"
            },
            {
              "label": "oracleInterface",
              "offset": 0,
              "slot": "205",
              "type": "t_contract(SkinnyOptimisticOracleInterface)5642",
              "contract": "Escrow",
              "src": "src/Escrow.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(SkinnyOptimisticOracleInterface)5642": {
              "label": "contract SkinnyOptimisticOracleInterface",
              "numberOfBytes": "20"
            },
            "t_enum(Status)7411": {
              "label": "enum Escrow.Status",
              "members": [
                "NoBounty",
                "Submitted",
                "DisputeInitiated",
                "DisputeRespondedTo",
                "Resolved"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_bytes32,t_enum(Status)7411)": {
              "label": "mapping(bytes32 => enum Escrow.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6790c53e7e0695f39f4e0c6bda9e1abc98f575b443cabd42e60a9a4a7e84be0f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "212d2428c6ab37f0ab2d169d286a9e45a3d62a7f01ef2af494353d430e72314f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable": {
        "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "f8f16fbd0c79839766fb6d86ebbd62f3046c3d3e4e5b5c4fdc2f0e14e8fc6f01",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "23ba05342c54ae025b437ab39645833d3094a1906cea1b11928232df298a6899",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "c50d5cce1fb1d11224b630f6ccca24db5a85f62ba4c243483052cb03fd212d05",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:12",
        "version": {
          "withMetadata": "65177886f4bd8d3cfe8c6dacb2a51f200d96396853a15e5fedc2af71ff27a51e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:AddressWhitelist": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:11",
        "version": {
          "withMetadata": "26953f9202c54d54d94d7bade13466cfb38c15ff8147511bfe7183d6cb0a2339",
          "withoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a",
          "linkedWithoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface"
        ],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_enum(Status)2463)",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:13"
            },
            {
              "label": "whitelistIndices",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(Status)2463": {
              "label": "enum AddressWhitelist.Status",
              "members": [
                "None",
                "In",
                "Out"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_enum(Status)2463)": {
              "label": "mapping(address => enum AddressWhitelist.Status)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:12",
        "version": {
          "withMetadata": "6862a3e82277eec331132deb9ed71f4c7ca8392a0693ad0150efba3c0a686024",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:10",
        "version": {
          "withMetadata": "ffdb627e30a25c072accab22b80df1d64ed234f0602316680894e80a5b01487b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:9",
        "version": {
          "withMetadata": "8c37862dfc40343090cab43cf64d25e61a26d11fc785d97496381cf0ca8d6874",
          "withoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e",
          "linkedWithoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lockable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_notEntered",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Testable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:Timer": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:7",
        "version": {
          "withMetadata": "7205f3d5fe504cfc8fef63363f53d9364622d132428150fa708bbfd9aa2c1420",
          "withoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311",
          "linkedWithoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Timer",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTime",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Timer",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OptimisticOracleConstraints": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:27",
        "version": {
          "withMetadata": "642d7f46d998d34fb28cda44cccc7f471cd8b9895fb7f4a1a0b299065cfdc305",
          "withoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8",
          "linkedWithoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:7",
        "version": {
          "withMetadata": "291293adb920a4e8de73cd1ab6469d3c18473be2b5f26055d8e8f794d47caaab",
          "withoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a",
          "linkedWithoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:FinderInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "changeImplementationAddress(bytes32,address)",
          "getImplementationAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:IdentifierWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSupportedIdentifier(bytes32)",
          "removeSupportedIdentifier(bytes32)",
          "isIdentifierSupported(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:OracleAncillaryInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint256,bytes)",
          "hasPrice(bytes32,uint256,bytes)",
          "getPrice(bytes32,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:StoreInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "payOracleFees()",
          "payOracleFeesErc20(address,(uint256))",
          "computeRegularFee(uint256,uint256,(uint256))",
          "computeFinalFee(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:OptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "defaultLiveness()",
          "finder()",
          "getCurrentTime()",
          "requestPrice(bytes32,uint256,bytes,address,uint256)",
          "setBond(bytes32,uint256,bytes,uint256)",
          "setRefundOnDispute(bytes32,uint256,bytes)",
          "setCustomLiveness(bytes32,uint256,bytes,uint256)",
          "proposePriceFor(address,address,bytes32,uint256,bytes,int256)",
          "proposePrice(address,bytes32,uint256,bytes,int256)",
          "disputePriceFor(address,address,bytes32,uint256,bytes)",
          "disputePrice(address,bytes32,uint256,bytes)",
          "settleAndGetPrice(bytes32,uint256,bytes)",
          "settle(address,bytes32,uint256,bytes)",
          "getRequest(address,bytes32,uint256,bytes)",
          "getState(address,bytes32,uint256,bytes)",
          "hasPrice(address,bytes32,uint256,bytes)",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "requests",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(Request)5202_storage)",
              "contract": "OptimisticOracleInterface",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:90"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)1402": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Request)5202_storage)": {
              "label": "mapping(bytes32 => struct OptimisticOracleInterface.Request)",
              "numberOfBytes": "32"
            },
            "t_struct(Request)5202_storage": {
              "label": "struct OptimisticOracleInterface.Request",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "disputer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "currency",
                  "type": "t_contract(IERC20)1402",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "settled",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "refundOnDispute",
                  "type": "t_bool",
                  "offset": 21,
                  "slot": "2"
                },
                {
                  "label": "proposedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "resolvedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "expirationTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "reward",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "finalFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "bond",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "customLiveness",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                }
              ],
              "numberOfBytes": "320"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:OptimisticRequester": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:31",
        "inherit": [],
        "libraries": [],
        "methods": [
          "priceProposed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceDisputed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceSettled(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:79",
        "version": {
          "withMetadata": "6b0b37d85e6ed6050a9457d2887b2b736fc77c388f0203aa7c49c416a6143ea4",
          "withoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41",
          "linkedWithoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address",
          "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint",
          "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces",
          "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData"
        ],
        "methods": [
          "(uint256,address,address)",
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracle",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:129"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)4988",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)4988": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracleProd": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:694",
        "version": {
          "withMetadata": "5fa8ef9dc62335a0d789ceec1fcc7e9ab879da1475cefda5f7da8164a3f2f9e0",
          "withoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7",
          "linkedWithoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle",
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address,address)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracleProd",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:695"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)4988",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)4988": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "src/Escrow.sol:Escrow": {
        "src": "src/Escrow.sol:16",
        "version": {
          "withMetadata": "d57db7021ff6e6e07dbfa86461d7864952df19c5a1d04316c30598a2a761e84a",
          "withoutMetadata": "d46388d5f349ec8a8ce2142f7d82808476f96f382a612ea61d08ab15aa42ad45",
          "linkedWithoutMetadata": "d46388d5f349ec8a8ce2142f7d82808476f96f382a612ea61d08ab15aa42ad45"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize()",
          "escrow(string,address,uint256,address,uint256)",
          "submit(string,address)",
          "initiateDispute(string,address,address,uint256,string,address)",
          "hunterDisputeResponse(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "forceHunterPayout(string,address,address)",
          "payoutIfDispute(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address)",
          "payout(string,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Escrow",
            "src": "src/Escrow.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "bountyAmounts",
              "offset": 0,
              "slot": "201",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:20"
            },
            {
              "label": "progress",
              "offset": 0,
              "slot": "202",
              "type": "t_mapping(t_bytes32,t_enum(Status)7411)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:21"
            },
            {
              "label": "expiration",
              "offset": 0,
              "slot": "203",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:22"
            },
            {
              "label": "payoutExpiration",
              "offset": 0,
              "slot": "204",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:23"
            },
            {
              "label": "oracleInterface",
              "offset": 0,
              "slot": "205",
              "type": "t_contract(SkinnyOptimisticOracleInterface)5642",
              "contract": "Escrow",
              "src": "src/Escrow.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(SkinnyOptimisticOracleInterface)5642": {
              "label": "contract SkinnyOptimisticOracleInterface",
              "numberOfBytes": "20"
            },
            "t_enum(Status)7411": {
              "label": "enum Escrow.Status",
              "members": [
                "NoBounty",
                "Submitted",
                "DisputeInitiated",
                "DisputeRespondedTo",
                "Resolved"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_bytes32,t_enum(Status)7411)": {
              "label": "mapping(bytes32 => enum Escrow.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "c5bd33e9348c4d50a7b790823f0c69a3feac94615c762e12518b96eab1f30bab",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "fcf795bee1b59cff29d12e29431898be63f70269d46d2905518ba4440ab52a2b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable": {
        "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "af3926cfdadbed789b1eb14729759a60eb0943ae2c24eb2554baa47cd3a34875",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "181254b2ec5884ec51231061300534f0491eb7b4a46c8fc85fc2f7cf5ec0313d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "2f7b268f3a3f1abc454314e88c56427861278a58005339b73a0117c286312af6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:12",
        "version": {
          "withMetadata": "f896dfbf64a2ba48c1be5c6ab3bbb617d4747a2d68440d379fa35e19f257ae9b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:AddressWhitelist": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:11",
        "version": {
          "withMetadata": "65150975fbd0bc0c99958d6096eee26ade4a7d899bfb076027c49e20bf70b870",
          "withoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a",
          "linkedWithoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface"
        ],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_enum(Status)2463)",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:13"
            },
            {
              "label": "whitelistIndices",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(Status)2463": {
              "label": "enum AddressWhitelist.Status",
              "members": [
                "None",
                "In",
                "Out"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_enum(Status)2463)": {
              "label": "mapping(address => enum AddressWhitelist.Status)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:12",
        "version": {
          "withMetadata": "08bb4da6c4e6857ff9847845f12ff43876c91644e4d58a381cebe0ebed52803c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:10",
        "version": {
          "withMetadata": "382bf1b3482e09fb40778331f4a286f3de49e498f89dd74461da5f46da89a3e8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:9",
        "version": {
          "withMetadata": "9465a7695530c953939d7f8fe1c0a2aae9c298f2199739dfb27bd7ca31332cc5",
          "withoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e",
          "linkedWithoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lockable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_notEntered",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Testable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:Timer": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:7",
        "version": {
          "withMetadata": "92349df441f1ba72b677620aaaf014bdce6e8a99a574e743f85240324eba2b04",
          "withoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311",
          "linkedWithoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Timer",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTime",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Timer",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OptimisticOracleConstraints": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:27",
        "version": {
          "withMetadata": "217dabf8bf20a0bc35d59e8eb62dcc4beee8783cced9ca771e6c680447973683",
          "withoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8",
          "linkedWithoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:7",
        "version": {
          "withMetadata": "0ad48219a4d48336eda93e459d9cbb817bfb548dd193e9bb903474e1de743527",
          "withoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a",
          "linkedWithoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:FinderInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "changeImplementationAddress(bytes32,address)",
          "getImplementationAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:IdentifierWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSupportedIdentifier(bytes32)",
          "removeSupportedIdentifier(bytes32)",
          "isIdentifierSupported(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:OracleAncillaryInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint256,bytes)",
          "hasPrice(bytes32,uint256,bytes)",
          "getPrice(bytes32,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:StoreInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "payOracleFees()",
          "payOracleFeesErc20(address,(uint256))",
          "computeRegularFee(uint256,uint256,(uint256))",
          "computeFinalFee(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:OptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "defaultLiveness()",
          "finder()",
          "getCurrentTime()",
          "requestPrice(bytes32,uint256,bytes,address,uint256)",
          "setBond(bytes32,uint256,bytes,uint256)",
          "setRefundOnDispute(bytes32,uint256,bytes)",
          "setCustomLiveness(bytes32,uint256,bytes,uint256)",
          "proposePriceFor(address,address,bytes32,uint256,bytes,int256)",
          "proposePrice(address,bytes32,uint256,bytes,int256)",
          "disputePriceFor(address,address,bytes32,uint256,bytes)",
          "disputePrice(address,bytes32,uint256,bytes)",
          "settleAndGetPrice(bytes32,uint256,bytes)",
          "settle(address,bytes32,uint256,bytes)",
          "getRequest(address,bytes32,uint256,bytes)",
          "getState(address,bytes32,uint256,bytes)",
          "hasPrice(address,bytes32,uint256,bytes)",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "requests",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(Request)5202_storage)",
              "contract": "OptimisticOracleInterface",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:90"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)1402": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Request)5202_storage)": {
              "label": "mapping(bytes32 => struct OptimisticOracleInterface.Request)",
              "numberOfBytes": "32"
            },
            "t_struct(Request)5202_storage": {
              "label": "struct OptimisticOracleInterface.Request",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "disputer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "currency",
                  "type": "t_contract(IERC20)1402",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "settled",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "refundOnDispute",
                  "type": "t_bool",
                  "offset": 21,
                  "slot": "2"
                },
                {
                  "label": "proposedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "resolvedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "expirationTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "reward",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "finalFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "bond",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "customLiveness",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                }
              ],
              "numberOfBytes": "320"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:OptimisticRequester": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:31",
        "inherit": [],
        "libraries": [],
        "methods": [
          "priceProposed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceDisputed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceSettled(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:79",
        "version": {
          "withMetadata": "08704458d1650c9812e6380e4987ee981b1cfce92095da9fd4edac3a9513bad9",
          "withoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41",
          "linkedWithoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address",
          "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint",
          "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces",
          "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData"
        ],
        "methods": [
          "(uint256,address,address)",
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracle",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:129"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)4988",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)4988": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracleProd": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:694",
        "version": {
          "withMetadata": "c1f4a35f2e79c31adbee300e566900ba94daa18d4e30f0a04ab4a2a2fd7b76c6",
          "withoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7",
          "linkedWithoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle",
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address,address)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracleProd",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:695"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)4988",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)4988": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "src/Escrow.sol:Escrow": {
        "src": "src/Escrow.sol:16",
        "version": {
          "withMetadata": "13b07476c6dd8043151c1534bed6ce43382634571f77800a15d91f7c21f7db65",
          "withoutMetadata": "d46388d5f349ec8a8ce2142f7d82808476f96f382a612ea61d08ab15aa42ad45",
          "linkedWithoutMetadata": "d46388d5f349ec8a8ce2142f7d82808476f96f382a612ea61d08ab15aa42ad45"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize()",
          "escrow(string,address,uint256,address,uint256)",
          "submit(string,address)",
          "initiateDispute(string,address,address,uint256,string,address)",
          "hunterDisputeResponse(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "forceHunterPayout(string,address,address)",
          "payoutIfDispute(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address)",
          "payout(string,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Escrow",
            "src": "src/Escrow.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "bountyAmounts",
              "offset": 0,
              "slot": "201",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:20"
            },
            {
              "label": "progress",
              "offset": 0,
              "slot": "202",
              "type": "t_mapping(t_bytes32,t_enum(Status)7411)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:21"
            },
            {
              "label": "expiration",
              "offset": 0,
              "slot": "203",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:22"
            },
            {
              "label": "payoutExpiration",
              "offset": 0,
              "slot": "204",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:23"
            },
            {
              "label": "oracleInterface",
              "offset": 0,
              "slot": "205",
              "type": "t_contract(SkinnyOptimisticOracleInterface)5642",
              "contract": "Escrow",
              "src": "src/Escrow.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(SkinnyOptimisticOracleInterface)5642": {
              "label": "contract SkinnyOptimisticOracleInterface",
              "numberOfBytes": "20"
            },
            "t_enum(Status)7411": {
              "label": "enum Escrow.Status",
              "members": [
                "NoBounty",
                "Submitted",
                "DisputeInitiated",
                "DisputeRespondedTo",
                "Resolved"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_bytes32,t_enum(Status)7411)": {
              "label": "mapping(bytes32 => enum Escrow.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5559d95a759546001198bcd94a1e4075b0e45a4fcc834a7de5ad30db7141012d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "d769b7a47c9ba05e17ab6f01c43cac118ce0c411a0b7136756345a95c841835e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable": {
        "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:20",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "287d425ec84b5c335c653e6237289eb0f9aea90ee8ea1586cf31db40e1686cd5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "c8f8b30cbc7233ac0c0518ee27ad81e1e0d9ba23770c1a29492fe08651dd480f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "bedb0b3778d3c67da8685573e567a70805d654f69e814259fa2bdc3407cbf496",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:12",
        "version": {
          "withMetadata": "f4ae5d655b45a9855251dc92d405a985719b4520c11dafae89808538f39df1cf",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:AddressWhitelist": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:11",
        "version": {
          "withMetadata": "a80cd084ffd412e20ef051dcddd1a29e7685608a81613341fbd165cab0340a93",
          "withoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a",
          "linkedWithoutMetadata": "2d059708e6b196182ffef6f95e9d6b76e8569698a37304f34960aad650c84c1a"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface"
        ],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_enum(Status)2463)",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:13"
            },
            {
              "label": "whitelistIndices",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "AddressWhitelist",
              "src": "lib/protocol/packages/core/contracts/common/implementation/AddressWhitelist.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(Status)2463": {
              "label": "enum AddressWhitelist.Status",
              "members": [
                "None",
                "In",
                "Out"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_enum(Status)2463)": {
              "label": "mapping(address => enum AddressWhitelist.Status)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:12",
        "version": {
          "withMetadata": "e4727e634b47a4699e34ba21accedfe9fe221a7b7263869ed5064c3f68f7f422",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:10",
        "version": {
          "withMetadata": "b88717e9884563cc23b4171eec5795794e2176c443a7b4785146ad5fdeed5cee",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol:SignedSafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:9",
        "version": {
          "withMetadata": "2f860552599e30b3c004d96a5997f55cf640b0272158e5086fedf42f810770af",
          "withoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e",
          "linkedWithoutMetadata": "b2da6fe5c52d3b8ab978749a7769a89610f331aa86e302770caf2ee8f0adeb3e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lockable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_notEntered",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Testable",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:Timer": {
        "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:7",
        "version": {
          "withMetadata": "8f1b0a6ae435e491a7ba9363590213bbc8c1e37b21bf9dc0074688422e4b8519",
          "withoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311",
          "linkedWithoutMetadata": "4bd41ab4c83c12d276bde8fe89bd54732dc1cc008f49b9022e7fe5170eb43311"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "setCurrentTime(uint256)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Timer",
            "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTime",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Timer",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Timer.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:AddressWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/common/interfaces/AddressWhitelistInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addToWhitelist(address)",
          "removeFromWhitelist(address)",
          "isOnWhitelist(address)",
          "getWhitelist()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OptimisticOracleConstraints": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:27",
        "version": {
          "withMetadata": "2c9ba6c02ad54d7b6f5557bc62908c4b2ef4d5e50181757e51f9ed2a730f99b1",
          "withoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8",
          "linkedWithoutMetadata": "0ac509cf50dc2fa9b0e3c1ab73623973bf120b69e6aed1e8bab70c4caf0c47c8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:7",
        "version": {
          "withMetadata": "1f0e2bfcaa96f2eb66ee7e23d131d42c75f1afcb2f362af7d66ef2adad36236e",
          "withoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a",
          "linkedWithoutMetadata": "980d298e9ae87059707cdb287b135263c1ed85d26cedb372afeba6ddb1ce4b4a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:FinderInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "changeImplementationAddress(bytes32,address)",
          "getImplementationAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:IdentifierWhitelistInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSupportedIdentifier(bytes32)",
          "removeSupportedIdentifier(bytes32)",
          "isIdentifierSupported(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:OracleAncillaryInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint256,bytes)",
          "hasPrice(bytes32,uint256,bytes)",
          "getPrice(bytes32,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:StoreInterface": {
        "src": "lib/protocol/packages/core/contracts/data-verification-mechanism/interfaces/StoreInterface.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "payOracleFees()",
          "payOracleFeesErc20(address,(uint256))",
          "computeRegularFee(uint256,uint256,(uint256))",
          "computeFinalFee(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:OptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "defaultLiveness()",
          "finder()",
          "getCurrentTime()",
          "requestPrice(bytes32,uint256,bytes,address,uint256)",
          "setBond(bytes32,uint256,bytes,uint256)",
          "setRefundOnDispute(bytes32,uint256,bytes)",
          "setCustomLiveness(bytes32,uint256,bytes,uint256)",
          "proposePriceFor(address,address,bytes32,uint256,bytes,int256)",
          "proposePrice(address,bytes32,uint256,bytes,int256)",
          "disputePriceFor(address,address,bytes32,uint256,bytes)",
          "disputePrice(address,bytes32,uint256,bytes)",
          "settleAndGetPrice(bytes32,uint256,bytes)",
          "settle(address,bytes32,uint256,bytes)",
          "getRequest(address,bytes32,uint256,bytes)",
          "getState(address,bytes32,uint256,bytes)",
          "hasPrice(address,bytes32,uint256,bytes)",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "requests",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(Request)5202_storage)",
              "contract": "OptimisticOracleInterface",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/OptimisticOracleInterface.sol:90"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)1402": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Request)5202_storage)": {
              "label": "mapping(bytes32 => struct OptimisticOracleInterface.Request)",
              "numberOfBytes": "32"
            },
            "t_struct(Request)5202_storage": {
              "label": "struct OptimisticOracleInterface.Request",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "disputer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "currency",
                  "type": "t_contract(IERC20)1402",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "settled",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "refundOnDispute",
                  "type": "t_bool",
                  "offset": 21,
                  "slot": "2"
                },
                {
                  "label": "proposedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "resolvedPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "expirationTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "reward",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "finalFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "bond",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "customLiveness",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                }
              ],
              "numberOfBytes": "320"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:OptimisticRequester": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:31",
        "inherit": [],
        "libraries": [],
        "methods": [
          "priceProposed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceDisputed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "priceSettled(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:79",
        "version": {
          "withMetadata": "5e200b150acf4feddb90a2efca0bab3c3dfbd46b70ffcf63e46311f296f52db8",
          "withoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41",
          "linkedWithoutMetadata": "a75231d8eca2719ed7c0bd95880673d6d61a4bf61188639c31d18140cdf70e41"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:SafeMath",
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address",
          "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol:FixedPoint",
          "lib/protocol/packages/core/contracts/data-verification-mechanism/implementation/Constants.sol:OracleInterfaces",
          "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol:AncillaryData"
        ],
        "methods": [
          "(uint256,address,address)",
          "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
          "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
          "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
          "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
          "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
          "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "stampAncillaryData(bytes,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracle",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:129"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)4988",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)4988": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracleProd": {
        "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:694",
        "version": {
          "withMetadata": "0863c233e7b175b7219272697dfecfaec36d813bd4d7e5ad16f50f5cc0cd1edf",
          "withoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7",
          "linkedWithoutMetadata": "2c8c51162f12addce21e11f52173bb59333f83511e239516c058010d1ec645f7"
        },
        "inherit": [
          "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:SkinnyOptimisticOracle",
          "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:Lockable",
          "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:Testable",
          "lib/protocol/packages/core/contracts/optimistic-oracle/interfaces/SkinnyOptimisticOracleInterface.sol:SkinnyOptimisticOracleInterface"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address,address)",
          "getCurrentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SkinnyOptimisticOracleProd",
            "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:695"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "timerAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Testable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Testable.sol:12"
            },
            {
              "label": "_notEntered",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Lockable",
              "src": "lib/protocol/packages/core/contracts/common/implementation/Lockable.sol:10"
            },
            {
              "label": "requests",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:115"
            },
            {
              "label": "finder",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FinderInterface)4988",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:118"
            },
            {
              "label": "defaultLiveness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SkinnyOptimisticOracle",
              "src": "lib/protocol/packages/core/contracts/optimistic-oracle/previous-versions/SkinnyOptimisticOracle.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FinderInterface)4988": {
              "label": "contract FinderInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "src/Escrow.sol:Escrow": {
        "src": "src/Escrow.sol:16",
        "version": {
          "withMetadata": "bfa4ea10ddd7a4ed57adee7633abdbab06876b05d3c33025ea18e3a6d9dbf17c",
          "withoutMetadata": "d46388d5f349ec8a8ce2142f7d82808476f96f382a612ea61d08ab15aa42ad45",
          "linkedWithoutMetadata": "d46388d5f349ec8a8ce2142f7d82808476f96f382a612ea61d08ab15aa42ad45"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize()",
          "escrow(string,address,uint256,address,uint256)",
          "submit(string,address)",
          "initiateDispute(string,address,address,uint256,string,address)",
          "hunterDisputeResponse(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
          "forceHunterPayout(string,address,address)",
          "payoutIfDispute(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address)",
          "payout(string,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Escrow",
            "src": "src/Escrow.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "bountyAmounts",
              "offset": 0,
              "slot": "201",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:20"
            },
            {
              "label": "progress",
              "offset": 0,
              "slot": "202",
              "type": "t_mapping(t_bytes32,t_enum(Status)7411)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:21"
            },
            {
              "label": "expiration",
              "offset": 0,
              "slot": "203",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:22"
            },
            {
              "label": "payoutExpiration",
              "offset": 0,
              "slot": "204",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Escrow",
              "src": "src/Escrow.sol:23"
            },
            {
              "label": "oracleInterface",
              "offset": 0,
              "slot": "205",
              "type": "t_contract(SkinnyOptimisticOracleInterface)5642",
              "contract": "Escrow",
              "src": "src/Escrow.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(SkinnyOptimisticOracleInterface)5642": {
              "label": "contract SkinnyOptimisticOracleInterface",
              "numberOfBytes": "20"
            },
            "t_enum(Status)7411": {
              "label": "enum Escrow.Status",
              "members": [
                "NoBounty",
                "Submitted",
                "DisputeInitiated",
                "DisputeRespondedTo",
                "Resolved"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_bytes32,t_enum(Status)7411)": {
              "label": "mapping(bytes32 => enum Escrow.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    }
  ]
}