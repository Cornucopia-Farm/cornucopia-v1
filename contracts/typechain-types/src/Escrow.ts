/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace SkinnyOptimisticOracleInterface {
  export type RequestStruct = {
    proposer: PromiseOrValue<string>;
    disputer: PromiseOrValue<string>;
    currency: PromiseOrValue<string>;
    settled: PromiseOrValue<boolean>;
    proposedPrice: PromiseOrValue<BigNumberish>;
    resolvedPrice: PromiseOrValue<BigNumberish>;
    expirationTime: PromiseOrValue<BigNumberish>;
    reward: PromiseOrValue<BigNumberish>;
    finalFee: PromiseOrValue<BigNumberish>;
    bond: PromiseOrValue<BigNumberish>;
    customLiveness: PromiseOrValue<BigNumberish>;
  };

  export type RequestStructOutput = [
    string,
    string,
    string,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    proposer: string;
    disputer: string;
    currency: string;
    settled: boolean;
    proposedPrice: BigNumber;
    resolvedPrice: BigNumber;
    expirationTime: BigNumber;
    reward: BigNumber;
    finalFee: BigNumber;
    bond: BigNumber;
    customLiveness: BigNumber;
  };
}

export interface EscrowInterface extends utils.Interface {
  functions: {
    "bountyAmounts(bytes32)": FunctionFragment;
    "escrow(string,address,uint256,address,uint256)": FunctionFragment;
    "expiration(bytes32)": FunctionFragment;
    "forceHunterPayout(string,address,address)": FunctionFragment;
    "hunterDisputeResponse(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "initialize()": FunctionFragment;
    "initiateDispute(string,address,address,uint256,string,address)": FunctionFragment;
    "oracleInterface()": FunctionFragment;
    "owner()": FunctionFragment;
    "payout(string,address,address)": FunctionFragment;
    "payoutExpiration(bytes32)": FunctionFragment;
    "payoutIfDispute(string,address,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address)": FunctionFragment;
    "progress(bytes32)": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "submit(string,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bountyAmounts"
      | "escrow"
      | "expiration"
      | "forceHunterPayout"
      | "hunterDisputeResponse"
      | "initialize"
      | "initiateDispute"
      | "oracleInterface"
      | "owner"
      | "payout"
      | "payoutExpiration"
      | "payoutIfDispute"
      | "progress"
      | "proxiableUUID"
      | "renounceOwnership"
      | "submit"
      | "transferOwnership"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bountyAmounts",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "escrow",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "expiration",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "forceHunterPayout",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hunterDisputeResponse",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      SkinnyOptimisticOracleInterface.RequestStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initiateDispute",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "oracleInterface",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payout",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "payoutExpiration",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "payoutIfDispute",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      SkinnyOptimisticOracleInterface.RequestStruct,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "progress",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submit",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "bountyAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "escrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "expiration", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forceHunterPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hunterDisputeResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initiateDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payout", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payoutExpiration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payoutIfDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "progress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "submit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "DisputeRespondedTo(address,address,string,string)": EventFragment;
    "Disputed(address,address,string,uint32,string)": EventFragment;
    "Escrowed(address,address,string,string)": EventFragment;
    "FundsForceSentToHunter(address,address,string,string)": EventFragment;
    "FundsSent(address,address,string,string)": EventFragment;
    "FundsWithdrawnToCreator(address,address,string,string)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Resolved(address,address,string,address,string)": EventFragment;
    "Submitted(address,address,string,string)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisputeRespondedTo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Disputed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Escrowed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsForceSentToHunter"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsWithdrawnToCreator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Resolved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Submitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface DisputeRespondedToEventObject {
  creator: string;
  hunter: string;
  bountyAppId: string;
  message: string;
}
export type DisputeRespondedToEvent = TypedEvent<
  [string, string, string, string],
  DisputeRespondedToEventObject
>;

export type DisputeRespondedToEventFilter =
  TypedEventFilter<DisputeRespondedToEvent>;

export interface DisputedEventObject {
  creator: string;
  hunter: string;
  bountyAppId: string;
  timestamp: number;
  message: string;
}
export type DisputedEvent = TypedEvent<
  [string, string, string, number, string],
  DisputedEventObject
>;

export type DisputedEventFilter = TypedEventFilter<DisputedEvent>;

export interface EscrowedEventObject {
  creator: string;
  hunter: string;
  bountyAppId: string;
  message: string;
}
export type EscrowedEvent = TypedEvent<
  [string, string, string, string],
  EscrowedEventObject
>;

export type EscrowedEventFilter = TypedEventFilter<EscrowedEvent>;

export interface FundsForceSentToHunterEventObject {
  creator: string;
  hunter: string;
  bountyAppId: string;
  message: string;
}
export type FundsForceSentToHunterEvent = TypedEvent<
  [string, string, string, string],
  FundsForceSentToHunterEventObject
>;

export type FundsForceSentToHunterEventFilter =
  TypedEventFilter<FundsForceSentToHunterEvent>;

export interface FundsSentEventObject {
  creator: string;
  hunter: string;
  bountyAppId: string;
  message: string;
}
export type FundsSentEvent = TypedEvent<
  [string, string, string, string],
  FundsSentEventObject
>;

export type FundsSentEventFilter = TypedEventFilter<FundsSentEvent>;

export interface FundsWithdrawnToCreatorEventObject {
  creator: string;
  hunter: string;
  bountyAppId: string;
  message: string;
}
export type FundsWithdrawnToCreatorEvent = TypedEvent<
  [string, string, string, string],
  FundsWithdrawnToCreatorEventObject
>;

export type FundsWithdrawnToCreatorEventFilter =
  TypedEventFilter<FundsWithdrawnToCreatorEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ResolvedEventObject {
  creator: string;
  hunter: string;
  bountyAppId: string;
  winner: string;
  message: string;
}
export type ResolvedEvent = TypedEvent<
  [string, string, string, string, string],
  ResolvedEventObject
>;

export type ResolvedEventFilter = TypedEventFilter<ResolvedEvent>;

export interface SubmittedEventObject {
  creator: string;
  hunter: string;
  bountyAppId: string;
  message: string;
}
export type SubmittedEvent = TypedEvent<
  [string, string, string, string],
  SubmittedEventObject
>;

export type SubmittedEventFilter = TypedEventFilter<SubmittedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface Escrow extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EscrowInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bountyAmounts(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    escrow(
      _bountyAppId: PromiseOrValue<string>,
      _hunter: PromiseOrValue<string>,
      _expiration: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    expiration(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    forceHunterPayout(
      _bountyAppId: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hunterDisputeResponse(
      _bountyAppId: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      _ancillaryData: PromiseOrValue<BytesLike>,
      _request: SkinnyOptimisticOracleInterface.RequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initiateDispute(
      _bountyAppId: PromiseOrValue<string>,
      _hunter: PromiseOrValue<string>,
      _oracleAddress: PromiseOrValue<string>,
      _bondAmt: PromiseOrValue<BigNumberish>,
      _ancillaryData: PromiseOrValue<string>,
      _currency: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    oracleInterface(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    payout(
      _bountyAppId: PromiseOrValue<string>,
      _hunter: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    payoutExpiration(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    payoutIfDispute(
      _bountyAppId: PromiseOrValue<string>,
      _hunter: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      _ancillaryData: PromiseOrValue<BytesLike>,
      _request: SkinnyOptimisticOracleInterface.RequestStruct,
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    progress(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submit(
      _bountyAppId: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  bountyAmounts(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  escrow(
    _bountyAppId: PromiseOrValue<string>,
    _hunter: PromiseOrValue<string>,
    _expiration: PromiseOrValue<BigNumberish>,
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  expiration(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  forceHunterPayout(
    _bountyAppId: PromiseOrValue<string>,
    _creator: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hunterDisputeResponse(
    _bountyAppId: PromiseOrValue<string>,
    _creator: PromiseOrValue<string>,
    _timestamp: PromiseOrValue<BigNumberish>,
    _ancillaryData: PromiseOrValue<BytesLike>,
    _request: SkinnyOptimisticOracleInterface.RequestStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initiateDispute(
    _bountyAppId: PromiseOrValue<string>,
    _hunter: PromiseOrValue<string>,
    _oracleAddress: PromiseOrValue<string>,
    _bondAmt: PromiseOrValue<BigNumberish>,
    _ancillaryData: PromiseOrValue<string>,
    _currency: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  oracleInterface(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  payout(
    _bountyAppId: PromiseOrValue<string>,
    _hunter: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  payoutExpiration(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  payoutIfDispute(
    _bountyAppId: PromiseOrValue<string>,
    _hunter: PromiseOrValue<string>,
    _timestamp: PromiseOrValue<BigNumberish>,
    _ancillaryData: PromiseOrValue<BytesLike>,
    _request: SkinnyOptimisticOracleInterface.RequestStruct,
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  progress(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<number>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submit(
    _bountyAppId: PromiseOrValue<string>,
    _creator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bountyAmounts(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    escrow(
      _bountyAppId: PromiseOrValue<string>,
      _hunter: PromiseOrValue<string>,
      _expiration: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    expiration(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    forceHunterPayout(
      _bountyAppId: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hunterDisputeResponse(
      _bountyAppId: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      _ancillaryData: PromiseOrValue<BytesLike>,
      _request: SkinnyOptimisticOracleInterface.RequestStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(overrides?: CallOverrides): Promise<void>;

    initiateDispute(
      _bountyAppId: PromiseOrValue<string>,
      _hunter: PromiseOrValue<string>,
      _oracleAddress: PromiseOrValue<string>,
      _bondAmt: PromiseOrValue<BigNumberish>,
      _ancillaryData: PromiseOrValue<string>,
      _currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oracleInterface(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    payout(
      _bountyAppId: PromiseOrValue<string>,
      _hunter: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    payoutExpiration(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    payoutIfDispute(
      _bountyAppId: PromiseOrValue<string>,
      _hunter: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      _ancillaryData: PromiseOrValue<BytesLike>,
      _request: SkinnyOptimisticOracleInterface.RequestStruct,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    progress(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<number>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    submit(
      _bountyAppId: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "DisputeRespondedTo(address,address,string,string)"(
      creator?: PromiseOrValue<string> | null,
      hunter?: PromiseOrValue<string> | null,
      bountyAppId?: PromiseOrValue<string> | null,
      message?: null
    ): DisputeRespondedToEventFilter;
    DisputeRespondedTo(
      creator?: PromiseOrValue<string> | null,
      hunter?: PromiseOrValue<string> | null,
      bountyAppId?: PromiseOrValue<string> | null,
      message?: null
    ): DisputeRespondedToEventFilter;

    "Disputed(address,address,string,uint32,string)"(
      creator?: PromiseOrValue<string> | null,
      hunter?: PromiseOrValue<string> | null,
      bountyAppId?: PromiseOrValue<string> | null,
      timestamp?: null,
      message?: null
    ): DisputedEventFilter;
    Disputed(
      creator?: PromiseOrValue<string> | null,
      hunter?: PromiseOrValue<string> | null,
      bountyAppId?: PromiseOrValue<string> | null,
      timestamp?: null,
      message?: null
    ): DisputedEventFilter;

    "Escrowed(address,address,string,string)"(
      creator?: PromiseOrValue<string> | null,
      hunter?: PromiseOrValue<string> | null,
      bountyAppId?: PromiseOrValue<string> | null,
      message?: null
    ): EscrowedEventFilter;
    Escrowed(
      creator?: PromiseOrValue<string> | null,
      hunter?: PromiseOrValue<string> | null,
      bountyAppId?: PromiseOrValue<string> | null,
      message?: null
    ): EscrowedEventFilter;

    "FundsForceSentToHunter(address,address,string,string)"(
      creator?: PromiseOrValue<string> | null,
      hunter?: PromiseOrValue<string> | null,
      bountyAppId?: PromiseOrValue<string> | null,
      message?: null
    ): FundsForceSentToHunterEventFilter;
    FundsForceSentToHunter(
      creator?: PromiseOrValue<string> | null,
      hunter?: PromiseOrValue<string> | null,
      bountyAppId?: PromiseOrValue<string> | null,
      message?: null
    ): FundsForceSentToHunterEventFilter;

    "FundsSent(address,address,string,string)"(
      creator?: PromiseOrValue<string> | null,
      hunter?: PromiseOrValue<string> | null,
      bountyAppId?: PromiseOrValue<string> | null,
      message?: null
    ): FundsSentEventFilter;
    FundsSent(
      creator?: PromiseOrValue<string> | null,
      hunter?: PromiseOrValue<string> | null,
      bountyAppId?: PromiseOrValue<string> | null,
      message?: null
    ): FundsSentEventFilter;

    "FundsWithdrawnToCreator(address,address,string,string)"(
      creator?: PromiseOrValue<string> | null,
      hunter?: PromiseOrValue<string> | null,
      bountyAppId?: PromiseOrValue<string> | null,
      message?: null
    ): FundsWithdrawnToCreatorEventFilter;
    FundsWithdrawnToCreator(
      creator?: PromiseOrValue<string> | null,
      hunter?: PromiseOrValue<string> | null,
      bountyAppId?: PromiseOrValue<string> | null,
      message?: null
    ): FundsWithdrawnToCreatorEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Resolved(address,address,string,address,string)"(
      creator?: PromiseOrValue<string> | null,
      hunter?: PromiseOrValue<string> | null,
      bountyAppId?: PromiseOrValue<string> | null,
      winner?: null,
      message?: null
    ): ResolvedEventFilter;
    Resolved(
      creator?: PromiseOrValue<string> | null,
      hunter?: PromiseOrValue<string> | null,
      bountyAppId?: PromiseOrValue<string> | null,
      winner?: null,
      message?: null
    ): ResolvedEventFilter;

    "Submitted(address,address,string,string)"(
      creator?: PromiseOrValue<string> | null,
      hunter?: PromiseOrValue<string> | null,
      bountyAppId?: PromiseOrValue<string> | null,
      message?: null
    ): SubmittedEventFilter;
    Submitted(
      creator?: PromiseOrValue<string> | null,
      hunter?: PromiseOrValue<string> | null,
      bountyAppId?: PromiseOrValue<string> | null,
      message?: null
    ): SubmittedEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
  };

  estimateGas: {
    bountyAmounts(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    escrow(
      _bountyAppId: PromiseOrValue<string>,
      _hunter: PromiseOrValue<string>,
      _expiration: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    expiration(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    forceHunterPayout(
      _bountyAppId: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hunterDisputeResponse(
      _bountyAppId: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      _ancillaryData: PromiseOrValue<BytesLike>,
      _request: SkinnyOptimisticOracleInterface.RequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initiateDispute(
      _bountyAppId: PromiseOrValue<string>,
      _hunter: PromiseOrValue<string>,
      _oracleAddress: PromiseOrValue<string>,
      _bondAmt: PromiseOrValue<BigNumberish>,
      _ancillaryData: PromiseOrValue<string>,
      _currency: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    oracleInterface(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    payout(
      _bountyAppId: PromiseOrValue<string>,
      _hunter: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    payoutExpiration(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    payoutIfDispute(
      _bountyAppId: PromiseOrValue<string>,
      _hunter: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      _ancillaryData: PromiseOrValue<BytesLike>,
      _request: SkinnyOptimisticOracleInterface.RequestStruct,
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    progress(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submit(
      _bountyAppId: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bountyAmounts(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    escrow(
      _bountyAppId: PromiseOrValue<string>,
      _hunter: PromiseOrValue<string>,
      _expiration: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    expiration(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    forceHunterPayout(
      _bountyAppId: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hunterDisputeResponse(
      _bountyAppId: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      _ancillaryData: PromiseOrValue<BytesLike>,
      _request: SkinnyOptimisticOracleInterface.RequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initiateDispute(
      _bountyAppId: PromiseOrValue<string>,
      _hunter: PromiseOrValue<string>,
      _oracleAddress: PromiseOrValue<string>,
      _bondAmt: PromiseOrValue<BigNumberish>,
      _ancillaryData: PromiseOrValue<string>,
      _currency: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    oracleInterface(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payout(
      _bountyAppId: PromiseOrValue<string>,
      _hunter: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    payoutExpiration(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    payoutIfDispute(
      _bountyAppId: PromiseOrValue<string>,
      _hunter: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      _ancillaryData: PromiseOrValue<BytesLike>,
      _request: SkinnyOptimisticOracleInterface.RequestStruct,
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    progress(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submit(
      _bountyAppId: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
