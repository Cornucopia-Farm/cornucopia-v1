{
  "compiler": {
    "version": "0.8.13+commit.abaa5c0e"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "interfaceName",
            "type": "bytes32"
          },
          {
            "internalType": "address",
            "name": "implementationAddress",
            "type": "address"
          }
        ],
        "name": "changeImplementationAddress",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "interfaceName",
            "type": "bytes32"
          }
        ],
        "name": "getImplementationAddress",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      }
    ],
    "devdoc": {
      "details": "Examples are the Oracle or Store interfaces.",
      "kind": "dev",
      "methods": {
        "changeImplementationAddress(bytes32,address)": {
          "params": {
            "implementationAddress": "address of the deployed contract that implements the interface.",
            "interfaceName": "bytes32 encoding of the interface name that is either changed or registered."
          }
        },
        "getImplementationAddress(bytes32)": {
          "params": {
            "interfaceName": "queried interface."
          },
          "returns": {
            "_0": "implementationAddress address of the deployed contract that implements the interface."
          }
        }
      },
      "title": "Provides addresses of the live contracts implementing certain interfaces.",
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "changeImplementationAddress(bytes32,address)": {
          "notice": "Updates the address of the contract that implements `interfaceName`."
        },
        "getImplementationAddress(bytes32)": {
          "notice": "Gets the address of the contract that implements the given `interfaceName`."
        }
      },
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": {
      "lib/protocol/packages/core/contracts/oracle/interfaces/FinderInterface.sol": "FinderInterface"
    },
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [
      ":@openzeppelin/=lib/openzeppelin-contracts/",
      ":ds-test/=lib/forge-std/lib/ds-test/src/",
      ":forge-std/=lib/forge-std/src/",
      ":openzeppelin-contracts/=lib/openzeppelin-contracts/",
      ":protocol/=lib/protocol/",
      ":uma-implementation/=lib/protocol/packages/core/contracts/oracle/implementation/",
      ":uma-interface/=lib/protocol/packages/core/contracts/oracle/interfaces/"
    ]
  },
  "sources": {
    "lib/protocol/packages/core/contracts/oracle/interfaces/FinderInterface.sol": {
      "keccak256": "0x9166fbfe08e954eb86d33c114fcde7ce4fd0dda5d9d28b31210582bfc769fa86",
      "license": "AGPL-3.0-only",
      "urls": [
        "bzz-raw://e611e12bcaaebfdf65b67c566ff1d34708e757f01a445bd87c55862e89383b81",
        "dweb:/ipfs/QmYNSq5oopTShdS6j4VWKqoLxmQSRKmWebCxw6K4LfmKrf"
      ]
    }
  },
  "version": 1
}