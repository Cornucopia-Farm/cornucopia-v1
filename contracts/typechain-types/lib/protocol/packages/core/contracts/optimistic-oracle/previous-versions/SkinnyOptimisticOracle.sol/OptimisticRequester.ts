/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../../../../common";

export declare namespace SkinnyOptimisticOracleInterface {
  export type RequestStruct = {
    proposer: PromiseOrValue<string>;
    disputer: PromiseOrValue<string>;
    currency: PromiseOrValue<string>;
    settled: PromiseOrValue<boolean>;
    proposedPrice: PromiseOrValue<BigNumberish>;
    resolvedPrice: PromiseOrValue<BigNumberish>;
    expirationTime: PromiseOrValue<BigNumberish>;
    reward: PromiseOrValue<BigNumberish>;
    finalFee: PromiseOrValue<BigNumberish>;
    bond: PromiseOrValue<BigNumberish>;
    customLiveness: PromiseOrValue<BigNumberish>;
  };

  export type RequestStructOutput = [
    string,
    string,
    string,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    proposer: string;
    disputer: string;
    currency: string;
    settled: boolean;
    proposedPrice: BigNumber;
    resolvedPrice: BigNumber;
    expirationTime: BigNumber;
    reward: BigNumber;
    finalFee: BigNumber;
    bond: BigNumber;
    customLiveness: BigNumber;
  };
}

export interface OptimisticRequesterInterface extends utils.Interface {
  functions: {
    "priceDisputed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "priceProposed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "priceSettled(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "priceDisputed" | "priceProposed" | "priceSettled"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "priceDisputed",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      SkinnyOptimisticOracleInterface.RequestStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "priceProposed",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      SkinnyOptimisticOracleInterface.RequestStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "priceSettled",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      SkinnyOptimisticOracleInterface.RequestStruct
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "priceDisputed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceProposed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceSettled",
    data: BytesLike
  ): Result;

  events: {};
}

export interface OptimisticRequester extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OptimisticRequesterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    priceDisputed(
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      request: SkinnyOptimisticOracleInterface.RequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    priceProposed(
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      request: SkinnyOptimisticOracleInterface.RequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    priceSettled(
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      request: SkinnyOptimisticOracleInterface.RequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  priceDisputed(
    identifier: PromiseOrValue<BytesLike>,
    timestamp: PromiseOrValue<BigNumberish>,
    ancillaryData: PromiseOrValue<BytesLike>,
    request: SkinnyOptimisticOracleInterface.RequestStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  priceProposed(
    identifier: PromiseOrValue<BytesLike>,
    timestamp: PromiseOrValue<BigNumberish>,
    ancillaryData: PromiseOrValue<BytesLike>,
    request: SkinnyOptimisticOracleInterface.RequestStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  priceSettled(
    identifier: PromiseOrValue<BytesLike>,
    timestamp: PromiseOrValue<BigNumberish>,
    ancillaryData: PromiseOrValue<BytesLike>,
    request: SkinnyOptimisticOracleInterface.RequestStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    priceDisputed(
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      request: SkinnyOptimisticOracleInterface.RequestStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    priceProposed(
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      request: SkinnyOptimisticOracleInterface.RequestStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    priceSettled(
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      request: SkinnyOptimisticOracleInterface.RequestStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    priceDisputed(
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      request: SkinnyOptimisticOracleInterface.RequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    priceProposed(
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      request: SkinnyOptimisticOracleInterface.RequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    priceSettled(
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      request: SkinnyOptimisticOracleInterface.RequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    priceDisputed(
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      request: SkinnyOptimisticOracleInterface.RequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    priceProposed(
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      request: SkinnyOptimisticOracleInterface.RequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    priceSettled(
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      request: SkinnyOptimisticOracleInterface.RequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
