{
  "compiler": {
    "version": "0.8.13+commit.abaa5c0e"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [],
        "name": "ancillaryBytesLimit",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "requester",
            "type": "address"
          },
          {
            "internalType": "bytes32",
            "name": "identifier",
            "type": "bytes32"
          },
          {
            "internalType": "uint32",
            "name": "timestamp",
            "type": "uint32"
          },
          {
            "internalType": "bytes",
            "name": "ancillaryData",
            "type": "bytes"
          },
          {
            "components": [
              {
                "internalType": "address",
                "name": "proposer",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "disputer",
                "type": "address"
              },
              {
                "internalType": "contract IERC20",
                "name": "currency",
                "type": "address"
              },
              {
                "internalType": "bool",
                "name": "settled",
                "type": "bool"
              },
              {
                "internalType": "int256",
                "name": "proposedPrice",
                "type": "int256"
              },
              {
                "internalType": "int256",
                "name": "resolvedPrice",
                "type": "int256"
              },
              {
                "internalType": "uint256",
                "name": "expirationTime",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "reward",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "finalFee",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "bond",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "customLiveness",
                "type": "uint256"
              }
            ],
            "internalType": "struct SkinnyOptimisticOracleInterface.Request",
            "name": "request",
            "type": "tuple"
          }
        ],
        "name": "disputePrice",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "totalBond",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "identifier",
            "type": "bytes32"
          },
          {
            "internalType": "uint32",
            "name": "timestamp",
            "type": "uint32"
          },
          {
            "internalType": "bytes",
            "name": "ancillaryData",
            "type": "bytes"
          },
          {
            "components": [
              {
                "internalType": "address",
                "name": "proposer",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "disputer",
                "type": "address"
              },
              {
                "internalType": "contract IERC20",
                "name": "currency",
                "type": "address"
              },
              {
                "internalType": "bool",
                "name": "settled",
                "type": "bool"
              },
              {
                "internalType": "int256",
                "name": "proposedPrice",
                "type": "int256"
              },
              {
                "internalType": "int256",
                "name": "resolvedPrice",
                "type": "int256"
              },
              {
                "internalType": "uint256",
                "name": "expirationTime",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "reward",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "finalFee",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "bond",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "customLiveness",
                "type": "uint256"
              }
            ],
            "internalType": "struct SkinnyOptimisticOracleInterface.Request",
            "name": "request",
            "type": "tuple"
          },
          {
            "internalType": "address",
            "name": "disputer",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "requester",
            "type": "address"
          }
        ],
        "name": "disputePriceFor",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "totalBond",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "requester",
            "type": "address"
          },
          {
            "internalType": "bytes32",
            "name": "identifier",
            "type": "bytes32"
          },
          {
            "internalType": "uint32",
            "name": "timestamp",
            "type": "uint32"
          },
          {
            "internalType": "bytes",
            "name": "ancillaryData",
            "type": "bytes"
          },
          {
            "components": [
              {
                "internalType": "address",
                "name": "proposer",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "disputer",
                "type": "address"
              },
              {
                "internalType": "contract IERC20",
                "name": "currency",
                "type": "address"
              },
              {
                "internalType": "bool",
                "name": "settled",
                "type": "bool"
              },
              {
                "internalType": "int256",
                "name": "proposedPrice",
                "type": "int256"
              },
              {
                "internalType": "int256",
                "name": "resolvedPrice",
                "type": "int256"
              },
              {
                "internalType": "uint256",
                "name": "expirationTime",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "reward",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "finalFee",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "bond",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "customLiveness",
                "type": "uint256"
              }
            ],
            "internalType": "struct SkinnyOptimisticOracleInterface.Request",
            "name": "request",
            "type": "tuple"
          }
        ],
        "name": "getState",
        "outputs": [
          {
            "internalType": "enum OptimisticOracleInterface.State",
            "name": "",
            "type": "uint8"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "requester",
            "type": "address"
          },
          {
            "internalType": "bytes32",
            "name": "identifier",
            "type": "bytes32"
          },
          {
            "internalType": "uint32",
            "name": "timestamp",
            "type": "uint32"
          },
          {
            "internalType": "bytes",
            "name": "ancillaryData",
            "type": "bytes"
          },
          {
            "components": [
              {
                "internalType": "address",
                "name": "proposer",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "disputer",
                "type": "address"
              },
              {
                "internalType": "contract IERC20",
                "name": "currency",
                "type": "address"
              },
              {
                "internalType": "bool",
                "name": "settled",
                "type": "bool"
              },
              {
                "internalType": "int256",
                "name": "proposedPrice",
                "type": "int256"
              },
              {
                "internalType": "int256",
                "name": "resolvedPrice",
                "type": "int256"
              },
              {
                "internalType": "uint256",
                "name": "expirationTime",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "reward",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "finalFee",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "bond",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "customLiveness",
                "type": "uint256"
              }
            ],
            "internalType": "struct SkinnyOptimisticOracleInterface.Request",
            "name": "request",
            "type": "tuple"
          }
        ],
        "name": "hasPrice",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "requester",
            "type": "address"
          },
          {
            "internalType": "bytes32",
            "name": "identifier",
            "type": "bytes32"
          },
          {
            "internalType": "uint32",
            "name": "timestamp",
            "type": "uint32"
          },
          {
            "internalType": "bytes",
            "name": "ancillaryData",
            "type": "bytes"
          },
          {
            "components": [
              {
                "internalType": "address",
                "name": "proposer",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "disputer",
                "type": "address"
              },
              {
                "internalType": "contract IERC20",
                "name": "currency",
                "type": "address"
              },
              {
                "internalType": "bool",
                "name": "settled",
                "type": "bool"
              },
              {
                "internalType": "int256",
                "name": "proposedPrice",
                "type": "int256"
              },
              {
                "internalType": "int256",
                "name": "resolvedPrice",
                "type": "int256"
              },
              {
                "internalType": "uint256",
                "name": "expirationTime",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "reward",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "finalFee",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "bond",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "customLiveness",
                "type": "uint256"
              }
            ],
            "internalType": "struct SkinnyOptimisticOracleInterface.Request",
            "name": "request",
            "type": "tuple"
          },
          {
            "internalType": "int256",
            "name": "proposedPrice",
            "type": "int256"
          }
        ],
        "name": "proposePrice",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "totalBond",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "requester",
            "type": "address"
          },
          {
            "internalType": "bytes32",
            "name": "identifier",
            "type": "bytes32"
          },
          {
            "internalType": "uint32",
            "name": "timestamp",
            "type": "uint32"
          },
          {
            "internalType": "bytes",
            "name": "ancillaryData",
            "type": "bytes"
          },
          {
            "components": [
              {
                "internalType": "address",
                "name": "proposer",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "disputer",
                "type": "address"
              },
              {
                "internalType": "contract IERC20",
                "name": "currency",
                "type": "address"
              },
              {
                "internalType": "bool",
                "name": "settled",
                "type": "bool"
              },
              {
                "internalType": "int256",
                "name": "proposedPrice",
                "type": "int256"
              },
              {
                "internalType": "int256",
                "name": "resolvedPrice",
                "type": "int256"
              },
              {
                "internalType": "uint256",
                "name": "expirationTime",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "reward",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "finalFee",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "bond",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "customLiveness",
                "type": "uint256"
              }
            ],
            "internalType": "struct SkinnyOptimisticOracleInterface.Request",
            "name": "request",
            "type": "tuple"
          },
          {
            "internalType": "address",
            "name": "proposer",
            "type": "address"
          },
          {
            "internalType": "int256",
            "name": "proposedPrice",
            "type": "int256"
          }
        ],
        "name": "proposePriceFor",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "totalBond",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "identifier",
            "type": "bytes32"
          },
          {
            "internalType": "uint32",
            "name": "timestamp",
            "type": "uint32"
          },
          {
            "internalType": "bytes",
            "name": "ancillaryData",
            "type": "bytes"
          },
          {
            "internalType": "contract IERC20",
            "name": "currency",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "reward",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "bond",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "customLiveness",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "proposer",
            "type": "address"
          },
          {
            "internalType": "int256",
            "name": "proposedPrice",
            "type": "int256"
          }
        ],
        "name": "requestAndProposePriceFor",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "totalBond",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "identifier",
            "type": "bytes32"
          },
          {
            "internalType": "uint32",
            "name": "timestamp",
            "type": "uint32"
          },
          {
            "internalType": "bytes",
            "name": "ancillaryData",
            "type": "bytes"
          },
          {
            "internalType": "contract IERC20",
            "name": "currency",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "reward",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "bond",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "customLiveness",
            "type": "uint256"
          }
        ],
        "name": "requestPrice",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "totalBond",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "requester",
            "type": "address"
          },
          {
            "internalType": "bytes32",
            "name": "identifier",
            "type": "bytes32"
          },
          {
            "internalType": "uint32",
            "name": "timestamp",
            "type": "uint32"
          },
          {
            "internalType": "bytes",
            "name": "ancillaryData",
            "type": "bytes"
          },
          {
            "components": [
              {
                "internalType": "address",
                "name": "proposer",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "disputer",
                "type": "address"
              },
              {
                "internalType": "contract IERC20",
                "name": "currency",
                "type": "address"
              },
              {
                "internalType": "bool",
                "name": "settled",
                "type": "bool"
              },
              {
                "internalType": "int256",
                "name": "proposedPrice",
                "type": "int256"
              },
              {
                "internalType": "int256",
                "name": "resolvedPrice",
                "type": "int256"
              },
              {
                "internalType": "uint256",
                "name": "expirationTime",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "reward",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "finalFee",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "bond",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "customLiveness",
                "type": "uint256"
              }
            ],
            "internalType": "struct SkinnyOptimisticOracleInterface.Request",
            "name": "request",
            "type": "tuple"
          }
        ],
        "name": "settle",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "payout",
            "type": "uint256"
          },
          {
            "internalType": "int256",
            "name": "resolvedPrice",
            "type": "int256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes",
            "name": "ancillaryData",
            "type": "bytes"
          },
          {
            "internalType": "address",
            "name": "requester",
            "type": "address"
          }
        ],
        "name": "stampAncillaryData",
        "outputs": [
          {
            "internalType": "bytes",
            "name": "",
            "type": "bytes"
          }
        ],
        "stateMutability": "pure",
        "type": "function"
      }
    ],
    "devdoc": {
      "details": "Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.",
      "kind": "dev",
      "methods": {
        "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))": {
          "params": {
            "ancillaryData": "ancillary data of the price being requested.",
            "identifier": "price identifier to identify the existing request.",
            "request": "price request parameters whose hash must match the request that the caller wants to dispute.",
            "requester": "sender of the initial price request.",
            "timestamp": "timestamp to identify the existing request."
          },
          "returns": {
            "totalBond": "the amount that's pulled from the caller's wallet as a bond. The bond will be returned to the disputer once settled if the dispute was valid (the proposal was incorrect)."
          }
        },
        "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)": {
          "params": {
            "ancillaryData": "ancillary data of the price being requested.",
            "disputer": "address to set as the disputer.",
            "identifier": "price identifier to identify the existing request.",
            "request": "price request parameters whose hash must match the request that the caller wants to dispute.",
            "requester": "sender of the initial price request.",
            "timestamp": "timestamp to identify the existing request."
          },
          "returns": {
            "totalBond": "the amount that's pulled from the caller's wallet as a bond. The bond will be returned to the disputer once settled if the dispute was valid (the proposal was incorrect)."
          }
        },
        "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))": {
          "params": {
            "ancillaryData": "ancillary data of the price being requested.",
            "identifier": "price identifier to identify the existing request.",
            "request": "price request parameters.",
            "requester": "sender of the initial price request.",
            "timestamp": "timestamp to identify the existing request."
          },
          "returns": {
            "_0": "the State."
          }
        },
        "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))": {
          "params": {
            "ancillaryData": "ancillary data of the price being requested.",
            "identifier": "price identifier to identify the existing request.",
            "request": "price request parameters. The hash of these parameters must match with the request hash that is associated with the price request unique ID {requester, identifier, timestamp, ancillaryData}, or this method will revert.",
            "requester": "sender of the initial price request.",
            "timestamp": "timestamp to identify the existing request."
          },
          "returns": {
            "_0": "boolean indicating true if price exists and false if not."
          }
        },
        "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)": {
          "params": {
            "ancillaryData": "ancillary data of the price being requested.",
            "identifier": "price identifier to identify the existing request.",
            "proposedPrice": "price being proposed.",
            "request": "price request parameters whose hash must match the request that the caller wants to propose a price for.",
            "requester": "sender of the initial price request.",
            "timestamp": "timestamp to identify the existing request."
          },
          "returns": {
            "totalBond": "the amount that's pulled from the caller's wallet as a bond. The bond will be returned to the proposer once settled if the proposal is correct."
          }
        },
        "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)": {
          "params": {
            "ancillaryData": "ancillary data of the price being requested.",
            "identifier": "price identifier to identify the existing request.",
            "proposedPrice": "price being proposed.",
            "proposer": "address to set as the proposer.",
            "request": "price request parameters whose hash must match the request that the caller wants to propose a price for.",
            "requester": "sender of the initial price request.",
            "timestamp": "timestamp to identify the existing request."
          },
          "returns": {
            "totalBond": "the amount that's pulled from the caller's wallet as a bond. The bond will be returned to the proposer once settled if the proposal is correct."
          }
        },
        "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)": {
          "details": "The caller is the requester, but the proposer can be customized.",
          "params": {
            "ancillaryData": "ancillary data of the price being requested.",
            "bond": "custom proposal bond to set for request. If set to 0, defaults to the final fee.",
            "currency": "ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.",
            "customLiveness": "custom proposal liveness to set for request.",
            "identifier": "price identifier to identify the existing request.",
            "proposedPrice": "price being proposed.",
            "proposer": "address to set as the proposer.",
            "reward": "reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,               which could make sense if the contract requests and proposes the value in the same call or               provides its own reward system.",
            "timestamp": "timestamp to identify the existing request."
          },
          "returns": {
            "totalBond": "the amount that's pulled from the caller's wallet as a bond. The bond will be returned to the proposer once settled if the proposal is correct."
          }
        },
        "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)": {
          "params": {
            "ancillaryData": "ancillary data representing additional args being passed with the price request.",
            "bond": "custom proposal bond to set for request. If set to 0, defaults to the final fee.",
            "currency": "ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.",
            "customLiveness": "custom proposal liveness to set for request.",
            "identifier": "price identifier being requested.",
            "reward": "reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,               which could make sense if the contract requests and proposes the value in the same call or               provides its own reward system.",
            "timestamp": "timestamp of the price being requested."
          },
          "returns": {
            "totalBond": "default bond + final fee that the proposer and disputer will be required to pay."
          }
        },
        "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))": {
          "params": {
            "ancillaryData": "ancillary data of the price being requested.",
            "identifier": "price identifier to identify the existing request.",
            "request": "price request parameters whose hash must match the request that the caller wants to settle.",
            "requester": "sender of the initial price request.",
            "timestamp": "timestamp to identify the existing request."
          },
          "returns": {
            "payout": "the amount that the \"winner\" (proposer or disputer) receives on settlement. This amount includes the returned bonds as well as additional rewards.",
            "resolvedPrice": "the price that the request settled to."
          }
        },
        "stampAncillaryData(bytes,address)": {
          "params": {
            "ancillaryData": "ancillary data of the price being requested.",
            "requester": "sender of the initial price request."
          },
          "returns": {
            "_0": "the stamped ancillary bytes."
          }
        }
      },
      "title": "Interface for the gas-cost-reduced version of the OptimisticOracle.",
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))": {
          "notice": "Disputes a price request with an active proposal where caller is the disputer."
        },
        "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)": {
          "notice": "Disputes a price request with an active proposal on another address' behalf. Note: this address will receive any rewards that come from this dispute. However, any bonds are pulled from the caller."
        },
        "getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))": {
          "notice": "Computes the current state of a price request. See the State enum for more details."
        },
        "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))": {
          "notice": "Checks if a given request has resolved, expired or been settled (i.e the optimistic oracle has a price)."
        },
        "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)": {
          "notice": "Proposes a price value where caller is the proposer."
        },
        "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)": {
          "notice": "Proposes a price value on another address' behalf. Note: this address will receive any rewards that come from this proposal. However, any bonds are pulled from the caller."
        },
        "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)": {
          "notice": "Combines logic of requestPrice and proposePrice while taking advantage of gas savings from not having to overwrite Request params that a normal requestPrice() => proposePrice() flow would entail. Note: The proposer will receive any rewards that come from this proposal. However, any bonds are pulled from the caller."
        },
        "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)": {
          "notice": "Requests a new price."
        },
        "settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))": {
          "notice": "Attempts to settle an outstanding price request. Will revert if it isn't settleable."
        },
        "stampAncillaryData(bytes,address)": {
          "notice": "Generates stamped ancillary data in the format that it would be used in the case of a price dispute."
        }
      },
      "notice": "Differences from normal OptimisticOracle: - refundOnDispute: flag is removed, by default there are no refunds on disputes. - customizing request parameters: In the OptimisticOracle, parameters like `bond` and `customLiveness` can be reset   after a request is already made via `requestPrice`. In the SkinnyOptimisticOracle, these parameters can only be   set in `requestPrice`, which has an expanded input set. - settleAndGetPrice: Replaced by `settle`, which can only be called once per settleable request. The resolved price   can be fetched via the `Settle` event or the return value of `settle`. - general changes to interface: Functions that interact with existing requests all require the parameters of the   request to modify to be passed as input. These parameters must match with the existing request parameters or the   function will revert. This change reflects the internal refactor to store hashed request parameters instead of the   full request struct.",
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": {
      "lib/protocol/packages/core/contracts/oracle/interfaces/SkinnyOptimisticOracleInterface.sol": "SkinnyOptimisticOracleInterface"
    },
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [
      ":@openzeppelin/=lib/openzeppelin-contracts/",
      ":ds-test/=lib/forge-std/lib/ds-test/src/",
      ":forge-std/=lib/forge-std/src/",
      ":openzeppelin-contracts/=lib/openzeppelin-contracts/",
      ":protocol/=lib/protocol/",
      ":uma-implementation/=lib/protocol/packages/core/contracts/oracle/implementation/",
      ":uma-interface/=lib/protocol/packages/core/contracts/oracle/interfaces/"
    ]
  },
  "sources": {
    "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
      "keccak256": "0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da",
      "license": "MIT",
      "urls": [
        "bzz-raw://2c3d0973630ed74f2b5ce3944677a885dc70ec32fc83b35f55045a10224da32b",
        "dweb:/ipfs/QmbefZ5RoEZKNHXCALfh683PnaNYzKPcKMFjyY1DVAgq8A"
      ]
    },
    "lib/protocol/packages/core/contracts/oracle/interfaces/OptimisticOracleInterface.sol": {
      "keccak256": "0x92e7280c1abd5f0c4fcd20247fc1b8428aaf4eeea59439c074d15fdaf9c64989",
      "license": "AGPL-3.0-only",
      "urls": [
        "bzz-raw://8d12bbcf0a91cef63c4767bffd047254599c5a1fce38e5e81d3005e102fdeef8",
        "dweb:/ipfs/QmTkd3AG9gdvBZq3HKCUW8eErvkguM2QqE3nUDGfvye3Yi"
      ]
    },
    "lib/protocol/packages/core/contracts/oracle/interfaces/SkinnyOptimisticOracleInterface.sol": {
      "keccak256": "0x91d21e44a97b719106e8f97b99399a3d8dc3697badd01df06518892f38fe033f",
      "license": "AGPL-3.0-only",
      "urls": [
        "bzz-raw://68c350c822b256b43543ac4dd3dd1413ed95f25a9415d5dba4c562cd11d55716",
        "dweb:/ipfs/QmZyYeBnM59oPmWcK1KERNayg7xuHv12sLzzmqC42Lq76a"
      ]
    }
  },
  "version": 1
}