{
  "compiler": {
    "version": "0.8.13+commit.abaa5c0e"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [],
        "name": "ancillaryBytesLimit",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "requester",
            "type": "address"
          },
          {
            "internalType": "bytes32",
            "name": "identifier",
            "type": "bytes32"
          },
          {
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "ancillaryData",
            "type": "bytes"
          }
        ],
        "name": "disputePrice",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "totalBond",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "disputer",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "requester",
            "type": "address"
          },
          {
            "internalType": "bytes32",
            "name": "identifier",
            "type": "bytes32"
          },
          {
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "ancillaryData",
            "type": "bytes"
          }
        ],
        "name": "disputePriceFor",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "totalBond",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "requester",
            "type": "address"
          },
          {
            "internalType": "bytes32",
            "name": "identifier",
            "type": "bytes32"
          },
          {
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "ancillaryData",
            "type": "bytes"
          }
        ],
        "name": "getRequest",
        "outputs": [
          {
            "components": [
              {
                "internalType": "address",
                "name": "proposer",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "disputer",
                "type": "address"
              },
              {
                "internalType": "contract IERC20",
                "name": "currency",
                "type": "address"
              },
              {
                "internalType": "bool",
                "name": "settled",
                "type": "bool"
              },
              {
                "internalType": "bool",
                "name": "refundOnDispute",
                "type": "bool"
              },
              {
                "internalType": "int256",
                "name": "proposedPrice",
                "type": "int256"
              },
              {
                "internalType": "int256",
                "name": "resolvedPrice",
                "type": "int256"
              },
              {
                "internalType": "uint256",
                "name": "expirationTime",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "reward",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "finalFee",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "bond",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "customLiveness",
                "type": "uint256"
              }
            ],
            "internalType": "struct OptimisticOracleInterface.Request",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "requester",
            "type": "address"
          },
          {
            "internalType": "bytes32",
            "name": "identifier",
            "type": "bytes32"
          },
          {
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "ancillaryData",
            "type": "bytes"
          }
        ],
        "name": "getState",
        "outputs": [
          {
            "internalType": "enum OptimisticOracleInterface.State",
            "name": "",
            "type": "uint8"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "requester",
            "type": "address"
          },
          {
            "internalType": "bytes32",
            "name": "identifier",
            "type": "bytes32"
          },
          {
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "ancillaryData",
            "type": "bytes"
          }
        ],
        "name": "hasPrice",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "requester",
            "type": "address"
          },
          {
            "internalType": "bytes32",
            "name": "identifier",
            "type": "bytes32"
          },
          {
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "ancillaryData",
            "type": "bytes"
          },
          {
            "internalType": "int256",
            "name": "proposedPrice",
            "type": "int256"
          }
        ],
        "name": "proposePrice",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "totalBond",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "proposer",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "requester",
            "type": "address"
          },
          {
            "internalType": "bytes32",
            "name": "identifier",
            "type": "bytes32"
          },
          {
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "ancillaryData",
            "type": "bytes"
          },
          {
            "internalType": "int256",
            "name": "proposedPrice",
            "type": "int256"
          }
        ],
        "name": "proposePriceFor",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "totalBond",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "identifier",
            "type": "bytes32"
          },
          {
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "ancillaryData",
            "type": "bytes"
          },
          {
            "internalType": "contract IERC20",
            "name": "currency",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "reward",
            "type": "uint256"
          }
        ],
        "name": "requestPrice",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "totalBond",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "identifier",
            "type": "bytes32"
          },
          {
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "ancillaryData",
            "type": "bytes"
          },
          {
            "internalType": "uint256",
            "name": "bond",
            "type": "uint256"
          }
        ],
        "name": "setBond",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "totalBond",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "identifier",
            "type": "bytes32"
          },
          {
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "ancillaryData",
            "type": "bytes"
          },
          {
            "internalType": "uint256",
            "name": "customLiveness",
            "type": "uint256"
          }
        ],
        "name": "setCustomLiveness",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "identifier",
            "type": "bytes32"
          },
          {
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "ancillaryData",
            "type": "bytes"
          }
        ],
        "name": "setRefundOnDispute",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "requester",
            "type": "address"
          },
          {
            "internalType": "bytes32",
            "name": "identifier",
            "type": "bytes32"
          },
          {
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "ancillaryData",
            "type": "bytes"
          }
        ],
        "name": "settle",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "payout",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "identifier",
            "type": "bytes32"
          },
          {
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "ancillaryData",
            "type": "bytes"
          }
        ],
        "name": "settleAndGetPrice",
        "outputs": [
          {
            "internalType": "int256",
            "name": "",
            "type": "int256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes",
            "name": "ancillaryData",
            "type": "bytes"
          },
          {
            "internalType": "address",
            "name": "requester",
            "type": "address"
          }
        ],
        "name": "stampAncillaryData",
        "outputs": [
          {
            "internalType": "bytes",
            "name": "",
            "type": "bytes"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      }
    ],
    "devdoc": {
      "details": "Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.",
      "kind": "dev",
      "methods": {
        "disputePrice(address,bytes32,uint256,bytes)": {
          "params": {
            "ancillaryData": "ancillary data of the price being requested.",
            "identifier": "price identifier to identify the existing request.",
            "requester": "sender of the initial price request.",
            "timestamp": "timestamp to identify the existing request."
          },
          "returns": {
            "totalBond": "the amount that's pulled from the disputer's wallet as a bond. The bond will be returned to the disputer once settled if the dispute was valid (the proposal was incorrect)."
          }
        },
        "disputePriceFor(address,address,bytes32,uint256,bytes)": {
          "params": {
            "ancillaryData": "ancillary data of the price being requested.",
            "disputer": "address to set as the disputer.",
            "identifier": "price identifier to identify the existing request.",
            "requester": "sender of the initial price request.",
            "timestamp": "timestamp to identify the existing request."
          },
          "returns": {
            "totalBond": "the amount that's pulled from the caller's wallet as a bond. The bond will be returned to the disputer once settled if the dispute was value (the proposal was incorrect)."
          }
        },
        "getRequest(address,bytes32,uint256,bytes)": {
          "params": {
            "ancillaryData": "ancillary data of the price being requested.",
            "identifier": "price identifier to identify the existing request.",
            "requester": "sender of the initial price request.",
            "timestamp": "timestamp to identify the existing request."
          },
          "returns": {
            "_0": "the Request data structure."
          }
        },
        "getState(address,bytes32,uint256,bytes)": {
          "params": {
            "ancillaryData": "ancillary data of the price being requested.",
            "identifier": "price identifier to identify the existing request.",
            "requester": "sender of the initial price request.",
            "timestamp": "timestamp to identify the existing request."
          },
          "returns": {
            "_0": "the State enum value."
          }
        },
        "hasPrice(address,bytes32,uint256,bytes)": {
          "params": {
            "ancillaryData": "ancillary data of the price being requested.",
            "identifier": "price identifier to identify the existing request.",
            "requester": "sender of the initial price request.",
            "timestamp": "timestamp to identify the existing request."
          },
          "returns": {
            "_0": "true if price has resolved or settled, false otherwise."
          }
        },
        "proposePrice(address,bytes32,uint256,bytes,int256)": {
          "params": {
            "ancillaryData": "ancillary data of the price being requested.",
            "identifier": "price identifier to identify the existing request.",
            "proposedPrice": "price being proposed.",
            "requester": "sender of the initial price request.",
            "timestamp": "timestamp to identify the existing request."
          },
          "returns": {
            "totalBond": "the amount that's pulled from the proposer's wallet as a bond. The bond will be returned to the proposer once settled if the proposal is correct."
          }
        },
        "proposePriceFor(address,address,bytes32,uint256,bytes,int256)": {
          "params": {
            "ancillaryData": "ancillary data of the price being requested.",
            "identifier": "price identifier to identify the existing request.",
            "proposedPrice": "price being proposed.",
            "proposer": "address to set as the proposer.",
            "requester": "sender of the initial price request.",
            "timestamp": "timestamp to identify the existing request."
          },
          "returns": {
            "totalBond": "the amount that's pulled from the caller's wallet as a bond. The bond will be returned to the proposer once settled if the proposal is correct."
          }
        },
        "requestPrice(bytes32,uint256,bytes,address,uint256)": {
          "params": {
            "ancillaryData": "ancillary data representing additional args being passed with the price request.",
            "currency": "ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.",
            "identifier": "price identifier being requested.",
            "reward": "reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,               which could make sense if the contract requests and proposes the value in the same call or               provides its own reward system.",
            "timestamp": "timestamp of the price being requested."
          },
          "returns": {
            "totalBond": "default bond (final fee) + final fee that the proposer and disputer will be required to pay. This can be changed with a subsequent call to setBond()."
          }
        },
        "setBond(bytes32,uint256,bytes,uint256)": {
          "params": {
            "ancillaryData": "ancillary data of the price being requested.",
            "bond": "custom bond amount to set.",
            "identifier": "price identifier to identify the existing request.",
            "timestamp": "timestamp to identify the existing request."
          },
          "returns": {
            "totalBond": "new bond + final fee that the proposer and disputer will be required to pay. This can be changed again with a subsequent call to setBond()."
          }
        },
        "setCustomLiveness(bytes32,uint256,bytes,uint256)": {
          "params": {
            "ancillaryData": "ancillary data of the price being requested.",
            "customLiveness": "new custom liveness.",
            "identifier": "price identifier to identify the existing request.",
            "timestamp": "timestamp to identify the existing request."
          }
        },
        "setRefundOnDispute(bytes32,uint256,bytes)": {
          "params": {
            "ancillaryData": "ancillary data of the price being requested.",
            "identifier": "price identifier to identify the existing request.",
            "timestamp": "timestamp to identify the existing request."
          }
        },
        "settle(address,bytes32,uint256,bytes)": {
          "params": {
            "ancillaryData": "ancillary data of the price being requested.",
            "identifier": "price identifier to identify the existing request.",
            "requester": "sender of the initial price request.",
            "timestamp": "timestamp to identify the existing request."
          },
          "returns": {
            "payout": "the amount that the \"winner\" (proposer or disputer) receives on settlement. This amount includes the returned bonds as well as additional rewards."
          }
        },
        "settleAndGetPrice(bytes32,uint256,bytes)": {
          "params": {
            "ancillaryData": "ancillary data of the price being requested.",
            "identifier": "price identifier to identify the existing request.",
            "timestamp": "timestamp to identify the existing request."
          },
          "returns": {
            "_0": "resolved price."
          }
        }
      },
      "title": "Financial contract facing Oracle interface.",
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "disputePrice(address,bytes32,uint256,bytes)": {
          "notice": "Disputes a price value for an existing price request with an active proposal."
        },
        "disputePriceFor(address,address,bytes32,uint256,bytes)": {
          "notice": "Disputes a price request with an active proposal on another address' behalf. Note: this address will receive any rewards that come from this dispute. However, any bonds are pulled from the caller."
        },
        "getRequest(address,bytes32,uint256,bytes)": {
          "notice": "Gets the current data structure containing all information about a price request."
        },
        "getState(address,bytes32,uint256,bytes)": {
          "notice": "Returns the state of a price request."
        },
        "hasPrice(address,bytes32,uint256,bytes)": {
          "notice": "Checks if a given request has resolved or been settled (i.e the optimistic oracle has a price)."
        },
        "proposePrice(address,bytes32,uint256,bytes,int256)": {
          "notice": "Proposes a price value for an existing price request."
        },
        "proposePriceFor(address,address,bytes32,uint256,bytes,int256)": {
          "notice": "Proposes a price value on another address' behalf. Note: this address will receive any rewards that come from this proposal. However, any bonds are pulled from the caller."
        },
        "requestPrice(bytes32,uint256,bytes,address,uint256)": {
          "notice": "Requests a new price."
        },
        "setBond(bytes32,uint256,bytes,uint256)": {
          "notice": "Set the proposal bond associated with a price request."
        },
        "setCustomLiveness(bytes32,uint256,bytes,uint256)": {
          "notice": "Sets a custom liveness value for the request. Liveness is the amount of time a proposal must wait before being auto-resolved."
        },
        "setRefundOnDispute(bytes32,uint256,bytes)": {
          "notice": "Sets the request to refund the reward if the proposal is disputed. This can help to \"hedge\" the caller in the event of a dispute-caused delay. Note: in the event of a dispute, the winner still receives the other's bond, so there is still profit to be made even if the reward is refunded."
        },
        "settle(address,bytes32,uint256,bytes)": {
          "notice": "Attempts to settle an outstanding price request. Will revert if it isn't settleable."
        },
        "settleAndGetPrice(bytes32,uint256,bytes)": {
          "notice": "Retrieves a price that was previously requested by a caller. Reverts if the request is not settled or settleable. Note: this method is not view so that this call may actually settle the price request if it hasn't been settled."
        }
      },
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": {
      "lib/protocol/packages/core/contracts/oracle/interfaces/OptimisticOracleInterface.sol": "OptimisticOracleInterface"
    },
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [
      ":@openzeppelin/=lib/openzeppelin-contracts/",
      ":ds-test/=lib/forge-std/lib/ds-test/src/",
      ":forge-std/=lib/forge-std/src/",
      ":openzeppelin-contracts/=lib/openzeppelin-contracts/",
      ":protocol/=lib/protocol/",
      ":uma-implementation/=lib/protocol/packages/core/contracts/oracle/implementation/",
      ":uma-interface/=lib/protocol/packages/core/contracts/oracle/interfaces/"
    ]
  },
  "sources": {
    "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
      "keccak256": "0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da",
      "license": "MIT",
      "urls": [
        "bzz-raw://2c3d0973630ed74f2b5ce3944677a885dc70ec32fc83b35f55045a10224da32b",
        "dweb:/ipfs/QmbefZ5RoEZKNHXCALfh683PnaNYzKPcKMFjyY1DVAgq8A"
      ]
    },
    "lib/protocol/packages/core/contracts/oracle/interfaces/OptimisticOracleInterface.sol": {
      "keccak256": "0x92e7280c1abd5f0c4fcd20247fc1b8428aaf4eeea59439c074d15fdaf9c64989",
      "license": "AGPL-3.0-only",
      "urls": [
        "bzz-raw://8d12bbcf0a91cef63c4767bffd047254599c5a1fce38e5e81d3005e102fdeef8",
        "dweb:/ipfs/QmTkd3AG9gdvBZq3HKCUW8eErvkguM2QqE3nUDGfvye3Yi"
      ]
    }
  },
  "version": 1
}