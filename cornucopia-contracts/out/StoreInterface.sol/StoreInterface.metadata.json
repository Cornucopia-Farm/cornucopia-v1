{
  "compiler": {
    "version": "0.8.13+commit.abaa5c0e"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "currency",
            "type": "address"
          }
        ],
        "name": "computeFinalFee",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "rawValue",
                "type": "uint256"
              }
            ],
            "internalType": "struct FixedPoint.Unsigned",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "startTime",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "endTime",
            "type": "uint256"
          },
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "rawValue",
                "type": "uint256"
              }
            ],
            "internalType": "struct FixedPoint.Unsigned",
            "name": "pfc",
            "type": "tuple"
          }
        ],
        "name": "computeRegularFee",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "rawValue",
                "type": "uint256"
              }
            ],
            "internalType": "struct FixedPoint.Unsigned",
            "name": "regularFee",
            "type": "tuple"
          },
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "rawValue",
                "type": "uint256"
              }
            ],
            "internalType": "struct FixedPoint.Unsigned",
            "name": "latePenalty",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "payOracleFees",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "erc20Address",
            "type": "address"
          },
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "rawValue",
                "type": "uint256"
              }
            ],
            "internalType": "struct FixedPoint.Unsigned",
            "name": "amount",
            "type": "tuple"
          }
        ],
        "name": "payOracleFeesErc20",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "devdoc": {
      "kind": "dev",
      "methods": {
        "computeFinalFee(address)": {
          "params": {
            "currency": "token used to pay the final fee."
          },
          "returns": {
            "_0": "finalFee amount due."
          }
        },
        "computeRegularFee(uint256,uint256,(uint256))": {
          "params": {
            "endTime": "end time until which the fee is paid.",
            "pfc": "\"profit from corruption\", or the maximum amount of margin currency that a token sponsor could extract from the contract through corrupting the price feed in their favor.",
            "startTime": "defines the beginning time from which the fee is paid."
          },
          "returns": {
            "latePenalty": "for paying the fee after the deadline.",
            "regularFee": "amount owed for the duration from start to end time for the given pfc."
          }
        },
        "payOracleFees()": {
          "details": "To be used by contracts whose margin currency is ETH."
        },
        "payOracleFeesErc20(address,(uint256))": {
          "details": "To be used if the margin currency is an ERC20 token rather than ETH.",
          "params": {
            "amount": "number of tokens to transfer. An approval for at least this amount must exist.",
            "erc20Address": "address of the ERC20 token used to pay the fee."
          }
        }
      },
      "title": "Interface that allows financial contracts to pay oracle fees for their use of the system.",
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "computeFinalFee(address)": {
          "notice": "Computes the final oracle fees that a contract should pay at settlement."
        },
        "computeRegularFee(uint256,uint256,(uint256))": {
          "notice": "Computes the regular oracle fees that a contract should pay for a period."
        },
        "payOracleFees()": {
          "notice": "Pays Oracle fees in ETH to the store."
        },
        "payOracleFeesErc20(address,(uint256))": {
          "notice": "Pays oracle fees in the margin currency, erc20Address, to the store."
        }
      },
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": {
      "lib/protocol/packages/core/contracts/oracle/interfaces/StoreInterface.sol": "StoreInterface"
    },
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [
      ":@openzeppelin/=lib/openzeppelin-contracts/",
      ":ds-test/=lib/forge-std/lib/ds-test/src/",
      ":forge-std/=lib/forge-std/src/",
      ":openzeppelin-contracts/=lib/openzeppelin-contracts/",
      ":protocol/=lib/protocol/",
      ":uma-implementation/=lib/protocol/packages/core/contracts/oracle/implementation/",
      ":uma-interface/=lib/protocol/packages/core/contracts/oracle/interfaces/"
    ]
  },
  "sources": {
    "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
      "keccak256": "0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da",
      "license": "MIT",
      "urls": [
        "bzz-raw://2c3d0973630ed74f2b5ce3944677a885dc70ec32fc83b35f55045a10224da32b",
        "dweb:/ipfs/QmbefZ5RoEZKNHXCALfh683PnaNYzKPcKMFjyY1DVAgq8A"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol": {
      "keccak256": "0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21",
      "license": "MIT",
      "urls": [
        "bzz-raw://973868f808e88e21a1a0a01d4839314515ee337ad096286c88e41b74dcc11fc2",
        "dweb:/ipfs/QmfYuZxRfx2J2xdk4EXN7jKg4bUYEMTaYk9BAw9Bqn4o2Y"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol": {
      "keccak256": "0x62f53f262fabbbc6d8ab49488d8fce36370351aff2b8d3898d499d68995a71c2",
      "license": "MIT",
      "urls": [
        "bzz-raw://efd599513c2f313a3f5e9536beb2b80a0d2b3dd34202c174a707d81b7dc751ce",
        "dweb:/ipfs/QmdDiENVFSyWjfFskNLnViMH77DHg3oDthkSZk7dMzNNKB"
      ]
    },
    "lib/protocol/packages/core/contracts/common/implementation/FixedPoint.sol": {
      "keccak256": "0x996b97cc4fa5da4064e3aee500edc6972485d59a9334ceec81155e2c2f484dae",
      "license": "AGPL-3.0-only",
      "urls": [
        "bzz-raw://8d7c028926dc2b27e7dc103363dca8a43f60b3351f4a14bcb702660f95c68663",
        "dweb:/ipfs/QmXz4ieFjP5RxJ35F8GbPryYEGvFmxc4Gqx8EK7N57ixzT"
      ]
    },
    "lib/protocol/packages/core/contracts/oracle/interfaces/StoreInterface.sol": {
      "keccak256": "0xbb73671684309c91ad5ef3da1474051d03f2e7d5882bed7f5c4317e5d4c768df",
      "license": "AGPL-3.0-only",
      "urls": [
        "bzz-raw://32386544d3119fd0187a8c4e8b01c739f508ab863faa04345cabc2544081f9e8",
        "dweb:/ipfs/QmYszDURs1x75rsejZkGt9zCkASXnJtufbNsL3XHe2eJPQ"
      ]
    }
  },
  "version": 1
}